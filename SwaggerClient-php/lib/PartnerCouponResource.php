<?php
/**
 * PartnerCouponResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerCouponResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerCouponResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerCouponResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'created_at' => 'string',
        'expires_at' => 'string',
        'updated_at' => 'string',
        'deactivated_at' => 'string',
        'partner_id' => 'int',
        'employee_id' => 'int',
        'message' => 'string',
        'punches_total' => 'int',
        'punches_left' => 'int',
        'price' => '\Ageras\Api\AmountResource',
        'due_at' => 'string',
        'is_silent' => 'bool',
        'partner_offer_id' => 'int',
        'type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'expires_at' => 'expires_at',
        'updated_at' => 'updated_at',
        'deactivated_at' => 'deactivated_at',
        'partner_id' => 'partner_id',
        'employee_id' => 'employee_id',
        'message' => 'message',
        'punches_total' => 'punches_total',
        'punches_left' => 'punches_left',
        'price' => 'price',
        'due_at' => 'due_at',
        'is_silent' => 'is_silent',
        'partner_offer_id' => 'partner_offer_id',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'expires_at' => 'setExpiresAt',
        'updated_at' => 'setUpdatedAt',
        'deactivated_at' => 'setDeactivatedAt',
        'partner_id' => 'setPartnerId',
        'employee_id' => 'setEmployeeId',
        'message' => 'setMessage',
        'punches_total' => 'setPunchesTotal',
        'punches_left' => 'setPunchesLeft',
        'price' => 'setPrice',
        'due_at' => 'setDueAt',
        'is_silent' => 'setIsSilent',
        'partner_offer_id' => 'setPartnerOfferId',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'expires_at' => 'getExpiresAt',
        'updated_at' => 'getUpdatedAt',
        'deactivated_at' => 'getDeactivatedAt',
        'partner_id' => 'getPartnerId',
        'employee_id' => 'getEmployeeId',
        'message' => 'getMessage',
        'punches_total' => 'getPunchesTotal',
        'punches_left' => 'getPunchesLeft',
        'price' => 'getPrice',
        'due_at' => 'getDueAt',
        'is_silent' => 'getIsSilent',
        'partner_offer_id' => 'getPartnerOfferId',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_COUPON = 'coupon';
    const TYPE_REFUND = 'refund';
    const TYPE_TRANSFER = 'transfer';
    const TYPE_REACTIVATION = 'reactivation';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COUPON,
            self::TYPE_REFUND,
            self::TYPE_TRANSFER,
            self::TYPE_REACTIVATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['deactivated_at'] = isset($data['deactivated_at']) ? $data['deactivated_at'] : null;
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['punches_total'] = isset($data['punches_total']) ? $data['punches_total'] : null;
        $this->container['punches_left'] = isset($data['punches_left']) ? $data['punches_left'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['due_at'] = isset($data['due_at']) ? $data['due_at'] : null;
        $this->container['is_silent'] = isset($data['is_silent']) ? $data['is_silent'] : false;
        $this->container['partner_offer_id'] = isset($data['partner_offer_id']) ? $data['partner_offer_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'coupon';
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["coupon", "refund", "transfer", "reactivation"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'coupon', 'refund', 'transfer', 'reactivation'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["coupon", "refund", "transfer", "reactivation"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expires_at
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     * @param string $expires_at
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deactivated_at
     * @return string
     */
    public function getDeactivatedAt()
    {
        return $this->container['deactivated_at'];
    }

    /**
     * Sets deactivated_at
     * @param string $deactivated_at
     * @return $this
     */
    public function setDeactivatedAt($deactivated_at)
    {
        $this->container['deactivated_at'] = $deactivated_at;

        return $this;
    }

    /**
     * Gets partner_id
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     * @param int $partner_id
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets employee_id
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     * @param int $employee_id
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets punches_total
     * @return int
     */
    public function getPunchesTotal()
    {
        return $this->container['punches_total'];
    }

    /**
     * Sets punches_total
     * @param int $punches_total
     * @return $this
     */
    public function setPunchesTotal($punches_total)
    {
        $this->container['punches_total'] = $punches_total;

        return $this;
    }

    /**
     * Gets punches_left
     * @return int
     */
    public function getPunchesLeft()
    {
        return $this->container['punches_left'];
    }

    /**
     * Sets punches_left
     * @param int $punches_left
     * @return $this
     */
    public function setPunchesLeft($punches_left)
    {
        $this->container['punches_left'] = $punches_left;

        return $this;
    }

    /**
     * Gets price
     * @return \Ageras\Api\AmountResource
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param \Ageras\Api\AmountResource $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets due_at
     * @return string
     */
    public function getDueAt()
    {
        return $this->container['due_at'];
    }

    /**
     * Sets due_at
     * @param string $due_at
     * @return $this
     */
    public function setDueAt($due_at)
    {
        $this->container['due_at'] = $due_at;

        return $this;
    }

    /**
     * Gets is_silent
     * @return bool
     */
    public function getIsSilent()
    {
        return $this->container['is_silent'];
    }

    /**
     * Sets is_silent
     * @param bool $is_silent
     * @return $this
     */
    public function setIsSilent($is_silent)
    {
        $this->container['is_silent'] = $is_silent;

        return $this;
    }

    /**
     * Gets partner_offer_id
     * @return int
     */
    public function getPartnerOfferId()
    {
        return $this->container['partner_offer_id'];
    }

    /**
     * Sets partner_offer_id
     * @param int $partner_offer_id
     * @return $this
     */
    public function setPartnerOfferId($partner_offer_id)
    {
        $this->container['partner_offer_id'] = $partner_offer_id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('coupon', 'refund', 'transfer', 'reactivation');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'coupon', 'refund', 'transfer', 'reactivation'");
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


