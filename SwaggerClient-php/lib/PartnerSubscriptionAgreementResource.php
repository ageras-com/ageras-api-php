<?php
/**
 * PartnerSubscriptionAgreementResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerSubscriptionAgreementResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerSubscriptionAgreementResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerSubscriptionAgreementResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created_by_employee_id' => 'int',
        'subscription_type_id' => 'int',
        'subject_to_terms_id' => 'int',
        'is_available_for_agreement' => 'bool',
        'monthly_price' => '\Ageras\Api\AmountResource',
        'agreement_terms' => 'string',
        'accepted_at' => 'string',
        'accepted_by_partner_user_id' => 'int',
        'created_at' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_by_employee_id' => 'created_by_employee_id',
        'subscription_type_id' => 'subscription_type_id',
        'subject_to_terms_id' => 'subject_to_terms_id',
        'is_available_for_agreement' => 'is_available_for_agreement',
        'monthly_price' => 'monthly_price',
        'agreement_terms' => 'agreement_terms',
        'accepted_at' => 'accepted_at',
        'accepted_by_partner_user_id' => 'accepted_by_partner_user_id',
        'created_at' => 'created_at'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_by_employee_id' => 'setCreatedByEmployeeId',
        'subscription_type_id' => 'setSubscriptionTypeId',
        'subject_to_terms_id' => 'setSubjectToTermsId',
        'is_available_for_agreement' => 'setIsAvailableForAgreement',
        'monthly_price' => 'setMonthlyPrice',
        'agreement_terms' => 'setAgreementTerms',
        'accepted_at' => 'setAcceptedAt',
        'accepted_by_partner_user_id' => 'setAcceptedByPartnerUserId',
        'created_at' => 'setCreatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_by_employee_id' => 'getCreatedByEmployeeId',
        'subscription_type_id' => 'getSubscriptionTypeId',
        'subject_to_terms_id' => 'getSubjectToTermsId',
        'is_available_for_agreement' => 'getIsAvailableForAgreement',
        'monthly_price' => 'getMonthlyPrice',
        'agreement_terms' => 'getAgreementTerms',
        'accepted_at' => 'getAcceptedAt',
        'accepted_by_partner_user_id' => 'getAcceptedByPartnerUserId',
        'created_at' => 'getCreatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_by_employee_id'] = isset($data['created_by_employee_id']) ? $data['created_by_employee_id'] : null;
        $this->container['subscription_type_id'] = isset($data['subscription_type_id']) ? $data['subscription_type_id'] : null;
        $this->container['subject_to_terms_id'] = isset($data['subject_to_terms_id']) ? $data['subject_to_terms_id'] : null;
        $this->container['is_available_for_agreement'] = isset($data['is_available_for_agreement']) ? $data['is_available_for_agreement'] : false;
        $this->container['monthly_price'] = isset($data['monthly_price']) ? $data['monthly_price'] : null;
        $this->container['agreement_terms'] = isset($data['agreement_terms']) ? $data['agreement_terms'] : null;
        $this->container['accepted_at'] = isset($data['accepted_at']) ? $data['accepted_at'] : null;
        $this->container['accepted_by_partner_user_id'] = isset($data['accepted_by_partner_user_id']) ? $data['accepted_by_partner_user_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Primary ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_by_employee_id
     * @return int
     */
    public function getCreatedByEmployeeId()
    {
        return $this->container['created_by_employee_id'];
    }

    /**
     * Sets created_by_employee_id
     * @param int $created_by_employee_id Employee who created the agreement.
     * @return $this
     */
    public function setCreatedByEmployeeId($created_by_employee_id)
    {
        $this->container['created_by_employee_id'] = $created_by_employee_id;

        return $this;
    }

    /**
     * Gets subscription_type_id
     * @return int
     */
    public function getSubscriptionTypeId()
    {
        return $this->container['subscription_type_id'];
    }

    /**
     * Sets subscription_type_id
     * @param int $subscription_type_id Subscription type this agreement is for.
     * @return $this
     */
    public function setSubscriptionTypeId($subscription_type_id)
    {
        $this->container['subscription_type_id'] = $subscription_type_id;

        return $this;
    }

    /**
     * Gets subject_to_terms_id
     * @return int
     */
    public function getSubjectToTermsId()
    {
        return $this->container['subject_to_terms_id'];
    }

    /**
     * Sets subject_to_terms_id
     * @param int $subject_to_terms_id Additional terms this agreement includes.
     * @return $this
     */
    public function setSubjectToTermsId($subject_to_terms_id)
    {
        $this->container['subject_to_terms_id'] = $subject_to_terms_id;

        return $this;
    }

    /**
     * Gets is_available_for_agreement
     * @return bool
     */
    public function getIsAvailableForAgreement()
    {
        return $this->container['is_available_for_agreement'];
    }

    /**
     * Sets is_available_for_agreement
     * @param bool $is_available_for_agreement Is this agreement available for agreeing?
     * @return $this
     */
    public function setIsAvailableForAgreement($is_available_for_agreement)
    {
        $this->container['is_available_for_agreement'] = $is_available_for_agreement;

        return $this;
    }

    /**
     * Gets monthly_price
     * @return \Ageras\Api\AmountResource
     */
    public function getMonthlyPrice()
    {
        return $this->container['monthly_price'];
    }

    /**
     * Sets monthly_price
     * @param \Ageras\Api\AmountResource $monthly_price
     * @return $this
     */
    public function setMonthlyPrice($monthly_price)
    {
        $this->container['monthly_price'] = $monthly_price;

        return $this;
    }

    /**
     * Gets agreement_terms
     * @return string
     */
    public function getAgreementTerms()
    {
        return $this->container['agreement_terms'];
    }

    /**
     * Sets agreement_terms
     * @param string $agreement_terms Free form text describing the agreement.
     * @return $this
     */
    public function setAgreementTerms($agreement_terms)
    {
        $this->container['agreement_terms'] = $agreement_terms;

        return $this;
    }

    /**
     * Gets accepted_at
     * @return string
     */
    public function getAcceptedAt()
    {
        return $this->container['accepted_at'];
    }

    /**
     * Sets accepted_at
     * @param string $accepted_at When the agreement was accepted.
     * @return $this
     */
    public function setAcceptedAt($accepted_at)
    {
        $this->container['accepted_at'] = $accepted_at;

        return $this;
    }

    /**
     * Gets accepted_by_partner_user_id
     * @return int
     */
    public function getAcceptedByPartnerUserId()
    {
        return $this->container['accepted_by_partner_user_id'];
    }

    /**
     * Sets accepted_by_partner_user_id
     * @param int $accepted_by_partner_user_id Partner user who accepted the agreement.
     * @return $this
     */
    public function setAcceptedByPartnerUserId($accepted_by_partner_user_id)
    {
        $this->container['accepted_by_partner_user_id'] = $accepted_by_partner_user_id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Date agreement was created.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


