<?php
/**
 * PartnerUserCvResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerUserCvResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerUserCvResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerUserCvResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner_id' => 'int',
        'description' => '\Ageras\Api\PartnerUserCvDescriptionResource',
        'experiences' => '\Ageras\Api\PartnerUserCvExperienceResource[]',
        'educations' => '\Ageras\Api\PartnerUserCvEducationResource[]',
        'courses' => '\Ageras\Api\PartnerUserCvCourseResource[]',
        'languages' => '\Ageras\Api\PartnerUserCvLanguageResource[]',
        'expertises' => '\Ageras\Api\PartnerUserCvExpertiseResource[]',
        'awards' => '\Ageras\Api\PartnerUserCvAwardResource[]',
        'badges' => '\Ageras\Api\PartnerUserCvBadgeResource[]',
        'social_media' => '\Ageras\Api\PartnerUserCvSocialMediaResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner_id' => 'partner_id',
        'description' => 'description',
        'experiences' => 'experiences',
        'educations' => 'educations',
        'courses' => 'courses',
        'languages' => 'languages',
        'expertises' => 'expertises',
        'awards' => 'awards',
        'badges' => 'badges',
        'social_media' => 'social_media'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner_id' => 'setPartnerId',
        'description' => 'setDescription',
        'experiences' => 'setExperiences',
        'educations' => 'setEducations',
        'courses' => 'setCourses',
        'languages' => 'setLanguages',
        'expertises' => 'setExpertises',
        'awards' => 'setAwards',
        'badges' => 'setBadges',
        'social_media' => 'setSocialMedia'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner_id' => 'getPartnerId',
        'description' => 'getDescription',
        'experiences' => 'getExperiences',
        'educations' => 'getEducations',
        'courses' => 'getCourses',
        'languages' => 'getLanguages',
        'expertises' => 'getExpertises',
        'awards' => 'getAwards',
        'badges' => 'getBadges',
        'social_media' => 'getSocialMedia'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['experiences'] = isset($data['experiences']) ? $data['experiences'] : null;
        $this->container['educations'] = isset($data['educations']) ? $data['educations'] : null;
        $this->container['courses'] = isset($data['courses']) ? $data['courses'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['expertises'] = isset($data['expertises']) ? $data['expertises'] : null;
        $this->container['awards'] = isset($data['awards']) ? $data['awards'] : null;
        $this->container['badges'] = isset($data['badges']) ? $data['badges'] : null;
        $this->container['social_media'] = isset($data['social_media']) ? $data['social_media'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Partner use ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner_id
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     * @param int $partner_id Partner ID.
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets description
     * @return \Ageras\Api\PartnerUserCvDescriptionResource
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param \Ageras\Api\PartnerUserCvDescriptionResource $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets experiences
     * @return \Ageras\Api\PartnerUserCvExperienceResource[]
     */
    public function getExperiences()
    {
        return $this->container['experiences'];
    }

    /**
     * Sets experiences
     * @param \Ageras\Api\PartnerUserCvExperienceResource[] $experiences Partner user experience.
     * @return $this
     */
    public function setExperiences($experiences)
    {
        $this->container['experiences'] = $experiences;

        return $this;
    }

    /**
     * Gets educations
     * @return \Ageras\Api\PartnerUserCvEducationResource[]
     */
    public function getEducations()
    {
        return $this->container['educations'];
    }

    /**
     * Sets educations
     * @param \Ageras\Api\PartnerUserCvEducationResource[] $educations Partner user education.
     * @return $this
     */
    public function setEducations($educations)
    {
        $this->container['educations'] = $educations;

        return $this;
    }

    /**
     * Gets courses
     * @return \Ageras\Api\PartnerUserCvCourseResource[]
     */
    public function getCourses()
    {
        return $this->container['courses'];
    }

    /**
     * Sets courses
     * @param \Ageras\Api\PartnerUserCvCourseResource[] $courses Partner user courses.
     * @return $this
     */
    public function setCourses($courses)
    {
        $this->container['courses'] = $courses;

        return $this;
    }

    /**
     * Gets languages
     * @return \Ageras\Api\PartnerUserCvLanguageResource[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     * @param \Ageras\Api\PartnerUserCvLanguageResource[] $languages Partner user languages.
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets expertises
     * @return \Ageras\Api\PartnerUserCvExpertiseResource[]
     */
    public function getExpertises()
    {
        return $this->container['expertises'];
    }

    /**
     * Sets expertises
     * @param \Ageras\Api\PartnerUserCvExpertiseResource[] $expertises Partner user expertises.
     * @return $this
     */
    public function setExpertises($expertises)
    {
        $this->container['expertises'] = $expertises;

        return $this;
    }

    /**
     * Gets awards
     * @return \Ageras\Api\PartnerUserCvAwardResource[]
     */
    public function getAwards()
    {
        return $this->container['awards'];
    }

    /**
     * Sets awards
     * @param \Ageras\Api\PartnerUserCvAwardResource[] $awards Partner user expertises.
     * @return $this
     */
    public function setAwards($awards)
    {
        $this->container['awards'] = $awards;

        return $this;
    }

    /**
     * Gets badges
     * @return \Ageras\Api\PartnerUserCvBadgeResource[]
     */
    public function getBadges()
    {
        return $this->container['badges'];
    }

    /**
     * Sets badges
     * @param \Ageras\Api\PartnerUserCvBadgeResource[] $badges Partner user personal badges.
     * @return $this
     */
    public function setBadges($badges)
    {
        $this->container['badges'] = $badges;

        return $this;
    }

    /**
     * Gets social_media
     * @return \Ageras\Api\PartnerUserCvSocialMediaResource
     */
    public function getSocialMedia()
    {
        return $this->container['social_media'];
    }

    /**
     * Sets social_media
     * @param \Ageras\Api\PartnerUserCvSocialMediaResource $social_media
     * @return $this
     */
    public function setSocialMedia($social_media)
    {
        $this->container['social_media'] = $social_media;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


