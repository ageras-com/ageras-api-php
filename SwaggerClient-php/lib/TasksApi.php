<?php
/**
 * TasksApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\Configuration;
use \Ageras\Api\ObjectSerializer;

/**
 * TasksApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TasksApi
{
    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return TasksApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation tasksCreate
     *
     * Create a new task.
     *
     * @param \Ageras\Api\TaskResource $task_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskResource
     */
    public function tasksCreate($task_resource)
    {
        list($response) = $this->tasksCreateWithHttpInfo($task_resource);
        return $response;
    }

    /**
     * Operation tasksCreateWithHttpInfo
     *
     * Create a new task.
     *
     * @param \Ageras\Api\TaskResource $task_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksCreateWithHttpInfo($task_resource)
    {
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($task_resource)) {
            $_tempBody = $task_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResource',
                '/tasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksDelete
     *
     * Delete a given task by its task_id.
     *
     * @param string $task_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function tasksDelete($task_id )
    {
        list($response) = $this->tasksDeleteWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation tasksDeleteWithHttpInfo
     *
     * Delete a given task by its task_id.
     *
     * @param string $task_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksDeleteWithHttpInfo($task_id )
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tasks/{task_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation tasksGet
     *
     * Get a given task by its given task_id.
     *
     * @param string $task_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskResource
     */
    public function tasksGet($task_id )
    {
        list($response) = $this->tasksGetWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation tasksGetWithHttpInfo
     *
     * Get a given task by its given task_id.
     *
     * @param string $task_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksGetWithHttpInfo($task_id )
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResource',
                '/tasks/{task_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksIndex
     *
     * List tasks by employee, asseigned_employee, etc.
     *
     * @param $criteria = [
     *    'task_id' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'completed_by_employee_id' => string,
     *    'assigned_employee_id' => string,
     *    'partner_id' => string,
     *    'lead_id' => string,
     *    'status' => string,
     *    'limit' => int,
     *    'include_done' => bool,
     *    'process' => string,
     *    'due_before' => string,
     *    'sort' => string,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskResult
     */
    public function tasksIndex($criteria = [])
    {
        list($response) = $this->tasksIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation tasksIndexWithHttpInfo
     *
     * List tasks by employee, asseigned_employee, etc.
     *
     * @param $criteria = [
     *    'task_id' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'completed_by_employee_id' => string,
     *    'assigned_employee_id' => string,
     *    'partner_id' => string,
     *    'lead_id' => string,
     *    'status' => string,
     *    'limit' => int,
     *    'include_done' => bool,
     *    'process' => string,
     *    'due_before' => string,
     *    'sort' => string,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['task_id'])) {
            $queryParams['task_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['task_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['completed_by_employee_id'])) {
            $queryParams['completed_by_employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['completed_by_employee_id']);
        }
        // query params
        if (isset($criteria['assigned_employee_id'])) {
            $queryParams['assigned_employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['assigned_employee_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['include_done'])) {
            $queryParams['include_done'] = $this->apiClient->getSerializer()->toQueryValue($criteria['include_done']);
        }
        // query params
        if (isset($criteria['process'])) {
            $queryParams['process'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process']);
        }
        // query params
        if (isset($criteria['due_before'])) {
            $queryParams['due_before'] = $this->apiClient->getSerializer()->toQueryValue($criteria['due_before']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResult',
                '/tasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksPrioritiesGet
     *
     * Get a priority from a given id.
     *
     * @param string $priority_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskPriorityResource
     */
    public function tasksPrioritiesGet($priority_id )
    {
        list($response) = $this->tasksPrioritiesGetWithHttpInfo($priority_id);
        return $response;
    }

    /**
     * Operation tasksPrioritiesGetWithHttpInfo
     *
     * Get a priority from a given id.
     *
     * @param string $priority_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskPriorityResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksPrioritiesGetWithHttpInfo($priority_id )
    {
        // parse inputs
        $resourcePath = "/tasks/priorities/{priority_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($priority_id !== null) {
            $resourcePath = str_replace(
                "{" . "priority_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($priority_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskPriorityResource',
                '/tasks/priorities/{priority_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskPriorityResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskPriorityResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksPrioritiesGet2
     *
     * Get a priority from a given id.
     *
     * @param string $task_id 
     * @param string $priority_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskPriorityResource
     */
    public function tasksPrioritiesGet2($task_id,  $priority_id )
    {
        list($response) = $this->tasksPrioritiesGet2WithHttpInfo($task_id, $priority_id);
        return $response;
    }

    /**
     * Operation tasksPrioritiesGet2WithHttpInfo
     *
     * Get a priority from a given id.
     *
     * @param string $task_id 
     * @param string $priority_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskPriorityResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksPrioritiesGet2WithHttpInfo($task_id,  $priority_id )
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}/priorities/{priority_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($priority_id !== null) {
            $resourcePath = str_replace(
                "{" . "priority_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($priority_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskPriorityResource',
                '/tasks/{task_id}/priorities/{priority_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskPriorityResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskPriorityResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksPrioritiesIndex
     *
     * List priorities.
     *
     * @param $criteria = [
     *    'priority_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskPriorityResult
     */
    public function tasksPrioritiesIndex($criteria = [])
    {
        list($response) = $this->tasksPrioritiesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation tasksPrioritiesIndexWithHttpInfo
     *
     * List priorities.
     *
     * @param $criteria = [
     *    'priority_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskPriorityResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksPrioritiesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/tasks/priorities";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['priority_id'])) {
            $queryParams['priority_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['priority_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskPriorityResult',
                '/tasks/priorities'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskPriorityResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskPriorityResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksStatusesGet
     *
     * Get a status from a status_id.
     *
     * @param string $status_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskStatusResource
     */
    public function tasksStatusesGet($status_id )
    {
        list($response) = $this->tasksStatusesGetWithHttpInfo($status_id);
        return $response;
    }

    /**
     * Operation tasksStatusesGetWithHttpInfo
     *
     * Get a status from a status_id.
     *
     * @param string $status_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskStatusResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksStatusesGetWithHttpInfo($status_id )
    {
        // parse inputs
        $resourcePath = "/tasks/statuses/{status_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "status_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskStatusResource',
                '/tasks/statuses/{status_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskStatusResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskStatusResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksStatusesGet2
     *
     * Get a status from a status_id.
     *
     * @param string $task_id 
     * @param string $status_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskStatusResource
     */
    public function tasksStatusesGet2($task_id,  $status_id )
    {
        list($response) = $this->tasksStatusesGet2WithHttpInfo($task_id, $status_id);
        return $response;
    }

    /**
     * Operation tasksStatusesGet2WithHttpInfo
     *
     * Get a status from a status_id.
     *
     * @param string $task_id 
     * @param string $status_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskStatusResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksStatusesGet2WithHttpInfo($task_id,  $status_id )
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}/statuses/{status_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "status_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskStatusResource',
                '/tasks/{task_id}/statuses/{status_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskStatusResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskStatusResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksStatusesIndex
     *
     * List statuses.
     *
     * @param $criteria = [
     *    'status_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskStatusResult
     */
    public function tasksStatusesIndex($criteria = [])
    {
        list($response) = $this->tasksStatusesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation tasksStatusesIndexWithHttpInfo
     *
     * List statuses.
     *
     * @param $criteria = [
     *    'status_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskStatusResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksStatusesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/tasks/statuses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['status_id'])) {
            $queryParams['status_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskStatusResult',
                '/tasks/statuses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskStatusResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskStatusResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesCreate
     *
     * create a new taskable for a given task.
     *
     * @param string $task_id 
     * @param \Ageras\Api\TaskableResource $taskable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskableResource
     */
    public function tasksTaskablesCreate($task_id , $taskable_resource)
    {
        list($response) = $this->tasksTaskablesCreateWithHttpInfo($task_id, $taskable_resource);
        return $response;
    }

    /**
     * Operation tasksTaskablesCreateWithHttpInfo
     *
     * create a new taskable for a given task.
     *
     * @param string $task_id 
     * @param \Ageras\Api\TaskableResource $taskable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksTaskablesCreateWithHttpInfo($task_id , $taskable_resource)
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($taskable_resource)) {
            $_tempBody = $taskable_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskableResource',
                '/tasks/{task_id}/taskables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesDelete
     *
     * delete a taskable and remove it from the given task.
     *
     * @param string $task_id 
     * @param string $taskable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function tasksTaskablesDelete($task_id,  $taskable_id )
    {
        list($response) = $this->tasksTaskablesDeleteWithHttpInfo($task_id, $taskable_id);
        return $response;
    }

    /**
     * Operation tasksTaskablesDeleteWithHttpInfo
     *
     * delete a taskable and remove it from the given task.
     *
     * @param string $task_id 
     * @param string $taskable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksTaskablesDeleteWithHttpInfo($task_id,  $taskable_id )
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables/{taskable_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($taskable_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskable_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tasks/{task_id}/taskables/{taskable_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesGet
     *
     * Get a taskable item from a given taskable id.
     *
     * @param string $task_id 
     * @param string $taskable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskableResource
     */
    public function tasksTaskablesGet($task_id,  $taskable_id )
    {
        list($response) = $this->tasksTaskablesGetWithHttpInfo($task_id, $taskable_id);
        return $response;
    }

    /**
     * Operation tasksTaskablesGetWithHttpInfo
     *
     * Get a taskable item from a given taskable id.
     *
     * @param string $task_id 
     * @param string $taskable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksTaskablesGetWithHttpInfo($task_id,  $taskable_id )
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables/{taskable_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($taskable_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskable_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskableResource',
                '/tasks/{task_id}/taskables/{taskable_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesIndex
     *
     * List the taskables for a given task.
     *
     * @param string $task_id 
     * @param $criteria = [
     *    'taskable_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskableResult
     */
    public function tasksTaskablesIndex($task_id , $criteria = [])
    {
        list($response) = $this->tasksTaskablesIndexWithHttpInfo($task_id, $criteria);
        return $response;
    }

    /**
     * Operation tasksTaskablesIndexWithHttpInfo
     *
     * List the taskables for a given task.
     *
     * @param string $task_id 
     * @param $criteria = [
     *    'taskable_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskableResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksTaskablesIndexWithHttpInfo($task_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['taskable_id'])) {
            $queryParams['taskable_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['taskable_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskableResult',
                '/tasks/{task_id}/taskables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskableResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskableResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksUpdate
     *
     * Update a given task by its task_id.
     *
     * @param string $task_id 
     * @param \Ageras\Api\TaskResource $task_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\TaskResource
     */
    public function tasksUpdate($task_id , $task_resource)
    {
        list($response) = $this->tasksUpdateWithHttpInfo($task_id, $task_resource);
        return $response;
    }

    /**
     * Operation tasksUpdateWithHttpInfo
     *
     * Update a given task by its task_id.
     *
     * @param string $task_id 
     * @param \Ageras\Api\TaskResource $task_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\TaskResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksUpdateWithHttpInfo($task_id , $task_resource)
    {
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($task_resource)) {
            $_tempBody = $task_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResource',
                '/tasks/{task_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
