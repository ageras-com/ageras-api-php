<?php
/**
 * PartnersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * PartnersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PartnersApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ageras.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PartnersApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation partnersAggregationsIndex
     *
     * List facets and aggregations for the Partner Search.
     *
     * @param string $partner_id Partner id of the partners to filter by. (optional)
     * @param string $state States for the partners. (optional)
     * @param bool $is_enabled  (optional, default to false)
     * @param string $employee_id Employee id of the partners to filter by. (optional)
     * @param string $geo_code Geographic Location Code. (optional)
     * @param string $satisfaction Partner Satisfaction Ratio. (optional)
     * @param string $punches_use_speed Punches use speed. (optional)
     * @param string $sort Sort Partner&#39;s by a given property. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersAggregationsIndex($partner_id = null, $state = null, $is_enabled = null, $employee_id = null, $geo_code = null, $satisfaction = null, $punches_use_speed = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersAggregationsIndexWithHttpInfo($partner_id, $state, $is_enabled, $employee_id, $geo_code, $satisfaction, $punches_use_speed, $sort, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersAggregationsIndexWithHttpInfo
     *
     * List facets and aggregations for the Partner Search.
     *
     * @param string $partner_id Partner id of the partners to filter by. (optional)
     * @param string $state States for the partners. (optional)
     * @param bool $is_enabled  (optional, default to false)
     * @param string $employee_id Employee id of the partners to filter by. (optional)
     * @param string $geo_code Geographic Location Code. (optional)
     * @param string $satisfaction Partner Satisfaction Ratio. (optional)
     * @param string $punches_use_speed Punches use speed. (optional)
     * @param string $sort Sort Partner&#39;s by a given property. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersAggregationsIndexWithHttpInfo($partner_id = null, $state = null, $is_enabled = null, $employee_id = null, $geo_code = null, $satisfaction = null, $punches_use_speed = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/partners/aggregations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['is_enabled'] = $this->apiClient->getSerializer()->toQueryValue($is_enabled);
        }
        // query params
        if ($employee_id !== null) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($employee_id);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($satisfaction !== null) {
            $queryParams['satisfaction'] = $this->apiClient->getSerializer()->toQueryValue($satisfaction);
        }
        // query params
        if ($punches_use_speed !== null) {
            $queryParams['punches_use_speed'] = $this->apiClient->getSerializer()->toQueryValue($punches_use_speed);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerResult',
                '/partners/aggregations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsCreate
     *
     * Attach certification to partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\CertificationResource $certification_resource  (required)
     * @return \Swagger\Client\Model\CertificationResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsCreate($partner_id, $certification_resource)
    {
        list($response) = $this->partnersCertificationsCreateWithHttpInfo($partner_id, $certification_resource);
        return $response;
    }

    /**
     * Operation partnersCertificationsCreateWithHttpInfo
     *
     * Attach certification to partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\CertificationResource $certification_resource  (required)
     * @return Array of \Swagger\Client\Model\CertificationResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsCreateWithHttpInfo($partner_id, $certification_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersCertificationsCreate');
        }
        // verify the required parameter 'certification_resource' is set
        if ($certification_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $certification_resource when calling partnersCertificationsCreate');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($certification_resource)) {
            $_tempBody = $certification_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CertificationResource',
                '/partners/{partner_id}/certifications'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CertificationResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CertificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsDelete
     *
     * Detach certification from partner.
     *
     * @param string $partner_id  (required)
     * @param string $id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsDelete($partner_id, $id)
    {
        list($response) = $this->partnersCertificationsDeleteWithHttpInfo($partner_id, $id);
        return $response;
    }

    /**
     * Operation partnersCertificationsDeleteWithHttpInfo
     *
     * Detach certification from partner.
     *
     * @param string $partner_id  (required)
     * @param string $id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsDeleteWithHttpInfo($partner_id, $id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersCertificationsDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling partnersCertificationsDelete');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/certifications/{id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsGet
     *
     * Get Partner certification.
     *
     * @param string $partner_id  (required)
     * @param string $certification_id  (required)
     * @return \Swagger\Client\Model\CertificationResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsGet($partner_id, $certification_id)
    {
        list($response) = $this->partnersCertificationsGetWithHttpInfo($partner_id, $certification_id);
        return $response;
    }

    /**
     * Operation partnersCertificationsGetWithHttpInfo
     *
     * Get Partner certification.
     *
     * @param string $partner_id  (required)
     * @param string $certification_id  (required)
     * @return Array of \Swagger\Client\Model\CertificationResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsGetWithHttpInfo($partner_id, $certification_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersCertificationsGet');
        }
        // verify the required parameter 'certification_id' is set
        if ($certification_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $certification_id when calling partnersCertificationsGet');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications/{certification_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($certification_id !== null) {
            $resourcePath = str_replace(
                "{" . "certification_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($certification_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CertificationResource',
                '/partners/{partner_id}/certifications/{certification_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CertificationResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CertificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsIndex
     *
     * Get partner certifications.
     *
     * @param string $partner_id  (required)
     * @param string $types Partner type enum. @var array (optional)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\CertificationResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsIndex($partner_id, $types = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersCertificationsIndexWithHttpInfo($partner_id, $types, $geo_code, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersCertificationsIndexWithHttpInfo
     *
     * Get partner certifications.
     *
     * @param string $partner_id  (required)
     * @param string $types Partner type enum. @var array (optional)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\CertificationResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCertificationsIndexWithHttpInfo($partner_id, $types = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersCertificationsIndex');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CertificationResult',
                '/partners/{partner_id}/certifications'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CertificationResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CertificationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContentsDelete
     *
     * Delete content for a given partner.
     *
     * @param string $partner_id  (required)
     * @param string $content_key  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersContentsDelete($partner_id, $content_key)
    {
        list($response) = $this->partnersContentsDeleteWithHttpInfo($partner_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersContentsDeleteWithHttpInfo
     *
     * Delete content for a given partner.
     *
     * @param string $partner_id  (required)
     * @param string $content_key  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersContentsDeleteWithHttpInfo($partner_id, $content_key)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersContentsDelete');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersContentsDelete');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/contents/{content_key}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContentsGet
     *
     * Get the content of a given partner.
     *
     * @param string $partner_id  (required)
     * @param string $content_key  (required)
     * @return \Swagger\Client\Model\PartnerContentResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersContentsGet($partner_id, $content_key)
    {
        list($response) = $this->partnersContentsGetWithHttpInfo($partner_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersContentsGetWithHttpInfo
     *
     * Get the content of a given partner.
     *
     * @param string $partner_id  (required)
     * @param string $content_key  (required)
     * @return Array of \Swagger\Client\Model\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersContentsGetWithHttpInfo($partner_id, $content_key)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersContentsGet');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersContentsGet');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerContentResource',
                '/partners/{partner_id}/contents/{content_key}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerContentResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContentsUpdate
     *
     * Update content for a given partner.
     *
     * @param string $partner_id  (required)
     * @param string $content_key  (required)
     * @param \Swagger\Client\Model\PartnerContentResource $partner_content_resource  (required)
     * @return \Swagger\Client\Model\PartnerContentResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersContentsUpdate($partner_id, $content_key, $partner_content_resource)
    {
        list($response) = $this->partnersContentsUpdateWithHttpInfo($partner_id, $content_key, $partner_content_resource);
        return $response;
    }

    /**
     * Operation partnersContentsUpdateWithHttpInfo
     *
     * Update content for a given partner.
     *
     * @param string $partner_id  (required)
     * @param string $content_key  (required)
     * @param \Swagger\Client\Model\PartnerContentResource $partner_content_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersContentsUpdateWithHttpInfo($partner_id, $content_key, $partner_content_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersContentsUpdate');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersContentsUpdate');
        }
        // verify the required parameter 'partner_content_resource' is set
        if ($partner_content_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_content_resource when calling partnersContentsUpdate');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_content_resource)) {
            $_tempBody = $partner_content_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerContentResource',
                '/partners/{partner_id}/contents/{content_key}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerContentResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCouponsIndex
     *
     * List Partner Coupons.
     *
     * @param string $partner_id  (required)
     * @param bool $show_expired Only show expired partner coupons. (optional, default to false)
     * @param bool $show_deactivated Only show deactivated partner coupons. (optional, default to false)
     * @param bool $show_empty Should empty partner coupons be included in the result. (optional, default to false)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerCouponResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCouponsIndex($partner_id, $show_expired = null, $show_deactivated = null, $show_empty = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersCouponsIndexWithHttpInfo($partner_id, $show_expired, $show_deactivated, $show_empty, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersCouponsIndexWithHttpInfo
     *
     * List Partner Coupons.
     *
     * @param string $partner_id  (required)
     * @param bool $show_expired Only show expired partner coupons. (optional, default to false)
     * @param bool $show_deactivated Only show deactivated partner coupons. (optional, default to false)
     * @param bool $show_empty Should empty partner coupons be included in the result. (optional, default to false)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerCouponResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCouponsIndexWithHttpInfo($partner_id, $show_expired = null, $show_deactivated = null, $show_empty = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersCouponsIndex');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/coupons";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($show_expired !== null) {
            $queryParams['show_expired'] = $this->apiClient->getSerializer()->toQueryValue($show_expired);
        }
        // query params
        if ($show_deactivated !== null) {
            $queryParams['show_deactivated'] = $this->apiClient->getSerializer()->toQueryValue($show_deactivated);
        }
        // query params
        if ($show_empty !== null) {
            $queryParams['show_empty'] = $this->apiClient->getSerializer()->toQueryValue($show_empty);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerCouponResult',
                '/partners/{partner_id}/coupons'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerCouponResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerCouponResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCreate
     *
     * Create a Partner.
     *
     * @param \Swagger\Client\Model\PartnerResource $partner_resource  (required)
     * @return \Swagger\Client\Model\PartnerResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCreate($partner_resource)
    {
        list($response) = $this->partnersCreateWithHttpInfo($partner_resource);
        return $response;
    }

    /**
     * Operation partnersCreateWithHttpInfo
     *
     * Create a Partner.
     *
     * @param \Swagger\Client\Model\PartnerResource $partner_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersCreateWithHttpInfo($partner_resource)
    {
        // verify the required parameter 'partner_resource' is set
        if ($partner_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_resource when calling partnersCreate');
        }
        // parse inputs
        $resourcePath = "/partners";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_resource)) {
            $_tempBody = $partner_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerResource',
                '/partners'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDelete
     *
     * Delete a Partner.
     *
     * @param string $partner_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersDelete($partner_id)
    {
        list($response) = $this->partnersDeleteWithHttpInfo($partner_id);
        return $response;
    }

    /**
     * Operation partnersDeleteWithHttpInfo
     *
     * Delete a Partner.
     *
     * @param string $partner_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersDeleteWithHttpInfo($partner_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersDelete');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersGet
     *
     * Get a Partner from a given partner_id.
     *
     * @param string $partner_id  (required)
     * @return \Swagger\Client\Model\PartnerResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersGet($partner_id)
    {
        list($response) = $this->partnersGetWithHttpInfo($partner_id);
        return $response;
    }

    /**
     * Operation partnersGetWithHttpInfo
     *
     * Get a Partner from a given partner_id.
     *
     * @param string $partner_id  (required)
     * @return Array of \Swagger\Client\Model\PartnerResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersGetWithHttpInfo($partner_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersGet');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerResource',
                '/partners/{partner_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndex
     *
     * List Partners.
     *
     * @param string $partner_id Partner id of the partners to filter by. (optional)
     * @param string $state States for the partners. (optional)
     * @param bool $is_enabled  (optional, default to false)
     * @param string $employee_id Employee id of the partners to filter by. (optional)
     * @param string $geo_code Geographic Location Code. (optional)
     * @param string $satisfaction Partner Satisfaction Ratio. (optional)
     * @param string $punches_use_speed Punches use speed. (optional)
     * @param string $sort Sort Partner&#39;s by a given property. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndex($partner_id = null, $state = null, $is_enabled = null, $employee_id = null, $geo_code = null, $satisfaction = null, $punches_use_speed = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersIndexWithHttpInfo($partner_id, $state, $is_enabled, $employee_id, $geo_code, $satisfaction, $punches_use_speed, $sort, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersIndexWithHttpInfo
     *
     * List Partners.
     *
     * @param string $partner_id Partner id of the partners to filter by. (optional)
     * @param string $state States for the partners. (optional)
     * @param bool $is_enabled  (optional, default to false)
     * @param string $employee_id Employee id of the partners to filter by. (optional)
     * @param string $geo_code Geographic Location Code. (optional)
     * @param string $satisfaction Partner Satisfaction Ratio. (optional)
     * @param string $punches_use_speed Punches use speed. (optional)
     * @param string $sort Sort Partner&#39;s by a given property. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndexWithHttpInfo($partner_id = null, $state = null, $is_enabled = null, $employee_id = null, $geo_code = null, $satisfaction = null, $punches_use_speed = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/partners";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['is_enabled'] = $this->apiClient->getSerializer()->toQueryValue($is_enabled);
        }
        // query params
        if ($employee_id !== null) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($employee_id);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($satisfaction !== null) {
            $queryParams['satisfaction'] = $this->apiClient->getSerializer()->toQueryValue($satisfaction);
        }
        // query params
        if ($punches_use_speed !== null) {
            $queryParams['punches_use_speed'] = $this->apiClient->getSerializer()->toQueryValue($punches_use_speed);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerResult',
                '/partners'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesCreate
     *
     * Attach industry to partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerIndustryResource $partner_industry_resource  (required)
     * @return \Swagger\Client\Model\PartnerIndustryResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesCreate($partner_id, $partner_industry_resource)
    {
        list($response) = $this->partnersIndustriesCreateWithHttpInfo($partner_id, $partner_industry_resource);
        return $response;
    }

    /**
     * Operation partnersIndustriesCreateWithHttpInfo
     *
     * Attach industry to partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerIndustryResource $partner_industry_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerIndustryResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesCreateWithHttpInfo($partner_id, $partner_industry_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersIndustriesCreate');
        }
        // verify the required parameter 'partner_industry_resource' is set
        if ($partner_industry_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_industry_resource when calling partnersIndustriesCreate');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_industry_resource)) {
            $_tempBody = $partner_industry_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerIndustryResource',
                '/partners/{partner_id}/industries'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerIndustryResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerIndustryResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesDelete
     *
     * Detach industry from partner.
     *
     * @param string $partner_id  (required)
     * @param string $industry_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesDelete($partner_id, $industry_id)
    {
        list($response) = $this->partnersIndustriesDeleteWithHttpInfo($partner_id, $industry_id);
        return $response;
    }

    /**
     * Operation partnersIndustriesDeleteWithHttpInfo
     *
     * Detach industry from partner.
     *
     * @param string $partner_id  (required)
     * @param string $industry_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesDeleteWithHttpInfo($partner_id, $industry_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersIndustriesDelete');
        }
        // verify the required parameter 'industry_id' is set
        if ($industry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $industry_id when calling partnersIndustriesDelete');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries/{industry_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($industry_id !== null) {
            $resourcePath = str_replace(
                "{" . "industry_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($industry_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/industries/{industry_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesGet
     *
     * Get a given industry for partner.
     *
     * @param string $partner_id  (required)
     * @param string $industry_id  (required)
     * @return \Swagger\Client\Model\PartnerIndustryResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesGet($partner_id, $industry_id)
    {
        list($response) = $this->partnersIndustriesGetWithHttpInfo($partner_id, $industry_id);
        return $response;
    }

    /**
     * Operation partnersIndustriesGetWithHttpInfo
     *
     * Get a given industry for partner.
     *
     * @param string $partner_id  (required)
     * @param string $industry_id  (required)
     * @return Array of \Swagger\Client\Model\PartnerIndustryResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesGetWithHttpInfo($partner_id, $industry_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersIndustriesGet');
        }
        // verify the required parameter 'industry_id' is set
        if ($industry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $industry_id when calling partnersIndustriesGet');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries/{industry_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($industry_id !== null) {
            $resourcePath = str_replace(
                "{" . "industry_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($industry_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerIndustryResource',
                '/partners/{partner_id}/industries/{industry_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerIndustryResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerIndustryResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesIndex
     *
     * Get partner industries.
     *
     * @param string $partner_id  (required)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerIndustryResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesIndex($partner_id, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersIndustriesIndexWithHttpInfo($partner_id, $geo_code, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersIndustriesIndexWithHttpInfo
     *
     * Get partner industries.
     *
     * @param string $partner_id  (required)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerIndustryResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersIndustriesIndexWithHttpInfo($partner_id, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersIndustriesIndex');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerIndustryResult',
                '/partners/{partner_id}/industries'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerIndustryResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerIndustryResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesCreate
     *
     * Attach type to partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\LeadTypeResource $lead_type_resource  (required)
     * @return \Swagger\Client\Model\PartnerTypesResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesCreate($partner_id, $lead_type_resource)
    {
        list($response) = $this->partnersLeadtypesCreateWithHttpInfo($partner_id, $lead_type_resource);
        return $response;
    }

    /**
     * Operation partnersLeadtypesCreateWithHttpInfo
     *
     * Attach type to partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\LeadTypeResource $lead_type_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerTypesResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesCreateWithHttpInfo($partner_id, $lead_type_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersLeadtypesCreate');
        }
        // verify the required parameter 'lead_type_resource' is set
        if ($lead_type_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_type_resource when calling partnersLeadtypesCreate');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($lead_type_resource)) {
            $_tempBody = $lead_type_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerTypesResource',
                '/partners/{partner_id}/lead_types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerTypesResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesDelete
     *
     * Detach type from partner.
     *
     * @param string $partner_id  (required)
     * @param string $lead_type_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesDelete($partner_id, $lead_type_id)
    {
        list($response) = $this->partnersLeadtypesDeleteWithHttpInfo($partner_id, $lead_type_id);
        return $response;
    }

    /**
     * Operation partnersLeadtypesDeleteWithHttpInfo
     *
     * Detach type from partner.
     *
     * @param string $partner_id  (required)
     * @param string $lead_type_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesDeleteWithHttpInfo($partner_id, $lead_type_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersLeadtypesDelete');
        }
        // verify the required parameter 'lead_type_id' is set
        if ($lead_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_type_id when calling partnersLeadtypesDelete');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types/{lead_type_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_type_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/lead_types/{lead_type_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesGet
     *
     * Retrieve a given lead type.
     *
     * @param string $lead_type_id  (required)
     * @return \Swagger\Client\Model\PartnerTypesResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesGet($lead_type_id)
    {
        list($response) = $this->partnersLeadtypesGetWithHttpInfo($lead_type_id);
        return $response;
    }

    /**
     * Operation partnersLeadtypesGetWithHttpInfo
     *
     * Retrieve a given lead type.
     *
     * @param string $lead_type_id  (required)
     * @return Array of \Swagger\Client\Model\PartnerTypesResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesGetWithHttpInfo($lead_type_id)
    {
        // verify the required parameter 'lead_type_id' is set
        if ($lead_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_type_id when calling partnersLeadtypesGet');
        }
        // parse inputs
        $resourcePath = "/partners/lead_types/{lead_type_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_type_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerTypesResource',
                '/partners/lead_types/{lead_type_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerTypesResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesGet2
     *
     * Retrieve a given lead type.
     *
     * @param string $partner_id  (required)
     * @param string $lead_type_id  (required)
     * @return \Swagger\Client\Model\PartnerTypesResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesGet2($partner_id, $lead_type_id)
    {
        list($response) = $this->partnersLeadtypesGet2WithHttpInfo($partner_id, $lead_type_id);
        return $response;
    }

    /**
     * Operation partnersLeadtypesGet2WithHttpInfo
     *
     * Retrieve a given lead type.
     *
     * @param string $partner_id  (required)
     * @param string $lead_type_id  (required)
     * @return Array of \Swagger\Client\Model\PartnerTypesResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesGet2WithHttpInfo($partner_id, $lead_type_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersLeadtypesGet2');
        }
        // verify the required parameter 'lead_type_id' is set
        if ($lead_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_type_id when calling partnersLeadtypesGet2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types/{lead_type_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_type_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerTypesResource',
                '/partners/{partner_id}/lead_types/{lead_type_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerTypesResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesIndex
     *
     * Get partner types criteria.
     *
     * @param int $partner_id Partner ID. @var int (optional)
     * @param string $types Partner type enum. @var array (optional)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerTypesResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesIndex($partner_id = null, $types = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersLeadtypesIndexWithHttpInfo($partner_id, $types, $geo_code, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersLeadtypesIndexWithHttpInfo
     *
     * Get partner types criteria.
     *
     * @param int $partner_id Partner ID. @var int (optional)
     * @param string $types Partner type enum. @var array (optional)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerTypesResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesIndexWithHttpInfo($partner_id = null, $types = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/partners/lead_types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerTypesResult',
                '/partners/lead_types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerTypesResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerTypesResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesIndex2
     *
     * Get partner types criteria.
     *
     * @param string $partner_id  (required)
     * @param string $types Partner type enum. @var array (optional)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerTypesResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesIndex2($partner_id, $types = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersLeadtypesIndex2WithHttpInfo($partner_id, $types, $geo_code, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersLeadtypesIndex2WithHttpInfo
     *
     * Get partner types criteria.
     *
     * @param string $partner_id  (required)
     * @param string $types Partner type enum. @var array (optional)
     * @param string $geo_code  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerTypesResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersLeadtypesIndex2WithHttpInfo($partner_id, $types = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersLeadtypesIndex2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerTypesResult',
                '/partners/{partner_id}/lead_types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerTypesResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerTypesResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesCreate
     *
     * Create Partner notes.
     *
     * @param \Swagger\Client\Model\PartnerNoteResource $partner_note_resource  (required)
     * @return \Swagger\Client\Model\PartnerNoteResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesCreate($partner_note_resource)
    {
        list($response) = $this->partnersNotesCreateWithHttpInfo($partner_note_resource);
        return $response;
    }

    /**
     * Operation partnersNotesCreateWithHttpInfo
     *
     * Create Partner notes.
     *
     * @param \Swagger\Client\Model\PartnerNoteResource $partner_note_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesCreateWithHttpInfo($partner_note_resource)
    {
        // verify the required parameter 'partner_note_resource' is set
        if ($partner_note_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_note_resource when calling partnersNotesCreate');
        }
        // parse inputs
        $resourcePath = "/partners/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_note_resource)) {
            $_tempBody = $partner_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerNoteResource',
                '/partners/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesCreate2
     *
     * Create Partner notes.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerNoteResource $partner_note_resource  (required)
     * @return \Swagger\Client\Model\PartnerNoteResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesCreate2($partner_id, $partner_note_resource)
    {
        list($response) = $this->partnersNotesCreate2WithHttpInfo($partner_id, $partner_note_resource);
        return $response;
    }

    /**
     * Operation partnersNotesCreate2WithHttpInfo
     *
     * Create Partner notes.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerNoteResource $partner_note_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesCreate2WithHttpInfo($partner_id, $partner_note_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersNotesCreate2');
        }
        // verify the required parameter 'partner_note_resource' is set
        if ($partner_note_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_note_resource when calling partnersNotesCreate2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_note_resource)) {
            $_tempBody = $partner_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerNoteResource',
                '/partners/{partner_id}/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesGet
     *
     * Retrieve a given partner note by partner id and partner_note_id.
     *
     * @param string $partner_id  (required)
     * @param string $partner_note_id  (required)
     * @return \Swagger\Client\Model\PartnerNoteResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesGet($partner_id, $partner_note_id)
    {
        list($response) = $this->partnersNotesGetWithHttpInfo($partner_id, $partner_note_id);
        return $response;
    }

    /**
     * Operation partnersNotesGetWithHttpInfo
     *
     * Retrieve a given partner note by partner id and partner_note_id.
     *
     * @param string $partner_id  (required)
     * @param string $partner_note_id  (required)
     * @return Array of \Swagger\Client\Model\PartnerNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesGetWithHttpInfo($partner_id, $partner_note_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersNotesGet');
        }
        // verify the required parameter 'partner_note_id' is set
        if ($partner_note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_note_id when calling partnersNotesGet');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/notes/{partner_note_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_note_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerNoteResource',
                '/partners/{partner_id}/notes/{partner_note_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesIndex
     *
     * Retrieve lists of notes.
     *
     * @param int $partner_id  (optional)
     * @param string $types  (optional, default to all)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerNoteResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesIndex($partner_id = null, $types = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersNotesIndexWithHttpInfo($partner_id, $types, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersNotesIndexWithHttpInfo
     *
     * Retrieve lists of notes.
     *
     * @param int $partner_id  (optional)
     * @param string $types  (optional, default to all)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerNoteResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesIndexWithHttpInfo($partner_id = null, $types = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/partners/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerNoteResult',
                '/partners/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerNoteResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesIndex2
     *
     * Retrieve lists of notes.
     *
     * @param string $partner_id  (required)
     * @param string $types  (optional, default to all)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerNoteResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesIndex2($partner_id, $types = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersNotesIndex2WithHttpInfo($partner_id, $types, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersNotesIndex2WithHttpInfo
     *
     * Retrieve lists of notes.
     *
     * @param string $partner_id  (required)
     * @param string $types  (optional, default to all)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerNoteResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersNotesIndex2WithHttpInfo($partner_id, $types = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersNotesIndex2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerNoteResult',
                '/partners/{partner_id}/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerNoteResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsActionsCreate
     *
     * Cancel subscription.
     *
     * @param string $partner_id  (required)
     * @param string $subscription_id  (required)
     * @param \Swagger\Client\Model\PartnerSubscriptionActionResource $partner_subscription_action_resource  (required)
     * @return \Swagger\Client\Model\PartnerSubscriptionActionResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSubscriptionsActionsCreate($partner_id, $subscription_id, $partner_subscription_action_resource)
    {
        list($response) = $this->partnersSubscriptionsActionsCreateWithHttpInfo($partner_id, $subscription_id, $partner_subscription_action_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsActionsCreateWithHttpInfo
     *
     * Cancel subscription.
     *
     * @param string $partner_id  (required)
     * @param string $subscription_id  (required)
     * @param \Swagger\Client\Model\PartnerSubscriptionActionResource $partner_subscription_action_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerSubscriptionActionResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSubscriptionsActionsCreateWithHttpInfo($partner_id, $subscription_id, $partner_subscription_action_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersSubscriptionsActionsCreate');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling partnersSubscriptionsActionsCreate');
        }
        // verify the required parameter 'partner_subscription_action_resource' is set
        if ($partner_subscription_action_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_subscription_action_resource when calling partnersSubscriptionsActionsCreate');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/actions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_subscription_action_resource)) {
            $_tempBody = $partner_subscription_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerSubscriptionActionResource',
                '/partners/{partner_id}/subscriptions/{subscription_id}/actions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerSubscriptionActionResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerSubscriptionActionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsCreate
     *
     * Subscribe a partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerSubscriptionResource $partner_subscription_resource  (required)
     * @return \Swagger\Client\Model\PartnerSubscriptionResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSubscriptionsCreate($partner_id, $partner_subscription_resource)
    {
        list($response) = $this->partnersSubscriptionsCreateWithHttpInfo($partner_id, $partner_subscription_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsCreateWithHttpInfo
     *
     * Subscribe a partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerSubscriptionResource $partner_subscription_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerSubscriptionResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSubscriptionsCreateWithHttpInfo($partner_id, $partner_subscription_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersSubscriptionsCreate');
        }
        // verify the required parameter 'partner_subscription_resource' is set
        if ($partner_subscription_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_subscription_resource when calling partnersSubscriptionsCreate');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_subscription_resource)) {
            $_tempBody = $partner_subscription_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerSubscriptionResource',
                '/partners/{partner_id}/subscriptions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerSubscriptionResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerSubscriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsIndex
     *
     * Get partner's subscriptions.
     *
     * @param string $partner_id  (required)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerSubscriptionResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSubscriptionsIndex($partner_id, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersSubscriptionsIndexWithHttpInfo($partner_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsIndexWithHttpInfo
     *
     * Get partner's subscriptions.
     *
     * @param string $partner_id  (required)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerSubscriptionResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSubscriptionsIndexWithHttpInfo($partner_id, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersSubscriptionsIndex');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerSubscriptionResult',
                '/partners/{partner_id}/subscriptions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerSubscriptionResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerSubscriptionResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSuggestIndex
     *
     * Suggest Partners to search for.
     *
     * @param int $limit Limit the number of suggest resources pr. page. (optional)
     * @param string $geo_code Geo Location Code ( ISO 3166 ). (optional)
     * @param string $query The search query to search by. (optional)
     * @param string $type Type to search for. (optional)
     * @param int $page The page position in the result. (optional)
     * @return \Swagger\Client\Model\PartnerSuggestResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSuggestIndex($limit = null, $geo_code = null, $query = null, $type = null, $page = null)
    {
        list($response) = $this->partnersSuggestIndexWithHttpInfo($limit, $geo_code, $query, $type, $page);
        return $response;
    }

    /**
     * Operation partnersSuggestIndexWithHttpInfo
     *
     * Suggest Partners to search for.
     *
     * @param int $limit Limit the number of suggest resources pr. page. (optional)
     * @param string $geo_code Geo Location Code ( ISO 3166 ). (optional)
     * @param string $query The search query to search by. (optional)
     * @param string $type Type to search for. (optional)
     * @param int $page The page position in the result. (optional)
     * @return Array of \Swagger\Client\Model\PartnerSuggestResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersSuggestIndexWithHttpInfo($limit = null, $geo_code = null, $query = null, $type = null, $page = null)
    {
        // parse inputs
        $resourcePath = "/partners/suggest";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerSuggestResult',
                '/partners/suggest'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerSuggestResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerSuggestResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersTransactionsIndex
     *
     * List Transactions for a given Partner.
     *
     * @param string $partner_id  (required)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerCouponTransactionResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersTransactionsIndex($partner_id, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersTransactionsIndexWithHttpInfo($partner_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersTransactionsIndexWithHttpInfo
     *
     * List Transactions for a given Partner.
     *
     * @param string $partner_id  (required)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerCouponTransactionResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersTransactionsIndexWithHttpInfo($partner_id, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersTransactionsIndex');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/transactions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerCouponTransactionResult',
                '/partners/{partner_id}/transactions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerCouponTransactionResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerCouponTransactionResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUpdate
     *
     * Update a Partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerResource $partner_resource  (required)
     * @return \Swagger\Client\Model\PartnerResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUpdate($partner_id, $partner_resource)
    {
        list($response) = $this->partnersUpdateWithHttpInfo($partner_id, $partner_resource);
        return $response;
    }

    /**
     * Operation partnersUpdateWithHttpInfo
     *
     * Update a Partner.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerResource $partner_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUpdateWithHttpInfo($partner_id, $partner_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUpdate');
        }
        // verify the required parameter 'partner_resource' is set
        if ($partner_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_resource when calling partnersUpdate');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_resource)) {
            $_tempBody = $partner_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerResource',
                '/partners/{partner_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsDelete
     *
     * Delete content for a given partner user.
     *
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsDelete($partner_user_id, $content_key)
    {
        list($response) = $this->partnersUsersContentsDeleteWithHttpInfo($partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsDeleteWithHttpInfo
     *
     * Delete content for a given partner user.
     *
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsDeleteWithHttpInfo($partner_user_id, $content_key)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersContentsDelete');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersUsersContentsDelete');
        }
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/users/{partner_user_id}/contents/{content_key}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsDelete2
     *
     * Delete content for a given partner user.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsDelete2($partner_id, $partner_user_id, $content_key)
    {
        list($response) = $this->partnersUsersContentsDelete2WithHttpInfo($partner_id, $partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsDelete2WithHttpInfo
     *
     * Delete content for a given partner user.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsDelete2WithHttpInfo($partner_id, $partner_user_id, $content_key)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersContentsDelete2');
        }
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersContentsDelete2');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersUsersContentsDelete2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsGet
     *
     * Get the content of a given partner user.
     *
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return \Swagger\Client\Model\PartnerContentResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsGet($partner_user_id, $content_key)
    {
        list($response) = $this->partnersUsersContentsGetWithHttpInfo($partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsGetWithHttpInfo
     *
     * Get the content of a given partner user.
     *
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return Array of \Swagger\Client\Model\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsGetWithHttpInfo($partner_user_id, $content_key)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersContentsGet');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersUsersContentsGet');
        }
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerContentResource',
                '/partners/users/{partner_user_id}/contents/{content_key}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerContentResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsGet2
     *
     * Get the content of a given partner user.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return \Swagger\Client\Model\PartnerContentResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsGet2($partner_id, $partner_user_id, $content_key)
    {
        list($response) = $this->partnersUsersContentsGet2WithHttpInfo($partner_id, $partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsGet2WithHttpInfo
     *
     * Get the content of a given partner user.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @return Array of \Swagger\Client\Model\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsGet2WithHttpInfo($partner_id, $partner_user_id, $content_key)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersContentsGet2');
        }
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersContentsGet2');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersUsersContentsGet2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerContentResource',
                '/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerContentResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsUpdate
     *
     * Update content for a given partner user.
     *
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @param \Swagger\Client\Model\PartnerContentResource $partner_content_resource  (required)
     * @return \Swagger\Client\Model\PartnerContentResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsUpdate($partner_user_id, $content_key, $partner_content_resource)
    {
        list($response) = $this->partnersUsersContentsUpdateWithHttpInfo($partner_user_id, $content_key, $partner_content_resource);
        return $response;
    }

    /**
     * Operation partnersUsersContentsUpdateWithHttpInfo
     *
     * Update content for a given partner user.
     *
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @param \Swagger\Client\Model\PartnerContentResource $partner_content_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsUpdateWithHttpInfo($partner_user_id, $content_key, $partner_content_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersContentsUpdate');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersUsersContentsUpdate');
        }
        // verify the required parameter 'partner_content_resource' is set
        if ($partner_content_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_content_resource when calling partnersUsersContentsUpdate');
        }
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_content_resource)) {
            $_tempBody = $partner_content_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerContentResource',
                '/partners/users/{partner_user_id}/contents/{content_key}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerContentResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsUpdate2
     *
     * Update content for a given partner user.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @param \Swagger\Client\Model\PartnerContentResource $partner_content_resource  (required)
     * @return \Swagger\Client\Model\PartnerContentResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsUpdate2($partner_id, $partner_user_id, $content_key, $partner_content_resource)
    {
        list($response) = $this->partnersUsersContentsUpdate2WithHttpInfo($partner_id, $partner_user_id, $content_key, $partner_content_resource);
        return $response;
    }

    /**
     * Operation partnersUsersContentsUpdate2WithHttpInfo
     *
     * Update content for a given partner user.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param string $content_key  (required)
     * @param \Swagger\Client\Model\PartnerContentResource $partner_content_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersContentsUpdate2WithHttpInfo($partner_id, $partner_user_id, $content_key, $partner_content_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersContentsUpdate2');
        }
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersContentsUpdate2');
        }
        // verify the required parameter 'content_key' is set
        if ($content_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_key when calling partnersUsersContentsUpdate2');
        }
        // verify the required parameter 'partner_content_resource' is set
        if ($partner_content_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_content_resource when calling partnersUsersContentsUpdate2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_content_resource)) {
            $_tempBody = $partner_content_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerContentResource',
                '/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerContentResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersCreate
     *
     * Create a partner user.
     *
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return \Swagger\Client\Model\PartnerUserResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersCreate($partner_user_resource)
    {
        list($response) = $this->partnersUsersCreateWithHttpInfo($partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersCreateWithHttpInfo
     *
     * Create a partner user.
     *
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersCreateWithHttpInfo($partner_user_resource)
    {
        // verify the required parameter 'partner_user_resource' is set
        if ($partner_user_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_resource when calling partnersUsersCreate');
        }
        // parse inputs
        $resourcePath = "/partners/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResource',
                '/partners/users'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersCreate2
     *
     * Create a partner user.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return \Swagger\Client\Model\PartnerUserResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersCreate2($partner_id, $partner_user_resource)
    {
        list($response) = $this->partnersUsersCreate2WithHttpInfo($partner_id, $partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersCreate2WithHttpInfo
     *
     * Create a partner user.
     *
     * @param string $partner_id  (required)
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersCreate2WithHttpInfo($partner_id, $partner_user_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersCreate2');
        }
        // verify the required parameter 'partner_user_resource' is set
        if ($partner_user_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_resource when calling partnersUsersCreate2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResource',
                '/partners/{partner_id}/users'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersDelete
     *
     * Delete partner user from partner.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersDelete($partner_id, $partner_user_id)
    {
        list($response) = $this->partnersUsersDeleteWithHttpInfo($partner_id, $partner_user_id);
        return $response;
    }

    /**
     * Operation partnersUsersDeleteWithHttpInfo
     *
     * Delete partner user from partner.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersDeleteWithHttpInfo($partner_id, $partner_user_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersDelete');
        }
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersDelete');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/users/{partner_user_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersGet
     *
     * Get a Partner User by a given partner_user_id.
     *
     * @param string $partner_user_id  (required)
     * @return \Swagger\Client\Model\PartnerUserResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersGet($partner_user_id)
    {
        list($response) = $this->partnersUsersGetWithHttpInfo($partner_user_id);
        return $response;
    }

    /**
     * Operation partnersUsersGetWithHttpInfo
     *
     * Get a Partner User by a given partner_user_id.
     *
     * @param string $partner_user_id  (required)
     * @return Array of \Swagger\Client\Model\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersGetWithHttpInfo($partner_user_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersGet');
        }
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResource',
                '/partners/users/{partner_user_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersGet2
     *
     * Get a Partner User by a given partner_user_id.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @return \Swagger\Client\Model\PartnerUserResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersGet2($partner_id, $partner_user_id)
    {
        list($response) = $this->partnersUsersGet2WithHttpInfo($partner_id, $partner_user_id);
        return $response;
    }

    /**
     * Operation partnersUsersGet2WithHttpInfo
     *
     * Get a Partner User by a given partner_user_id.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @return Array of \Swagger\Client\Model\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersGet2WithHttpInfo($partner_id, $partner_user_id)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersGet2');
        }
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersGet2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResource',
                '/partners/{partner_id}/users/{partner_user_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersIndex
     *
     * List partner users.
     *
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $partner_id Partner id for the partner users to filter by. (optional)
     * @param string $sort  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerUserResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersIndex($partner_user_id = null, $partner_id = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersUsersIndexWithHttpInfo($partner_user_id, $partner_id, $sort, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersUsersIndexWithHttpInfo
     *
     * List partner users.
     *
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $partner_id Partner id for the partner users to filter by. (optional)
     * @param string $sort  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerUserResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersIndexWithHttpInfo($partner_user_id = null, $partner_id = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/partners/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResult',
                '/partners/users'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersIndex2
     *
     * List partner users.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $sort  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Swagger\Client\Model\PartnerUserResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersIndex2($partner_id, $partner_user_id = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->partnersUsersIndex2WithHttpInfo($partner_id, $partner_user_id, $sort, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation partnersUsersIndex2WithHttpInfo
     *
     * List partner users.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $sort  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Swagger\Client\Model\PartnerUserResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersIndex2WithHttpInfo($partner_id, $partner_user_id = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersIndex2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResult',
                '/partners/{partner_id}/users'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersUpdate
     *
     * Update partner user profile.
     *
     * @param string $partner_user_id  (required)
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return \Swagger\Client\Model\PartnerUserResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersUpdate($partner_user_id, $partner_user_resource)
    {
        list($response) = $this->partnersUsersUpdateWithHttpInfo($partner_user_id, $partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersUpdateWithHttpInfo
     *
     * Update partner user profile.
     *
     * @param string $partner_user_id  (required)
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersUpdateWithHttpInfo($partner_user_id, $partner_user_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersUpdate');
        }
        // verify the required parameter 'partner_user_resource' is set
        if ($partner_user_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_resource when calling partnersUsersUpdate');
        }
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResource',
                '/partners/users/{partner_user_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersUpdate2
     *
     * Update partner user profile.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return \Swagger\Client\Model\PartnerUserResource
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersUpdate2($partner_id, $partner_user_id, $partner_user_resource)
    {
        list($response) = $this->partnersUsersUpdate2WithHttpInfo($partner_id, $partner_user_id, $partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersUpdate2WithHttpInfo
     *
     * Update partner user profile.
     *
     * @param string $partner_id  (required)
     * @param string $partner_user_id  (required)
     * @param \Swagger\Client\Model\PartnerUserResource $partner_user_resource  (required)
     * @return Array of \Swagger\Client\Model\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function partnersUsersUpdate2WithHttpInfo($partner_id, $partner_user_id, $partner_user_resource)
    {
        // verify the required parameter 'partner_id' is set
        if ($partner_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_id when calling partnersUsersUpdate2');
        }
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling partnersUsersUpdate2');
        }
        // verify the required parameter 'partner_user_resource' is set
        if ($partner_user_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_resource when calling partnersUsersUpdate2');
        }
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('jwt');
        if (strlen($apiKey) !== 0) {
            $queryParams['jwt'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PartnerUserResource',
                '/partners/{partner_id}/users/{partner_user_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PartnerUserResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
