<?php
/**
 * AuthResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * AuthResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AuthResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AuthResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'token' => 'string',
        'expires_at' => 'string',
        'user_id' => 'string',
        'user_type' => 'string',
        'employee' => '\Ageras\Api\EmployeeResource',
        'partner_user' => '\Ageras\Api\PartnerUserResource',
        'client' => '\Ageras\Api\ClientResource',
        'partner_sign_up' => '\Ageras\Api\PartnerSignUpResource',
        'client_sign_up' => '\Ageras\Api\ClientSignUpResource',
        'email' => 'string',
        'password' => 'string',
        'permissions' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'expires_at' => 'expires_at',
        'user_id' => 'user_id',
        'user_type' => 'user_type',
        'employee' => 'employee',
        'partner_user' => 'partner_user',
        'client' => 'client',
        'partner_sign_up' => 'partner_sign_up',
        'client_sign_up' => 'client_sign_up',
        'email' => 'email',
        'password' => 'password',
        'permissions' => 'permissions'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'expires_at' => 'setExpiresAt',
        'user_id' => 'setUserId',
        'user_type' => 'setUserType',
        'employee' => 'setEmployee',
        'partner_user' => 'setPartnerUser',
        'client' => 'setClient',
        'partner_sign_up' => 'setPartnerSignUp',
        'client_sign_up' => 'setClientSignUp',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'permissions' => 'setPermissions'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'expires_at' => 'getExpiresAt',
        'user_id' => 'getUserId',
        'user_type' => 'getUserType',
        'employee' => 'getEmployee',
        'partner_user' => 'getPartnerUser',
        'client' => 'getClient',
        'partner_sign_up' => 'getPartnerSignUp',
        'client_sign_up' => 'getClientSignUp',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'permissions' => 'getPermissions'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['partner_user'] = isset($data['partner_user']) ? $data['partner_user'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['partner_sign_up'] = isset($data['partner_sign_up']) ? $data['partner_sign_up'] : null;
        $this->container['client_sign_up'] = isset($data['client_sign_up']) ? $data['client_sign_up'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     * @param string $token Token provided the by the Ageras API, used to access.
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets expires_at
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     * @param string $expires_at The date that the token expires.
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id Id for the given user. @deprecated See $employee, $partner_user, $client
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_type
     * @return string
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     * @param string $user_type The type of user that currently is associated to the token.
     * @return $this
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets employee
     * @return \Ageras\Api\EmployeeResource
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     * @param \Ageras\Api\EmployeeResource $employee
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets partner_user
     * @return \Ageras\Api\PartnerUserResource
     */
    public function getPartnerUser()
    {
        return $this->container['partner_user'];
    }

    /**
     * Sets partner_user
     * @param \Ageras\Api\PartnerUserResource $partner_user
     * @return $this
     */
    public function setPartnerUser($partner_user)
    {
        $this->container['partner_user'] = $partner_user;

        return $this;
    }

    /**
     * Gets client
     * @return \Ageras\Api\ClientResource
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     * @param \Ageras\Api\ClientResource $client
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets partner_sign_up
     * @return \Ageras\Api\PartnerSignUpResource
     */
    public function getPartnerSignUp()
    {
        return $this->container['partner_sign_up'];
    }

    /**
     * Sets partner_sign_up
     * @param \Ageras\Api\PartnerSignUpResource $partner_sign_up
     * @return $this
     */
    public function setPartnerSignUp($partner_sign_up)
    {
        $this->container['partner_sign_up'] = $partner_sign_up;

        return $this;
    }

    /**
     * Gets client_sign_up
     * @return \Ageras\Api\ClientSignUpResource
     */
    public function getClientSignUp()
    {
        return $this->container['client_sign_up'];
    }

    /**
     * Sets client_sign_up
     * @param \Ageras\Api\ClientSignUpResource $client_sign_up
     * @return $this
     */
    public function setClientSignUp($client_sign_up)
    {
        $this->container['client_sign_up'] = $client_sign_up;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email for the given user associated with the token.
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password Password used to post when logging in, will always be blank when resource is retrieved from server.
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets permissions
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     * @param string[] $permissions Available permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


