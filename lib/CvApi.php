<?php
/**
 * CvApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\Configuration;
use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\ObjectSerializer;

/**
 * CvApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CvApi
{

    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ageras.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return CvApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cvAwardCreate
     *
     * Create partner user award.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvAwardResource $partner_user_cv_award_resource  (required)
     * @return \Ageras\Api\PartnerUserCvAwardResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvAwardCreate($partner_user_id, $partner_user_cv_award_resource)
    {
        list($response) = $this->cvAwardCreateWithHttpInfo($partner_user_id, $partner_user_cv_award_resource);
        return $response;
    }

    /**
     * Operation cvAwardCreateWithHttpInfo
     *
     * Create partner user award.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvAwardResource $partner_user_cv_award_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvAwardResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvAwardCreateWithHttpInfo($partner_user_id, $partner_user_cv_award_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvAwardCreate');
        }
        // verify the required parameter 'partner_user_cv_award_resource' is set
        if ($partner_user_cv_award_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_award_resource when calling cvAwardCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/award";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_award_resource)) {
            $_tempBody = $partner_user_cv_award_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvAwardResource',
                '/cv/{partner_user_id}/award'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvAwardResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvAwardResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvAwardDelete
     *
     * Delete partner user award.
     *
     * @param string $partner_user_id  (required)
     * @param string $award_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvAwardDelete($partner_user_id, $award_id)
    {
        list($response) = $this->cvAwardDeleteWithHttpInfo($partner_user_id, $award_id);
        return $response;
    }

    /**
     * Operation cvAwardDeleteWithHttpInfo
     *
     * Delete partner user award.
     *
     * @param string $partner_user_id  (required)
     * @param string $award_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvAwardDeleteWithHttpInfo($partner_user_id, $award_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvAwardDelete');
        }
        // verify the required parameter 'award_id' is set
        if ($award_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $award_id when calling cvAwardDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/award/{award_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($award_id !== null) {
            $resourcePath = str_replace(
                "{" . "award_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($award_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/award/{award_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvAwardUpdate
     *
     * Update partner user award.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvAwardResource $partner_user_cv_award_resource  (required)
     * @return \Ageras\Api\PartnerUserCvAwardResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvAwardUpdate($partner_user_id, $partner_user_cv_award_resource)
    {
        list($response) = $this->cvAwardUpdateWithHttpInfo($partner_user_id, $partner_user_cv_award_resource);
        return $response;
    }

    /**
     * Operation cvAwardUpdateWithHttpInfo
     *
     * Update partner user award.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvAwardResource $partner_user_cv_award_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvAwardResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvAwardUpdateWithHttpInfo($partner_user_id, $partner_user_cv_award_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvAwardUpdate');
        }
        // verify the required parameter 'partner_user_cv_award_resource' is set
        if ($partner_user_cv_award_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_award_resource when calling cvAwardUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/award";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_award_resource)) {
            $_tempBody = $partner_user_cv_award_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvAwardResource',
                '/cv/{partner_user_id}/award'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvAwardResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvAwardResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvBadgeCreate
     *
     * Create partner user badge.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvBadgeResource $partner_user_cv_badge_resource  (required)
     * @return \Ageras\Api\CertificationResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvBadgeCreate($partner_user_id, $partner_user_cv_badge_resource)
    {
        list($response) = $this->cvBadgeCreateWithHttpInfo($partner_user_id, $partner_user_cv_badge_resource);
        return $response;
    }

    /**
     * Operation cvBadgeCreateWithHttpInfo
     *
     * Create partner user badge.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvBadgeResource $partner_user_cv_badge_resource  (required)
     * @return Array of \Ageras\Api\CertificationResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvBadgeCreateWithHttpInfo($partner_user_id, $partner_user_cv_badge_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvBadgeCreate');
        }
        // verify the required parameter 'partner_user_cv_badge_resource' is set
        if ($partner_user_cv_badge_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_badge_resource when calling cvBadgeCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/badge";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_badge_resource)) {
            $_tempBody = $partner_user_cv_badge_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\CertificationResource',
                '/cv/{partner_user_id}/badge'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\CertificationResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\CertificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvBadgeDelete
     *
     * Delete partner user badge.
     *
     * @param string $partner_user_id  (required)
     * @param string $badge_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvBadgeDelete($partner_user_id, $badge_id)
    {
        list($response) = $this->cvBadgeDeleteWithHttpInfo($partner_user_id, $badge_id);
        return $response;
    }

    /**
     * Operation cvBadgeDeleteWithHttpInfo
     *
     * Delete partner user badge.
     *
     * @param string $partner_user_id  (required)
     * @param string $badge_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvBadgeDeleteWithHttpInfo($partner_user_id, $badge_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvBadgeDelete');
        }
        // verify the required parameter 'badge_id' is set
        if ($badge_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $badge_id when calling cvBadgeDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/badge/{badge_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($badge_id !== null) {
            $resourcePath = str_replace(
                "{" . "badge_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($badge_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/badge/{badge_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvCourseCreate
     *
     * Create partner user course.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvCourseResource $partner_user_cv_course_resource  (required)
     * @return \Ageras\Api\PartnerUserCvCourseResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvCourseCreate($partner_user_id, $partner_user_cv_course_resource)
    {
        list($response) = $this->cvCourseCreateWithHttpInfo($partner_user_id, $partner_user_cv_course_resource);
        return $response;
    }

    /**
     * Operation cvCourseCreateWithHttpInfo
     *
     * Create partner user course.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvCourseResource $partner_user_cv_course_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvCourseResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvCourseCreateWithHttpInfo($partner_user_id, $partner_user_cv_course_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvCourseCreate');
        }
        // verify the required parameter 'partner_user_cv_course_resource' is set
        if ($partner_user_cv_course_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_course_resource when calling cvCourseCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/course";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_course_resource)) {
            $_tempBody = $partner_user_cv_course_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvCourseResource',
                '/cv/{partner_user_id}/course'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvCourseResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvCourseResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvCourseDelete
     *
     * Delete partner user course.
     *
     * @param string $partner_user_id  (required)
     * @param string $course_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvCourseDelete($partner_user_id, $course_id)
    {
        list($response) = $this->cvCourseDeleteWithHttpInfo($partner_user_id, $course_id);
        return $response;
    }

    /**
     * Operation cvCourseDeleteWithHttpInfo
     *
     * Delete partner user course.
     *
     * @param string $partner_user_id  (required)
     * @param string $course_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvCourseDeleteWithHttpInfo($partner_user_id, $course_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvCourseDelete');
        }
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling cvCourseDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/course/{course_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "course_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/course/{course_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvCourseUpdate
     *
     * Update partner user course.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvCourseResource $partner_user_cv_course_resource  (required)
     * @return \Ageras\Api\PartnerUserCvCourseResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvCourseUpdate($partner_user_id, $partner_user_cv_course_resource)
    {
        list($response) = $this->cvCourseUpdateWithHttpInfo($partner_user_id, $partner_user_cv_course_resource);
        return $response;
    }

    /**
     * Operation cvCourseUpdateWithHttpInfo
     *
     * Update partner user course.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvCourseResource $partner_user_cv_course_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvCourseResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvCourseUpdateWithHttpInfo($partner_user_id, $partner_user_cv_course_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvCourseUpdate');
        }
        // verify the required parameter 'partner_user_cv_course_resource' is set
        if ($partner_user_cv_course_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_course_resource when calling cvCourseUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/course";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_course_resource)) {
            $_tempBody = $partner_user_cv_course_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvCourseResource',
                '/cv/{partner_user_id}/course'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvCourseResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvCourseResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvDescriptionCreate
     *
     * Create partner user description.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvDescriptionResource $partner_user_cv_description_resource  (required)
     * @return \Ageras\Api\PartnerUserCvDescriptionResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvDescriptionCreate($partner_user_id, $partner_user_cv_description_resource)
    {
        list($response) = $this->cvDescriptionCreateWithHttpInfo($partner_user_id, $partner_user_cv_description_resource);
        return $response;
    }

    /**
     * Operation cvDescriptionCreateWithHttpInfo
     *
     * Create partner user description.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvDescriptionResource $partner_user_cv_description_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvDescriptionResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvDescriptionCreateWithHttpInfo($partner_user_id, $partner_user_cv_description_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvDescriptionCreate');
        }
        // verify the required parameter 'partner_user_cv_description_resource' is set
        if ($partner_user_cv_description_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_description_resource when calling cvDescriptionCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/description";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_description_resource)) {
            $_tempBody = $partner_user_cv_description_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvDescriptionResource',
                '/cv/{partner_user_id}/description'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvDescriptionResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvDescriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvDescriptionDelete
     *
     * Delete partner user description.
     *
     * @param string $partner_user_id  (required)
     * @param string $description_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvDescriptionDelete($partner_user_id, $description_id)
    {
        list($response) = $this->cvDescriptionDeleteWithHttpInfo($partner_user_id, $description_id);
        return $response;
    }

    /**
     * Operation cvDescriptionDeleteWithHttpInfo
     *
     * Delete partner user description.
     *
     * @param string $partner_user_id  (required)
     * @param string $description_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvDescriptionDeleteWithHttpInfo($partner_user_id, $description_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvDescriptionDelete');
        }
        // verify the required parameter 'description_id' is set
        if ($description_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $description_id when calling cvDescriptionDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/description/{description_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                "{" . "description_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($description_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/description/{description_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvDescriptionUpdate
     *
     * Update partner user description.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvDescriptionResource $partner_user_cv_description_resource  (required)
     * @return \Ageras\Api\PartnerUserCvDescriptionResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvDescriptionUpdate($partner_user_id, $partner_user_cv_description_resource)
    {
        list($response) = $this->cvDescriptionUpdateWithHttpInfo($partner_user_id, $partner_user_cv_description_resource);
        return $response;
    }

    /**
     * Operation cvDescriptionUpdateWithHttpInfo
     *
     * Update partner user description.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvDescriptionResource $partner_user_cv_description_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvDescriptionResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvDescriptionUpdateWithHttpInfo($partner_user_id, $partner_user_cv_description_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvDescriptionUpdate');
        }
        // verify the required parameter 'partner_user_cv_description_resource' is set
        if ($partner_user_cv_description_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_description_resource when calling cvDescriptionUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/description";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_description_resource)) {
            $_tempBody = $partner_user_cv_description_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvDescriptionResource',
                '/cv/{partner_user_id}/description'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvDescriptionResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvDescriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvEducationCreate
     *
     * Create partner user education.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvEducationResource $partner_user_cv_education_resource  (required)
     * @return \Ageras\Api\PartnerUserCvEducationResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvEducationCreate($partner_user_id, $partner_user_cv_education_resource)
    {
        list($response) = $this->cvEducationCreateWithHttpInfo($partner_user_id, $partner_user_cv_education_resource);
        return $response;
    }

    /**
     * Operation cvEducationCreateWithHttpInfo
     *
     * Create partner user education.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvEducationResource $partner_user_cv_education_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvEducationResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvEducationCreateWithHttpInfo($partner_user_id, $partner_user_cv_education_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvEducationCreate');
        }
        // verify the required parameter 'partner_user_cv_education_resource' is set
        if ($partner_user_cv_education_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_education_resource when calling cvEducationCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/education";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_education_resource)) {
            $_tempBody = $partner_user_cv_education_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvEducationResource',
                '/cv/{partner_user_id}/education'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvEducationResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvEducationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvEducationDelete
     *
     * Delete partner user education.
     *
     * @param string $partner_user_id  (required)
     * @param string $education_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvEducationDelete($partner_user_id, $education_id)
    {
        list($response) = $this->cvEducationDeleteWithHttpInfo($partner_user_id, $education_id);
        return $response;
    }

    /**
     * Operation cvEducationDeleteWithHttpInfo
     *
     * Delete partner user education.
     *
     * @param string $partner_user_id  (required)
     * @param string $education_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvEducationDeleteWithHttpInfo($partner_user_id, $education_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvEducationDelete');
        }
        // verify the required parameter 'education_id' is set
        if ($education_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $education_id when calling cvEducationDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/education/{education_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($education_id !== null) {
            $resourcePath = str_replace(
                "{" . "education_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($education_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/education/{education_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvEducationUpdate
     *
     * Update partner user education.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvEducationResource $partner_user_cv_education_resource  (required)
     * @return \Ageras\Api\PartnerUserCvEducationResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvEducationUpdate($partner_user_id, $partner_user_cv_education_resource)
    {
        list($response) = $this->cvEducationUpdateWithHttpInfo($partner_user_id, $partner_user_cv_education_resource);
        return $response;
    }

    /**
     * Operation cvEducationUpdateWithHttpInfo
     *
     * Update partner user education.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvEducationResource $partner_user_cv_education_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvEducationResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvEducationUpdateWithHttpInfo($partner_user_id, $partner_user_cv_education_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvEducationUpdate');
        }
        // verify the required parameter 'partner_user_cv_education_resource' is set
        if ($partner_user_cv_education_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_education_resource when calling cvEducationUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/education";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_education_resource)) {
            $_tempBody = $partner_user_cv_education_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvEducationResource',
                '/cv/{partner_user_id}/education'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvEducationResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvEducationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvExperienceCreate
     *
     * Create partner user experience.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExperienceResource $partner_user_cv_experience_resource  (required)
     * @return \Ageras\Api\PartnerUserCvExperienceResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExperienceCreate($partner_user_id, $partner_user_cv_experience_resource)
    {
        list($response) = $this->cvExperienceCreateWithHttpInfo($partner_user_id, $partner_user_cv_experience_resource);
        return $response;
    }

    /**
     * Operation cvExperienceCreateWithHttpInfo
     *
     * Create partner user experience.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExperienceResource $partner_user_cv_experience_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvExperienceResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExperienceCreateWithHttpInfo($partner_user_id, $partner_user_cv_experience_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvExperienceCreate');
        }
        // verify the required parameter 'partner_user_cv_experience_resource' is set
        if ($partner_user_cv_experience_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_experience_resource when calling cvExperienceCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/experience";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_experience_resource)) {
            $_tempBody = $partner_user_cv_experience_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvExperienceResource',
                '/cv/{partner_user_id}/experience'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvExperienceResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvExperienceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvExperienceDelete
     *
     * Delete partner user experience.
     *
     * @param string $partner_user_id  (required)
     * @param string $experience_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExperienceDelete($partner_user_id, $experience_id)
    {
        list($response) = $this->cvExperienceDeleteWithHttpInfo($partner_user_id, $experience_id);
        return $response;
    }

    /**
     * Operation cvExperienceDeleteWithHttpInfo
     *
     * Delete partner user experience.
     *
     * @param string $partner_user_id  (required)
     * @param string $experience_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExperienceDeleteWithHttpInfo($partner_user_id, $experience_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvExperienceDelete');
        }
        // verify the required parameter 'experience_id' is set
        if ($experience_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $experience_id when calling cvExperienceDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/experience/{experience_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($experience_id !== null) {
            $resourcePath = str_replace(
                "{" . "experience_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($experience_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/experience/{experience_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvExperienceUpdate
     *
     * Update partner user experience.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExperienceResource $partner_user_cv_experience_resource  (required)
     * @return \Ageras\Api\PartnerUserCvExperienceResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExperienceUpdate($partner_user_id, $partner_user_cv_experience_resource)
    {
        list($response) = $this->cvExperienceUpdateWithHttpInfo($partner_user_id, $partner_user_cv_experience_resource);
        return $response;
    }

    /**
     * Operation cvExperienceUpdateWithHttpInfo
     *
     * Update partner user experience.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExperienceResource $partner_user_cv_experience_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvExperienceResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExperienceUpdateWithHttpInfo($partner_user_id, $partner_user_cv_experience_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvExperienceUpdate');
        }
        // verify the required parameter 'partner_user_cv_experience_resource' is set
        if ($partner_user_cv_experience_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_experience_resource when calling cvExperienceUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/experience";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_experience_resource)) {
            $_tempBody = $partner_user_cv_experience_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvExperienceResource',
                '/cv/{partner_user_id}/experience'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvExperienceResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvExperienceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvExpertiseCreate
     *
     * Create partner user expertise.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExpertiseResource $partner_user_cv_expertise_resource  (required)
     * @return \Ageras\Api\PartnerUserCvExpertiseResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExpertiseCreate($partner_user_id, $partner_user_cv_expertise_resource)
    {
        list($response) = $this->cvExpertiseCreateWithHttpInfo($partner_user_id, $partner_user_cv_expertise_resource);
        return $response;
    }

    /**
     * Operation cvExpertiseCreateWithHttpInfo
     *
     * Create partner user expertise.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExpertiseResource $partner_user_cv_expertise_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvExpertiseResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExpertiseCreateWithHttpInfo($partner_user_id, $partner_user_cv_expertise_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvExpertiseCreate');
        }
        // verify the required parameter 'partner_user_cv_expertise_resource' is set
        if ($partner_user_cv_expertise_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_expertise_resource when calling cvExpertiseCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/expertise";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_expertise_resource)) {
            $_tempBody = $partner_user_cv_expertise_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvExpertiseResource',
                '/cv/{partner_user_id}/expertise'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvExpertiseResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvExpertiseResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvExpertiseDelete
     *
     * Delete partner user expertise.
     *
     * @param string $partner_user_id  (required)
     * @param string $expertise_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExpertiseDelete($partner_user_id, $expertise_id)
    {
        list($response) = $this->cvExpertiseDeleteWithHttpInfo($partner_user_id, $expertise_id);
        return $response;
    }

    /**
     * Operation cvExpertiseDeleteWithHttpInfo
     *
     * Delete partner user expertise.
     *
     * @param string $partner_user_id  (required)
     * @param string $expertise_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExpertiseDeleteWithHttpInfo($partner_user_id, $expertise_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvExpertiseDelete');
        }
        // verify the required parameter 'expertise_id' is set
        if ($expertise_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $expertise_id when calling cvExpertiseDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/expertise/{expertise_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($expertise_id !== null) {
            $resourcePath = str_replace(
                "{" . "expertise_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($expertise_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/expertise/{expertise_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvExpertiseUpdate
     *
     * Update partner user expertise.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExpertiseResource $partner_user_cv_expertise_resource  (required)
     * @return \Ageras\Api\PartnerUserCvExpertiseResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExpertiseUpdate($partner_user_id, $partner_user_cv_expertise_resource)
    {
        list($response) = $this->cvExpertiseUpdateWithHttpInfo($partner_user_id, $partner_user_cv_expertise_resource);
        return $response;
    }

    /**
     * Operation cvExpertiseUpdateWithHttpInfo
     *
     * Update partner user expertise.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvExpertiseResource $partner_user_cv_expertise_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvExpertiseResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvExpertiseUpdateWithHttpInfo($partner_user_id, $partner_user_cv_expertise_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvExpertiseUpdate');
        }
        // verify the required parameter 'partner_user_cv_expertise_resource' is set
        if ($partner_user_cv_expertise_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_expertise_resource when calling cvExpertiseUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/expertise";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_expertise_resource)) {
            $_tempBody = $partner_user_cv_expertise_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvExpertiseResource',
                '/cv/{partner_user_id}/expertise'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvExpertiseResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvExpertiseResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvGet
     *
     * Get partner user cv.
     *
     * @param string $partner_user_id  (required)
     * @return \Ageras\Api\PartnerUserCvResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvGet($partner_user_id)
    {
        list($response) = $this->cvGetWithHttpInfo($partner_user_id);
        return $response;
    }

    /**
     * Operation cvGetWithHttpInfo
     *
     * Get partner user cv.
     *
     * @param string $partner_user_id  (required)
     * @return Array of \Ageras\Api\PartnerUserCvResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvGetWithHttpInfo($partner_user_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvGet');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvResource',
                '/cv/{partner_user_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvIndex
     *
     * Index all partner user CV for given partner.
     *
     * @param int $partner_id  (optional)
     * @param int $partner_user_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\PartnerUserCvResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvIndex($partner_id = null, $partner_user_id = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->cvIndexWithHttpInfo($partner_id, $partner_user_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation cvIndexWithHttpInfo
     *
     * Index all partner user CV for given partner.
     *
     * @param int $partner_id  (optional)
     * @param int $partner_user_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\PartnerUserCvResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvIndexWithHttpInfo($partner_id = null, $partner_user_id = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/cv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvResult',
                '/cv'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvLanguageCreate
     *
     * Create partner user language.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvLanguageResource $partner_user_cv_language_resource  (required)
     * @return \Ageras\Api\PartnerUserCvLanguageResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvLanguageCreate($partner_user_id, $partner_user_cv_language_resource)
    {
        list($response) = $this->cvLanguageCreateWithHttpInfo($partner_user_id, $partner_user_cv_language_resource);
        return $response;
    }

    /**
     * Operation cvLanguageCreateWithHttpInfo
     *
     * Create partner user language.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvLanguageResource $partner_user_cv_language_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvLanguageResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvLanguageCreateWithHttpInfo($partner_user_id, $partner_user_cv_language_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvLanguageCreate');
        }
        // verify the required parameter 'partner_user_cv_language_resource' is set
        if ($partner_user_cv_language_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_language_resource when calling cvLanguageCreate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/language";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_language_resource)) {
            $_tempBody = $partner_user_cv_language_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvLanguageResource',
                '/cv/{partner_user_id}/language'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvLanguageResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvLanguageResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvLanguageDelete
     *
     * Delete partner user language.
     *
     * @param string $partner_user_id  (required)
     * @param string $language_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvLanguageDelete($partner_user_id, $language_id)
    {
        list($response) = $this->cvLanguageDeleteWithHttpInfo($partner_user_id, $language_id);
        return $response;
    }

    /**
     * Operation cvLanguageDeleteWithHttpInfo
     *
     * Delete partner user language.
     *
     * @param string $partner_user_id  (required)
     * @param string $language_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvLanguageDeleteWithHttpInfo($partner_user_id, $language_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvLanguageDelete');
        }
        // verify the required parameter 'language_id' is set
        if ($language_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $language_id when calling cvLanguageDelete');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/language/{language_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($language_id !== null) {
            $resourcePath = str_replace(
                "{" . "language_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($language_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/language/{language_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvLanguageUpdate
     *
     * Update partner user language.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvLanguageResource $partner_user_cv_language_resource  (required)
     * @return \Ageras\Api\PartnerUserCvLanguageResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvLanguageUpdate($partner_user_id, $partner_user_cv_language_resource)
    {
        list($response) = $this->cvLanguageUpdateWithHttpInfo($partner_user_id, $partner_user_cv_language_resource);
        return $response;
    }

    /**
     * Operation cvLanguageUpdateWithHttpInfo
     *
     * Update partner user language.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvLanguageResource $partner_user_cv_language_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvLanguageResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvLanguageUpdateWithHttpInfo($partner_user_id, $partner_user_cv_language_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvLanguageUpdate');
        }
        // verify the required parameter 'partner_user_cv_language_resource' is set
        if ($partner_user_cv_language_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_language_resource when calling cvLanguageUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/language";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_language_resource)) {
            $_tempBody = $partner_user_cv_language_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvLanguageResource',
                '/cv/{partner_user_id}/language'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvLanguageResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvLanguageResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cvSocialDelete
     *
     * Delete partner user social media.
     *
     * @param string $partner_user_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvSocialDelete($partner_user_id)
    {
        list($response) = $this->cvSocialDeleteWithHttpInfo($partner_user_id);
        return $response;
    }

    /**
     * Operation cvSocialDeleteWithHttpInfo
     *
     * Delete partner user social media.
     *
     * @param string $partner_user_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvSocialDeleteWithHttpInfo($partner_user_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvSocialDelete');
        }
        // parse inputs
        $resourcePath = "/cv/cv/{partner_user_id}/social";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/cv/{partner_user_id}/social'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvSocialDelete2
     *
     * Delete partner user social media.
     *
     * @param string $partner_user_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvSocialDelete2($partner_user_id)
    {
        list($response) = $this->cvSocialDelete2WithHttpInfo($partner_user_id);
        return $response;
    }

    /**
     * Operation cvSocialDelete2WithHttpInfo
     *
     * Delete partner user social media.
     *
     * @param string $partner_user_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvSocialDelete2WithHttpInfo($partner_user_id)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvSocialDelete2');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/social";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cv/{partner_user_id}/social'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cvSocialUpdate
     *
     * Update partner user social media.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvSocialMediaResource $partner_user_cv_social_media_resource  (required)
     * @return \Ageras\Api\PartnerUserCvSocialMediaResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvSocialUpdate($partner_user_id, $partner_user_cv_social_media_resource)
    {
        list($response) = $this->cvSocialUpdateWithHttpInfo($partner_user_id, $partner_user_cv_social_media_resource);
        return $response;
    }

    /**
     * Operation cvSocialUpdateWithHttpInfo
     *
     * Update partner user social media.
     *
     * @param string $partner_user_id  (required)
     * @param \Ageras\Api\PartnerUserCvSocialMediaResource $partner_user_cv_social_media_resource  (required)
     * @return Array of \Ageras\Api\PartnerUserCvSocialMediaResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function cvSocialUpdateWithHttpInfo($partner_user_id, $partner_user_cv_social_media_resource)
    {
        // verify the required parameter 'partner_user_id' is set
        if ($partner_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_id when calling cvSocialUpdate');
        }
        // verify the required parameter 'partner_user_cv_social_media_resource' is set
        if ($partner_user_cv_social_media_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partner_user_cv_social_media_resource when calling cvSocialUpdate');
        }
        // parse inputs
        $resourcePath = "/cv/{partner_user_id}/social";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partner_user_cv_social_media_resource)) {
            $_tempBody = $partner_user_cv_social_media_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserCvSocialMediaResource',
                '/cv/{partner_user_id}/social'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserCvSocialMediaResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserCvSocialMediaResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
