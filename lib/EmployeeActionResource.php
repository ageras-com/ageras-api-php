<?php
/**
 * EmployeeActionResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * EmployeeActionResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmployeeActionResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeActionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'string',
        'wanted_geo_code' => 'string',
        'mark_as_read_notification_ids' => 'int[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'wanted_geo_code' => 'wanted_geo_code',
        'mark_as_read_notification_ids' => 'mark_as_read_notification_ids'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'wanted_geo_code' => 'setWantedGeoCode',
        'mark_as_read_notification_ids' => 'setMarkAsReadNotificationIds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'wanted_geo_code' => 'getWantedGeoCode',
        'mark_as_read_notification_ids' => 'getMarkAsReadNotificationIds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACTION_UNKNOWN = 'unknown';
    const ACTION_CHANGE_WANTED_GEO_CODE = 'change_wanted_geo_code';
    const ACTION_MARK_NOTIFICATIONS_AS_READ = 'mark_notifications_as_read';
    const WANTED_GEO_CODE_ = '';
    const WANTED_GEO_CODE_DK = 'dk';
    const WANTED_GEO_CODE_NO = 'no';
    const WANTED_GEO_CODE_DE = 'de';
    const WANTED_GEO_CODE_SE = 'se';
    const WANTED_GEO_CODE_UK = 'uk';
    const WANTED_GEO_CODE_NL = 'nl';
    const WANTED_GEO_CODE_US = 'us';
    const WANTED_GEO_CODE_ASCENDING = 'ascending';
    const WANTED_GEO_CODE_DESCENDING = 'descending';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_UNKNOWN,
            self::ACTION_CHANGE_WANTED_GEO_CODE,
            self::ACTION_MARK_NOTIFICATIONS_AS_READ,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getWantedGeoCodeAllowableValues()
    {
        return [
            self::WANTED_GEO_CODE_,
            self::WANTED_GEO_CODE_DK,
            self::WANTED_GEO_CODE_NO,
            self::WANTED_GEO_CODE_DE,
            self::WANTED_GEO_CODE_SE,
            self::WANTED_GEO_CODE_UK,
            self::WANTED_GEO_CODE_NL,
            self::WANTED_GEO_CODE_US,
            self::WANTED_GEO_CODE_ASCENDING,
            self::WANTED_GEO_CODE_DESCENDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : 'unknown';
        $this->container['wanted_geo_code'] = isset($data['wanted_geo_code']) ? $data['wanted_geo_code'] : '';
        $this->container['mark_as_read_notification_ids'] = isset($data['mark_as_read_notification_ids']) ? $data['mark_as_read_notification_ids'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["unknown", "change_wanted_geo_code", "mark_notifications_as_read"];
        if (!in_array($this->container['action'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'action', must be one of 'unknown', 'change_wanted_geo_code', 'mark_notifications_as_read'.";
        }

        $allowed_values = ["", "dk", "no", "de", "se", "uk", "nl", "us", "ascending", "descending"];
        if (!in_array($this->container['wanted_geo_code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'wanted_geo_code', must be one of '', 'dk', 'no', 'de', 'se', 'uk', 'nl', 'us', 'ascending', 'descending'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["unknown", "change_wanted_geo_code", "mark_notifications_as_read"];
        if (!in_array($this->container['action'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["", "dk", "no", "de", "se", "uk", "nl", "us", "ascending", "descending"];
        if (!in_array($this->container['wanted_geo_code'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets action
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     * @param string $action Action identifier.
     * @return $this
     */
    public function setAction($action)
    {
        $allowed_values = array('unknown', 'change_wanted_geo_code', 'mark_notifications_as_read');
        if (!is_null($action) && (!in_array($action, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'action', must be one of 'unknown', 'change_wanted_geo_code', 'mark_notifications_as_read'");
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets wanted_geo_code
     * @return string
     */
    public function getWantedGeoCode()
    {
        return $this->container['wanted_geo_code'];
    }

    /**
     * Sets wanted_geo_code
     * @param string $wanted_geo_code Eanted geo code.
     * @return $this
     */
    public function setWantedGeoCode($wanted_geo_code)
    {
        $allowed_values = array('', 'dk', 'no', 'de', 'se', 'uk', 'nl', 'us', 'ascending', 'descending');
        if (!is_null($wanted_geo_code) && (!in_array($wanted_geo_code, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'wanted_geo_code', must be one of '', 'dk', 'no', 'de', 'se', 'uk', 'nl', 'us', 'ascending', 'descending'");
        }
        $this->container['wanted_geo_code'] = $wanted_geo_code;

        return $this;
    }

    /**
     * Gets mark_as_read_notification_ids
     * @return int[]
     */
    public function getMarkAsReadNotificationIds()
    {
        return $this->container['mark_as_read_notification_ids'];
    }

    /**
     * Sets mark_as_read_notification_ids
     * @param int[] $mark_as_read_notification_ids Notification IDs.
     * @return $this
     */
    public function setMarkAsReadNotificationIds($mark_as_read_notification_ids)
    {
        $this->container['mark_as_read_notification_ids'] = $mark_as_read_notification_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


