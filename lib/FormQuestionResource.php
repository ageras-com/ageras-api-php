<?php
/**
 * FormQuestionResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * FormQuestionResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FormQuestionResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FormQuestionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'geo_code' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'archived_at' => 'string',
        'identifier' => 'string',
        'display_text' => 'string',
        'is_required' => 'string',
        'answer_type' => 'string',
        'possible_answers' => '\Ageras\Api\FormQuestionAnswerResource[]',
        'parent_question_id' => 'int',
        'order' => 'int',
        'placeholder' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'geo_code' => 'geo_code',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'archived_at' => 'archived_at',
        'identifier' => 'identifier',
        'display_text' => 'display_text',
        'is_required' => 'is_required',
        'answer_type' => 'answer_type',
        'possible_answers' => 'possible_answers',
        'parent_question_id' => 'parent_question_id',
        'order' => 'order',
        'placeholder' => 'placeholder'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'geo_code' => 'setGeoCode',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'archived_at' => 'setArchivedAt',
        'identifier' => 'setIdentifier',
        'display_text' => 'setDisplayText',
        'is_required' => 'setIsRequired',
        'answer_type' => 'setAnswerType',
        'possible_answers' => 'setPossibleAnswers',
        'parent_question_id' => 'setParentQuestionId',
        'order' => 'setOrder',
        'placeholder' => 'setPlaceholder'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'geo_code' => 'getGeoCode',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'archived_at' => 'getArchivedAt',
        'identifier' => 'getIdentifier',
        'display_text' => 'getDisplayText',
        'is_required' => 'getIsRequired',
        'answer_type' => 'getAnswerType',
        'possible_answers' => 'getPossibleAnswers',
        'parent_question_id' => 'getParentQuestionId',
        'order' => 'getOrder',
        'placeholder' => 'getPlaceholder'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ANSWER_TYPE_TEXT = 'text';
    const ANSWER_TYPE_INTEGER = 'integer';
    const ANSWER_TYPE_FLOAT = 'float';
    const ANSWER_TYPE_CHECKBOX = 'checkbox';
    const ANSWER_TYPE_SELECT = 'select';
    const ANSWER_TYPE_MULTISELECT = 'multiselect';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAnswerTypeAllowableValues()
    {
        return [
            self::ANSWER_TYPE_TEXT,
            self::ANSWER_TYPE_INTEGER,
            self::ANSWER_TYPE_FLOAT,
            self::ANSWER_TYPE_CHECKBOX,
            self::ANSWER_TYPE_SELECT,
            self::ANSWER_TYPE_MULTISELECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['geo_code'] = isset($data['geo_code']) ? $data['geo_code'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['archived_at'] = isset($data['archived_at']) ? $data['archived_at'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['display_text'] = isset($data['display_text']) ? $data['display_text'] : null;
        $this->container['is_required'] = isset($data['is_required']) ? $data['is_required'] : null;
        $this->container['answer_type'] = isset($data['answer_type']) ? $data['answer_type'] : 'text';
        $this->container['possible_answers'] = isset($data['possible_answers']) ? $data['possible_answers'] : null;
        $this->container['parent_question_id'] = isset($data['parent_question_id']) ? $data['parent_question_id'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['placeholder'] = isset($data['placeholder']) ? $data['placeholder'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["text", "integer", "float", "checkbox", "select", "multiselect"];
        if (!in_array($this->container['answer_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'answer_type', must be one of 'text', 'integer', 'float', 'checkbox', 'select', 'multiselect'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["text", "integer", "float", "checkbox", "select", "multiselect"];
        if (!in_array($this->container['answer_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets geo_code
     * @return string
     */
    public function getGeoCode()
    {
        return $this->container['geo_code'];
    }

    /**
     * Sets geo_code
     * @param string $geo_code
     * @return $this
     */
    public function setGeoCode($geo_code)
    {
        $this->container['geo_code'] = $geo_code;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets archived_at
     * @return string
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     * @param string $archived_at
     * @return $this
     */
    public function setArchivedAt($archived_at)
    {
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets display_text
     * @return string
     */
    public function getDisplayText()
    {
        return $this->container['display_text'];
    }

    /**
     * Sets display_text
     * @param string $display_text
     * @return $this
     */
    public function setDisplayText($display_text)
    {
        $this->container['display_text'] = $display_text;

        return $this;
    }

    /**
     * Gets is_required
     * @return string
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     * @param string $is_required
     * @return $this
     */
    public function setIsRequired($is_required)
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets answer_type
     * @return string
     */
    public function getAnswerType()
    {
        return $this->container['answer_type'];
    }

    /**
     * Sets answer_type
     * @param string $answer_type
     * @return $this
     */
    public function setAnswerType($answer_type)
    {
        $allowed_values = array('text', 'integer', 'float', 'checkbox', 'select', 'multiselect');
        if (!is_null($answer_type) && (!in_array($answer_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'answer_type', must be one of 'text', 'integer', 'float', 'checkbox', 'select', 'multiselect'");
        }
        $this->container['answer_type'] = $answer_type;

        return $this;
    }

    /**
     * Gets possible_answers
     * @return \Ageras\Api\FormQuestionAnswerResource[]
     */
    public function getPossibleAnswers()
    {
        return $this->container['possible_answers'];
    }

    /**
     * Sets possible_answers
     * @param \Ageras\Api\FormQuestionAnswerResource[] $possible_answers
     * @return $this
     */
    public function setPossibleAnswers($possible_answers)
    {
        $this->container['possible_answers'] = $possible_answers;

        return $this;
    }

    /**
     * Gets parent_question_id
     * @return int
     */
    public function getParentQuestionId()
    {
        return $this->container['parent_question_id'];
    }

    /**
     * Sets parent_question_id
     * @param int $parent_question_id
     * @return $this
     */
    public function setParentQuestionId($parent_question_id)
    {
        $this->container['parent_question_id'] = $parent_question_id;

        return $this;
    }

    /**
     * Gets order
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     * @param int $order
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets placeholder
     * @return string
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     * @param string $placeholder
     * @return $this
     */
    public function setPlaceholder($placeholder)
    {
        $this->container['placeholder'] = $placeholder;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


