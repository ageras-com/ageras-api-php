<?php
/**
 * KPICreditsResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * KPICreditsResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class KPICreditsResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'KPICreditsResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'new_sales' => '\Ageras\Api\KPICreditsNewSalesResource',
        'refunded' => '\Ageras\Api\KPICreditsRefundedResource',
        'refills' => '\Ageras\Api\KPICreditsRefillsResource',
        'sold' => '\Ageras\Api\KPICreditsSoldResource',
        'used' => '\Ageras\Api\KPICreditsUsedResource',
        'without_refill' => '\Ageras\Api\KPICreditsWithoutRefillResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'new_sales' => 'new_sales',
        'refunded' => 'refunded',
        'refills' => 'refills',
        'sold' => 'sold',
        'used' => 'used',
        'without_refill' => 'without_refill'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'new_sales' => 'setNewSales',
        'refunded' => 'setRefunded',
        'refills' => 'setRefills',
        'sold' => 'setSold',
        'used' => 'setUsed',
        'without_refill' => 'setWithoutRefill'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'new_sales' => 'getNewSales',
        'refunded' => 'getRefunded',
        'refills' => 'getRefills',
        'sold' => 'getSold',
        'used' => 'getUsed',
        'without_refill' => 'getWithoutRefill'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['new_sales'] = isset($data['new_sales']) ? $data['new_sales'] : null;
        $this->container['refunded'] = isset($data['refunded']) ? $data['refunded'] : null;
        $this->container['refills'] = isset($data['refills']) ? $data['refills'] : null;
        $this->container['sold'] = isset($data['sold']) ? $data['sold'] : null;
        $this->container['used'] = isset($data['used']) ? $data['used'] : null;
        $this->container['without_refill'] = isset($data['without_refill']) ? $data['without_refill'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets new_sales
     * @return \Ageras\Api\KPICreditsNewSalesResource
     */
    public function getNewSales()
    {
        return $this->container['new_sales'];
    }

    /**
     * Sets new_sales
     * @param \Ageras\Api\KPICreditsNewSalesResource $new_sales
     * @return $this
     */
    public function setNewSales($new_sales)
    {
        $this->container['new_sales'] = $new_sales;

        return $this;
    }

    /**
     * Gets refunded
     * @return \Ageras\Api\KPICreditsRefundedResource
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     * @param \Ageras\Api\KPICreditsRefundedResource $refunded
     * @return $this
     */
    public function setRefunded($refunded)
    {
        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets refills
     * @return \Ageras\Api\KPICreditsRefillsResource
     */
    public function getRefills()
    {
        return $this->container['refills'];
    }

    /**
     * Sets refills
     * @param \Ageras\Api\KPICreditsRefillsResource $refills
     * @return $this
     */
    public function setRefills($refills)
    {
        $this->container['refills'] = $refills;

        return $this;
    }

    /**
     * Gets sold
     * @return \Ageras\Api\KPICreditsSoldResource
     */
    public function getSold()
    {
        return $this->container['sold'];
    }

    /**
     * Sets sold
     * @param \Ageras\Api\KPICreditsSoldResource $sold
     * @return $this
     */
    public function setSold($sold)
    {
        $this->container['sold'] = $sold;

        return $this;
    }

    /**
     * Gets used
     * @return \Ageras\Api\KPICreditsUsedResource
     */
    public function getUsed()
    {
        return $this->container['used'];
    }

    /**
     * Sets used
     * @param \Ageras\Api\KPICreditsUsedResource $used
     * @return $this
     */
    public function setUsed($used)
    {
        $this->container['used'] = $used;

        return $this;
    }

    /**
     * Gets without_refill
     * @return \Ageras\Api\KPICreditsWithoutRefillResource
     */
    public function getWithoutRefill()
    {
        return $this->container['without_refill'];
    }

    /**
     * Sets without_refill
     * @param \Ageras\Api\KPICreditsWithoutRefillResource $without_refill
     * @return $this
     */
    public function setWithoutRefill($without_refill)
    {
        $this->container['without_refill'] = $without_refill;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


