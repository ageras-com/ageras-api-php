<?php
/**
 * KPIResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * KPIResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class KPIResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'KPIResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'created_at' => 'string',
        'geo_code' => 'string',
        'industry' => '\Ageras\Api\IndustryResource',
        'employee' => '\Ageras\Api\EmployeeResource',
        'partner' => '\Ageras\Api\PartnerSuggestResource',
        'leads' => '\Ageras\Api\KPILeadsResource',
        'credits' => '\Ageras\Api\KPICreditsResource',
        'matches' => '\Ageras\Api\KPIMatchesResource',
        'partners' => '\Ageras\Api\KPIPartnerResource',
        'refill' => '\Ageras\Api\KPIRefillResource',
        'total_sales' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'geo_code' => 'geo_code',
        'industry' => 'industry',
        'employee' => 'employee',
        'partner' => 'partner',
        'leads' => 'leads',
        'credits' => 'credits',
        'matches' => 'matches',
        'partners' => 'partners',
        'refill' => 'refill',
        'total_sales' => 'total_sales'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'geo_code' => 'setGeoCode',
        'industry' => 'setIndustry',
        'employee' => 'setEmployee',
        'partner' => 'setPartner',
        'leads' => 'setLeads',
        'credits' => 'setCredits',
        'matches' => 'setMatches',
        'partners' => 'setPartners',
        'refill' => 'setRefill',
        'total_sales' => 'setTotalSales'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'geo_code' => 'getGeoCode',
        'industry' => 'getIndustry',
        'employee' => 'getEmployee',
        'partner' => 'getPartner',
        'leads' => 'getLeads',
        'credits' => 'getCredits',
        'matches' => 'getMatches',
        'partners' => 'getPartners',
        'refill' => 'getRefill',
        'total_sales' => 'getTotalSales'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['geo_code'] = isset($data['geo_code']) ? $data['geo_code'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['leads'] = isset($data['leads']) ? $data['leads'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['matches'] = isset($data['matches']) ? $data['matches'] : null;
        $this->container['partners'] = isset($data['partners']) ? $data['partners'] : null;
        $this->container['refill'] = isset($data['refill']) ? $data['refill'] : null;
        $this->container['total_sales'] = isset($data['total_sales']) ? $data['total_sales'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Id for the given kpi
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at When the kpi was calculated
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets geo_code
     * @return string
     */
    public function getGeoCode()
    {
        return $this->container['geo_code'];
    }

    /**
     * Sets geo_code
     * @param string $geo_code Geo Location Geo
     * @return $this
     */
    public function setGeoCode($geo_code)
    {
        $this->container['geo_code'] = $geo_code;

        return $this;
    }

    /**
     * Gets industry
     * @return \Ageras\Api\IndustryResource
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     * @param \Ageras\Api\IndustryResource $industry
     * @return $this
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets employee
     * @return \Ageras\Api\EmployeeResource
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     * @param \Ageras\Api\EmployeeResource $employee
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets partner
     * @return \Ageras\Api\PartnerSuggestResource
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     * @param \Ageras\Api\PartnerSuggestResource $partner
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets leads
     * @return \Ageras\Api\KPILeadsResource
     */
    public function getLeads()
    {
        return $this->container['leads'];
    }

    /**
     * Sets leads
     * @param \Ageras\Api\KPILeadsResource $leads
     * @return $this
     */
    public function setLeads($leads)
    {
        $this->container['leads'] = $leads;

        return $this;
    }

    /**
     * Gets credits
     * @return \Ageras\Api\KPICreditsResource
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     * @param \Ageras\Api\KPICreditsResource $credits
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets matches
     * @return \Ageras\Api\KPIMatchesResource
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     * @param \Ageras\Api\KPIMatchesResource $matches
     * @return $this
     */
    public function setMatches($matches)
    {
        $this->container['matches'] = $matches;

        return $this;
    }

    /**
     * Gets partners
     * @return \Ageras\Api\KPIPartnerResource
     */
    public function getPartners()
    {
        return $this->container['partners'];
    }

    /**
     * Sets partners
     * @param \Ageras\Api\KPIPartnerResource $partners
     * @return $this
     */
    public function setPartners($partners)
    {
        $this->container['partners'] = $partners;

        return $this;
    }

    /**
     * Gets refill
     * @return \Ageras\Api\KPIRefillResource
     */
    public function getRefill()
    {
        return $this->container['refill'];
    }

    /**
     * Sets refill
     * @param \Ageras\Api\KPIRefillResource $refill
     * @return $this
     */
    public function setRefill($refill)
    {
        $this->container['refill'] = $refill;

        return $this;
    }

    /**
     * Gets total_sales
     * @return string
     */
    public function getTotalSales()
    {
        return $this->container['total_sales'];
    }

    /**
     * Sets total_sales
     * @param string $total_sales Total Sales
     * @return $this
     */
    public function setTotalSales($total_sales)
    {
        $this->container['total_sales'] = $total_sales;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


