<?php
/**
 * LeadAllocationQuotaResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * LeadAllocationQuotaResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LeadAllocationQuotaResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LeadAllocationQuotaResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner_business_unit_id' => 'int',
        'effective_at' => 'string',
        'created_by_employee_id' => 'int',
        'allocation_quota_per_refill' => 'int',
        'quota_price' => '\Ageras\Api\AmountResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner_business_unit_id' => 'partner_business_unit_id',
        'effective_at' => 'effective_at',
        'created_by_employee_id' => 'created_by_employee_id',
        'allocation_quota_per_refill' => 'allocation_quota_per_refill',
        'quota_price' => 'quota_price'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner_business_unit_id' => 'setPartnerBusinessUnitId',
        'effective_at' => 'setEffectiveAt',
        'created_by_employee_id' => 'setCreatedByEmployeeId',
        'allocation_quota_per_refill' => 'setAllocationQuotaPerRefill',
        'quota_price' => 'setQuotaPrice'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner_business_unit_id' => 'getPartnerBusinessUnitId',
        'effective_at' => 'getEffectiveAt',
        'created_by_employee_id' => 'getCreatedByEmployeeId',
        'allocation_quota_per_refill' => 'getAllocationQuotaPerRefill',
        'quota_price' => 'getQuotaPrice'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner_business_unit_id'] = isset($data['partner_business_unit_id']) ? $data['partner_business_unit_id'] : null;
        $this->container['effective_at'] = isset($data['effective_at']) ? $data['effective_at'] : null;
        $this->container['created_by_employee_id'] = isset($data['created_by_employee_id']) ? $data['created_by_employee_id'] : null;
        $this->container['allocation_quota_per_refill'] = isset($data['allocation_quota_per_refill']) ? $data['allocation_quota_per_refill'] : null;
        $this->container['quota_price'] = isset($data['quota_price']) ? $data['quota_price'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Quota ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner_business_unit_id
     * @return int
     */
    public function getPartnerBusinessUnitId()
    {
        return $this->container['partner_business_unit_id'];
    }

    /**
     * Sets partner_business_unit_id
     * @param int $partner_business_unit_id Business Unit ID.
     * @return $this
     */
    public function setPartnerBusinessUnitId($partner_business_unit_id)
    {
        $this->container['partner_business_unit_id'] = $partner_business_unit_id;

        return $this;
    }

    /**
     * Gets effective_at
     * @return string
     */
    public function getEffectiveAt()
    {
        return $this->container['effective_at'];
    }

    /**
     * Sets effective_at
     * @param string $effective_at When this quota is effective from.
     * @return $this
     */
    public function setEffectiveAt($effective_at)
    {
        $this->container['effective_at'] = $effective_at;

        return $this;
    }

    /**
     * Gets created_by_employee_id
     * @return int
     */
    public function getCreatedByEmployeeId()
    {
        return $this->container['created_by_employee_id'];
    }

    /**
     * Sets created_by_employee_id
     * @param int $created_by_employee_id Who created this quota.
     * @return $this
     */
    public function setCreatedByEmployeeId($created_by_employee_id)
    {
        $this->container['created_by_employee_id'] = $created_by_employee_id;

        return $this;
    }

    /**
     * Gets allocation_quota_per_refill
     * @return int
     */
    public function getAllocationQuotaPerRefill()
    {
        return $this->container['allocation_quota_per_refill'];
    }

    /**
     * Sets allocation_quota_per_refill
     * @param int $allocation_quota_per_refill Number of leads available for allocation per refill, e.g. each month.
     * @return $this
     */
    public function setAllocationQuotaPerRefill($allocation_quota_per_refill)
    {
        $this->container['allocation_quota_per_refill'] = $allocation_quota_per_refill;

        return $this;
    }

    /**
     * Gets quota_price
     * @return \Ageras\Api\AmountResource
     */
    public function getQuotaPrice()
    {
        return $this->container['quota_price'];
    }

    /**
     * Sets quota_price
     * @param \Ageras\Api\AmountResource $quota_price
     * @return $this
     */
    public function setQuotaPrice($quota_price)
    {
        $this->container['quota_price'] = $quota_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


