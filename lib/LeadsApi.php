<?php
/**
 * LeadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\Configuration;
use \Ageras\Api\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApi
{
    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return LeadsApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation leadsActionsCreate
     *
     * Coupon action
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadActionResource $lead_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsActionsCreate($lead_id , $lead_action_resource)
    {
        list($response) = $this->leadsActionsCreateWithHttpInfo($lead_id, $lead_action_resource);
        return $response;
    }

    /**
     * Operation leadsActionsCreateWithHttpInfo
     *
     * Coupon action
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadActionResource $lead_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsActionsCreateWithHttpInfo($lead_id , $lead_action_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_action_resource)) {
            $_tempBody = $lead_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCreate
     *
     * Create a new Lead.
     *
     * @param \Ageras\Api\LeadResource $lead_resource The given Lead Resource that should be created
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsCreate($lead_resource)
    {
        list($response) = $this->leadsCreateWithHttpInfo($lead_resource);
        return $response;
    }

    /**
     * Operation leadsCreateWithHttpInfo
     *
     * Create a new Lead.
     *
     * @param \Ageras\Api\LeadResource $lead_resource The given Lead Resource that should be created
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCreateWithHttpInfo($lead_resource)
    {
        // parse inputs
        $resourcePath = "/leads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($lead_resource)) {
            $_tempBody = $lead_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsDelete
     *
     * Delete a Lead from a given lead_id.
     *
     * @param string $lead_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function leadsDelete($lead_id )
    {
        list($response) = $this->leadsDeleteWithHttpInfo($lead_id);
        return $response;
    }

    /**
     * Operation leadsDeleteWithHttpInfo
     *
     * Delete a Lead from a given lead_id.
     *
     * @param string $lead_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsDeleteWithHttpInfo($lead_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsGet
     *
     * Return a Lead from a Lead Id.
     *
     * @param string $lead_id The id the Lead to return
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsGet($lead_id )
    {
        list($response) = $this->leadsGetWithHttpInfo($lead_id);
        return $response;
    }

    /**
     * Operation leadsGetWithHttpInfo
     *
     * Return a Lead from a Lead Id.
     *
     * @param string $lead_id The id the Lead to return
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsGetWithHttpInfo($lead_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsIndex
     *
     * Search for Lead's by a given set of criteria.
     *
     * @param $criteria = [
     *    'lead_id' => string,
     *    'phone' => string,
     *    'filter' => string,
     *    'partner_filter' => string,
     *    'partner_id' => int,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'status' => string,
     *    'client_id' => int,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResult
     */
    public function leadsIndex($criteria = [])
    {
        list($response) = $this->leadsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsIndexWithHttpInfo
     *
     * Search for Lead's by a given set of criteria.
     *
     * @param $criteria = [
     *    'lead_id' => string,
     *    'phone' => string,
     *    'filter' => string,
     *    'partner_filter' => string,
     *    'partner_id' => int,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'status' => string,
     *    'client_id' => int,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['phone'])) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($criteria['phone']);
        }
        // query params
        if (isset($criteria['filter'])) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($criteria['filter']);
        }
        // query params
        if (isset($criteria['partner_filter'])) {
            $queryParams['partner_filter'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_filter']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResult',
                '/leads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsNotesCreate
     *
     * Create lead note
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadNoteResource $lead_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsNotesCreate($lead_id , $lead_note_resource)
    {
        list($response) = $this->leadsNotesCreateWithHttpInfo($lead_id, $lead_note_resource);
        return $response;
    }

    /**
     * Operation leadsNotesCreateWithHttpInfo
     *
     * Create lead note
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadNoteResource $lead_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsNotesCreateWithHttpInfo($lead_id , $lead_note_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_note_resource)) {
            $_tempBody = $lead_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersCreate
     *
     * Create a new offer for a given Lead.
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadOfferResource $lead_offer_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadOfferResource
     */
    public function leadsOffersCreate($lead_id , $lead_offer_resource)
    {
        list($response) = $this->leadsOffersCreateWithHttpInfo($lead_id, $lead_offer_resource);
        return $response;
    }

    /**
     * Operation leadsOffersCreateWithHttpInfo
     *
     * Create a new offer for a given Lead.
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadOfferResource $lead_offer_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadOfferResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsOffersCreateWithHttpInfo($lead_id , $lead_offer_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_offer_resource)) {
            $_tempBody = $lead_offer_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResource',
                '/leads/{lead_id}/offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersGet
     *
     * Get an offer by id.
     *
     * @param string $lead_offer_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadOfferResource
     */
    public function leadsOffersGet($lead_offer_id )
    {
        list($response) = $this->leadsOffersGetWithHttpInfo($lead_offer_id);
        return $response;
    }

    /**
     * Operation leadsOffersGetWithHttpInfo
     *
     * Get an offer by id.
     *
     * @param string $lead_offer_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadOfferResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsOffersGetWithHttpInfo($lead_offer_id )
    {
        // parse inputs
        $resourcePath = "/leads/offers/{lead_offer_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_offer_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_offer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_offer_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResource',
                '/leads/offers/{lead_offer_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersGet2
     *
     * Get an offer by id.
     *
     * @param string $lead_id 
     * @param string $lead_offer_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadOfferResource
     */
    public function leadsOffersGet2($lead_id,  $lead_offer_id )
    {
        list($response) = $this->leadsOffersGet2WithHttpInfo($lead_id, $lead_offer_id);
        return $response;
    }

    /**
     * Operation leadsOffersGet2WithHttpInfo
     *
     * Get an offer by id.
     *
     * @param string $lead_id 
     * @param string $lead_offer_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadOfferResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsOffersGet2WithHttpInfo($lead_id,  $lead_offer_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/offers/{lead_offer_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_offer_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_offer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_offer_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResource',
                '/leads/{lead_id}/offers/{lead_offer_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersIndex
     *
     * List the offers connected to a given Lead.
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'lead_offer_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadOfferResult
     */
    public function leadsOffersIndex($criteria = [])
    {
        list($response) = $this->leadsOffersIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsOffersIndexWithHttpInfo
     *
     * List the offers connected to a given Lead.
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'lead_offer_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadOfferResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsOffersIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['lead_offer_id'])) {
            $queryParams['lead_offer_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_offer_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResult',
                '/leads/offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersIndex2
     *
     * List the offers connected to a given Lead.
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_offer_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadOfferResult
     */
    public function leadsOffersIndex2($lead_id , $criteria = [])
    {
        list($response) = $this->leadsOffersIndex2WithHttpInfo($lead_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsOffersIndex2WithHttpInfo
     *
     * List the offers connected to a given Lead.
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_offer_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadOfferResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsOffersIndex2WithHttpInfo($lead_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_offer_id'])) {
            $queryParams['lead_offer_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_offer_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResult',
                '/leads/{lead_id}/offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesActionsCreate
     *
     * Publish a given quote, accept it and other actions.
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteActionResource $lead_quote_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesActionsCreate($lead_id,  $lead_quote_id , $lead_quote_action_resource)
    {
        list($response) = $this->leadsQuotesActionsCreateWithHttpInfo($lead_id, $lead_quote_id, $lead_quote_action_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesActionsCreateWithHttpInfo
     *
     * Publish a given quote, accept it and other actions.
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteActionResource $lead_quote_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesActionsCreateWithHttpInfo($lead_id,  $lead_quote_id , $lead_quote_action_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_action_resource)) {
            $_tempBody = $lead_quote_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesCreate
     *
     * Create a new quote for a given Lead.
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesCreate($lead_id , $lead_quote_resource)
    {
        list($response) = $this->leadsQuotesCreateWithHttpInfo($lead_id, $lead_quote_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesCreateWithHttpInfo
     *
     * Create a new quote for a given Lead.
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesCreateWithHttpInfo($lead_id , $lead_quote_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_resource)) {
            $_tempBody = $lead_quote_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/{lead_id}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesGet
     *
     * Get an quote by id.
     *
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesGet($lead_quote_id )
    {
        list($response) = $this->leadsQuotesGetWithHttpInfo($lead_quote_id);
        return $response;
    }

    /**
     * Operation leadsQuotesGetWithHttpInfo
     *
     * Get an quote by id.
     *
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesGetWithHttpInfo($lead_quote_id )
    {
        // parse inputs
        $resourcePath = "/leads/quotes/{lead_quote_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/quotes/{lead_quote_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesGet2
     *
     * Get an quote by id.
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesGet2($lead_id,  $lead_quote_id )
    {
        list($response) = $this->leadsQuotesGet2WithHttpInfo($lead_id, $lead_quote_id);
        return $response;
    }

    /**
     * Operation leadsQuotesGet2WithHttpInfo
     *
     * Get an quote by id.
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesGet2WithHttpInfo($lead_id,  $lead_quote_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesIndex
     *
     * List the quotes connected to a given Lead.
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResult
     */
    public function leadsQuotesIndex($criteria = [])
    {
        list($response) = $this->leadsQuotesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsQuotesIndexWithHttpInfo
     *
     * List the quotes connected to a given Lead.
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['lead_quote_id'])) {
            $queryParams['lead_quote_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_quote_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResult',
                '/leads/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesIndex2
     *
     * List the quotes connected to a given Lead.
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResult
     */
    public function leadsQuotesIndex2($lead_id , $criteria = [])
    {
        list($response) = $this->leadsQuotesIndex2WithHttpInfo($lead_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsQuotesIndex2WithHttpInfo
     *
     * List the quotes connected to a given Lead.
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesIndex2WithHttpInfo($lead_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_quote_id'])) {
            $queryParams['lead_quote_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_quote_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResult',
                '/leads/{lead_id}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsTypesIndex
     *
     * Index lead types.
     *
     * @param $criteria = [
     *    'type_id' => string,
     *    'title' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadTypeResult
     */
    public function leadsTypesIndex($criteria = [])
    {
        list($response) = $this->leadsTypesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsTypesIndexWithHttpInfo
     *
     * Index lead types.
     *
     * @param $criteria = [
     *    'type_id' => string,
     *    'title' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadTypeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsTypesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['type_id'])) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['type_id']);
        }
        // query params
        if (isset($criteria['title'])) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($criteria['title']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadTypeResult',
                '/leads/types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadTypeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadTypeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsUpdate
     *
     * Update Properties on a given Lead.
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadResource $lead_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsUpdate($lead_id , $lead_resource)
    {
        list($response) = $this->leadsUpdateWithHttpInfo($lead_id, $lead_resource);
        return $response;
    }

    /**
     * Operation leadsUpdateWithHttpInfo
     *
     * Update Properties on a given Lead.
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadResource $lead_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsUpdateWithHttpInfo($lead_id , $lead_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_resource)) {
            $_tempBody = $lead_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
