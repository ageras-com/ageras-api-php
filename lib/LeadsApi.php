<?php
/**
 * LeadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\Configuration;
use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApi
{

    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ageras.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return LeadsApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation leadsActionsCreate
     *
     * Coupon action
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadActionResource $lead_action_resource  (required)
     * @return \Ageras\Api\LeadResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsActionsCreate($lead_id, $lead_action_resource)
    {
        list($response) = $this->leadsActionsCreateWithHttpInfo($lead_id, $lead_action_resource);
        return $response;
    }

    /**
     * Operation leadsActionsCreateWithHttpInfo
     *
     * Coupon action
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadActionResource $lead_action_resource  (required)
     * @return Array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsActionsCreateWithHttpInfo($lead_id, $lead_action_resource)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsActionsCreate');
        }
        // verify the required parameter 'lead_action_resource' is set
        if ($lead_action_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_action_resource when calling leadsActionsCreate');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}/actions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($lead_action_resource)) {
            $_tempBody = $lead_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}/actions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCreate
     *
     * Create a new Lead.
     *
     * @param \Ageras\Api\LeadResource $lead_resource The given Lead Resource that should be created (required)
     * @return \Ageras\Api\LeadResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsCreate($lead_resource)
    {
        list($response) = $this->leadsCreateWithHttpInfo($lead_resource);
        return $response;
    }

    /**
     * Operation leadsCreateWithHttpInfo
     *
     * Create a new Lead.
     *
     * @param \Ageras\Api\LeadResource $lead_resource The given Lead Resource that should be created (required)
     * @return Array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsCreateWithHttpInfo($lead_resource)
    {
        // verify the required parameter 'lead_resource' is set
        if ($lead_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_resource when calling leadsCreate');
        }
        // parse inputs
        $resourcePath = "/leads";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($lead_resource)) {
            $_tempBody = $lead_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsDelete
     *
     * Delete a Lead from a given lead_id.
     *
     * @param string $lead_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsDelete($lead_id)
    {
        list($response) = $this->leadsDeleteWithHttpInfo($lead_id);
        return $response;
    }

    /**
     * Operation leadsDeleteWithHttpInfo
     *
     * Delete a Lead from a given lead_id.
     *
     * @param string $lead_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsDeleteWithHttpInfo($lead_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsDelete');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsGet
     *
     * Return a Lead from a Lead Id.
     *
     * @param string $lead_id The id the Lead to return (required)
     * @return \Ageras\Api\LeadResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsGet($lead_id)
    {
        list($response) = $this->leadsGetWithHttpInfo($lead_id);
        return $response;
    }

    /**
     * Operation leadsGetWithHttpInfo
     *
     * Return a Lead from a Lead Id.
     *
     * @param string $lead_id The id the Lead to return (required)
     * @return Array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsGetWithHttpInfo($lead_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsGet');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsIndex
     *
     * Search for Lead's by a given set of criteria.
     *
     * @param string $lead_id List of leads identification(ID). (optional)
     * @param bool $needs_more_offers Only list leads that need more offers. (optional, default to false)
     * @param string $phone Filter by a given phone number. (optional)
     * @param string $filter Apply a pre-defined filter. (optional, default to none)
     * @param int $partner_id Provide a given partner id to filter by. Requires \&quot;filter\&quot; to be \&quot;bought_by_partner\&quot; or \&quot;segmented_for_partner\&quot;. (optional)
     * @param string $geo_code Geographic Location Code. (optional)
     * @param string $sort Sort Leads by a given attribute. (optional, default to created_at)
     * @param string $status Status for the given lead. (optional, default to unknown)
     * @param int $client_id Lead&#39;s client (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\LeadResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsIndex($lead_id = null, $needs_more_offers = null, $phone = null, $filter = null, $partner_id = null, $geo_code = null, $sort = null, $status = null, $client_id = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->leadsIndexWithHttpInfo($lead_id, $needs_more_offers, $phone, $filter, $partner_id, $geo_code, $sort, $status, $client_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation leadsIndexWithHttpInfo
     *
     * Search for Lead's by a given set of criteria.
     *
     * @param string $lead_id List of leads identification(ID). (optional)
     * @param bool $needs_more_offers Only list leads that need more offers. (optional, default to false)
     * @param string $phone Filter by a given phone number. (optional)
     * @param string $filter Apply a pre-defined filter. (optional, default to none)
     * @param int $partner_id Provide a given partner id to filter by. Requires \&quot;filter\&quot; to be \&quot;bought_by_partner\&quot; or \&quot;segmented_for_partner\&quot;. (optional)
     * @param string $geo_code Geographic Location Code. (optional)
     * @param string $sort Sort Leads by a given attribute. (optional, default to created_at)
     * @param string $status Status for the given lead. (optional, default to unknown)
     * @param int $client_id Lead&#39;s client (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\LeadResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsIndexWithHttpInfo($lead_id = null, $needs_more_offers = null, $phone = null, $filter = null, $partner_id = null, $geo_code = null, $sort = null, $status = null, $client_id = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/leads";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_id);
        }
        // query params
        if ($needs_more_offers !== null) {
            $queryParams['needs_more_offers'] = $this->apiClient->getSerializer()->toQueryValue($needs_more_offers);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($phone);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResult',
                '/leads'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsNotesCreate
     *
     * Create lead note
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadNoteResource $lead_note_resource  (required)
     * @return \Ageras\Api\LeadResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsNotesCreate($lead_id, $lead_note_resource)
    {
        list($response) = $this->leadsNotesCreateWithHttpInfo($lead_id, $lead_note_resource);
        return $response;
    }

    /**
     * Operation leadsNotesCreateWithHttpInfo
     *
     * Create lead note
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadNoteResource $lead_note_resource  (required)
     * @return Array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsNotesCreateWithHttpInfo($lead_id, $lead_note_resource)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsNotesCreate');
        }
        // verify the required parameter 'lead_note_resource' is set
        if ($lead_note_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_note_resource when calling leadsNotesCreate');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($lead_note_resource)) {
            $_tempBody = $lead_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersCreate
     *
     * Create a new offer for a given Lead.
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadOfferResource $lead_offer_resource  (required)
     * @return \Ageras\Api\LeadOfferResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersCreate($lead_id, $lead_offer_resource)
    {
        list($response) = $this->leadsOffersCreateWithHttpInfo($lead_id, $lead_offer_resource);
        return $response;
    }

    /**
     * Operation leadsOffersCreateWithHttpInfo
     *
     * Create a new offer for a given Lead.
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadOfferResource $lead_offer_resource  (required)
     * @return Array of \Ageras\Api\LeadOfferResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersCreateWithHttpInfo($lead_id, $lead_offer_resource)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsOffersCreate');
        }
        // verify the required parameter 'lead_offer_resource' is set
        if ($lead_offer_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_offer_resource when calling leadsOffersCreate');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}/offers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($lead_offer_resource)) {
            $_tempBody = $lead_offer_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResource',
                '/leads/{lead_id}/offers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersGet
     *
     * Get an offer by id.
     *
     * @param string $lead_offer_id  (required)
     * @return \Ageras\Api\LeadOfferResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersGet($lead_offer_id)
    {
        list($response) = $this->leadsOffersGetWithHttpInfo($lead_offer_id);
        return $response;
    }

    /**
     * Operation leadsOffersGetWithHttpInfo
     *
     * Get an offer by id.
     *
     * @param string $lead_offer_id  (required)
     * @return Array of \Ageras\Api\LeadOfferResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersGetWithHttpInfo($lead_offer_id)
    {
        // verify the required parameter 'lead_offer_id' is set
        if ($lead_offer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_offer_id when calling leadsOffersGet');
        }
        // parse inputs
        $resourcePath = "/leads/offers/{lead_offer_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_offer_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_offer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_offer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResource',
                '/leads/offers/{lead_offer_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersGet2
     *
     * Get an offer by id.
     *
     * @param string $lead_id  (required)
     * @param string $lead_offer_id  (required)
     * @return \Ageras\Api\LeadOfferResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersGet2($lead_id, $lead_offer_id)
    {
        list($response) = $this->leadsOffersGet2WithHttpInfo($lead_id, $lead_offer_id);
        return $response;
    }

    /**
     * Operation leadsOffersGet2WithHttpInfo
     *
     * Get an offer by id.
     *
     * @param string $lead_id  (required)
     * @param string $lead_offer_id  (required)
     * @return Array of \Ageras\Api\LeadOfferResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersGet2WithHttpInfo($lead_id, $lead_offer_id)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsOffersGet2');
        }
        // verify the required parameter 'lead_offer_id' is set
        if ($lead_offer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_offer_id when calling leadsOffersGet2');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}/offers/{lead_offer_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_offer_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_offer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_offer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResource',
                '/leads/{lead_id}/offers/{lead_offer_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersIndex
     *
     * List the offers connected to a given Lead.
     *
     * @param string $lead_id List of leads identification(ID). (optional)
     * @param string $lead_offer_id List of lead offers identification(ID). (optional)
     * @param string $partner_id Offers belonging to a given partner. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\LeadOfferResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersIndex($lead_id = null, $lead_offer_id = null, $partner_id = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->leadsOffersIndexWithHttpInfo($lead_id, $lead_offer_id, $partner_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation leadsOffersIndexWithHttpInfo
     *
     * List the offers connected to a given Lead.
     *
     * @param string $lead_id List of leads identification(ID). (optional)
     * @param string $lead_offer_id List of lead offers identification(ID). (optional)
     * @param string $partner_id Offers belonging to a given partner. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\LeadOfferResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersIndexWithHttpInfo($lead_id = null, $lead_offer_id = null, $partner_id = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/leads/offers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_id);
        }
        // query params
        if ($lead_offer_id !== null) {
            $queryParams['lead_offer_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_offer_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResult',
                '/leads/offers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsOffersIndex2
     *
     * List the offers connected to a given Lead.
     *
     * @param string $lead_id  (required)
     * @param string $lead_offer_id List of lead offers identification(ID). (optional)
     * @param string $partner_id Offers belonging to a given partner. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\LeadOfferResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersIndex2($lead_id, $lead_offer_id = null, $partner_id = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->leadsOffersIndex2WithHttpInfo($lead_id, $lead_offer_id, $partner_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation leadsOffersIndex2WithHttpInfo
     *
     * List the offers connected to a given Lead.
     *
     * @param string $lead_id  (required)
     * @param string $lead_offer_id List of lead offers identification(ID). (optional)
     * @param string $partner_id Offers belonging to a given partner. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\LeadOfferResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsOffersIndex2WithHttpInfo($lead_id, $lead_offer_id = null, $partner_id = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsOffersIndex2');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}/offers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($lead_offer_id !== null) {
            $queryParams['lead_offer_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_offer_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadOfferResult',
                '/leads/{lead_id}/offers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadOfferResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadOfferResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsTypesIndex
     *
     * Index lead types.
     *
     * @param string $type_id Type ID. @var int (optional)
     * @param string $title Type title in its native language. @var string (optional)
     * @param string $geo_code Industry geo code origin. @var string (optional)
     * @param int $limit Limit of industries per page. @var int (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\LeadTypeResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsTypesIndex($type_id = null, $title = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->leadsTypesIndexWithHttpInfo($type_id, $title, $geo_code, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation leadsTypesIndexWithHttpInfo
     *
     * Index lead types.
     *
     * @param string $type_id Type ID. @var int (optional)
     * @param string $title Type title in its native language. @var string (optional)
     * @param string $geo_code Industry geo code origin. @var string (optional)
     * @param int $limit Limit of industries per page. @var int (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\LeadTypeResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsTypesIndexWithHttpInfo($type_id = null, $title = null, $geo_code = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/leads/types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($type_id !== null) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($type_id);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($title);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadTypeResult',
                '/leads/types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadTypeResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadTypeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsUpdate
     *
     * Update Properties on a given Lead.
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadResource $lead_resource  (required)
     * @return \Ageras\Api\LeadResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsUpdate($lead_id, $lead_resource)
    {
        list($response) = $this->leadsUpdateWithHttpInfo($lead_id, $lead_resource);
        return $response;
    }

    /**
     * Operation leadsUpdateWithHttpInfo
     *
     * Update Properties on a given Lead.
     *
     * @param string $lead_id  (required)
     * @param \Ageras\Api\LeadResource $lead_resource  (required)
     * @return Array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function leadsUpdateWithHttpInfo($lead_id, $lead_resource)
    {
        // verify the required parameter 'lead_id' is set
        if ($lead_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_id when calling leadsUpdate');
        }
        // verify the required parameter 'lead_resource' is set
        if ($lead_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lead_resource when calling leadsUpdate');
        }
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($lead_resource)) {
            $_tempBody = $lead_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
