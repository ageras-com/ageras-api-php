<?php
/**
 * LeadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\Configuration;
use \Ageras\Api\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApi
{
    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return LeadsApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation leadsActionsCreate
     *
     * This function serves up one class with a lot of functionality
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadActionResource $lead_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsActionsCreate($lead_id , $lead_action_resource)
    {
        list($response) = $this->leadsActionsCreateWithHttpInfo($lead_id, $lead_action_resource);
        return $response;
    }

    /**
     * Operation leadsActionsCreateWithHttpInfo
     *
     * This function serves up one class with a lot of functionality
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadActionResource $lead_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsActionsCreateWithHttpInfo($lead_id , $lead_action_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_action_resource)) {
            $_tempBody = $lead_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsAggregationsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'lead_id' => string,
     *    'phone' => string,
     *    'partner_id' => int,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'status' => string,
     *    'client_id' => int,
     *    'employee_id' => string,
     *    'client_decision_postponed' => bool,
     *    'all_quotes_published_before' => string,
     *    'expires_within' => int,
     *    'industry' => string,
     *    'is_quotes_lead' => bool,
     *    'has_max_quotes' => bool,
     *    'has_accepted_quote' => bool,
     *    'has_rejected_quote' => bool,
     *    'no_quote_for_partner_id' => int,
     *    'is_match_priority' => bool,
     *    'is_completed_call_priority' => bool,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'minimum_revenue_amount_excl_vat' => string,
     *    'maximum_revenue_amount_excl_vat' => string,
     *    'lead_category' => string,
     *    'validator_id' => string,
     *    'is_given_up' => bool,
     *    'industry_id' => string,
     *    'call_count_before_validation_lt' => int,
     *    'is_validation_postponed' => bool,
     *    'created_at_lte' => string,
     *    'created_at_gte' => string,
     *    'validated_at_gte' => string,
     *    'latest_called_at_before' => string,
     *    'segmentation_criteria' => string,
     *    'segmented_for_partner_business_unit_id' => int,
     *    'sub_geo_region_name' => string,
     *    'is_anonymized' => bool,
     *    'has_lead_quote_fee' => bool,
     *    'desired_partner_company_size_id' => string,
     *    'segmented_for_lead_marketplace_partner_id' => int,
     *    'personal_title_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\AggregationResult
     */
    public function leadsAggregationsIndex($criteria = [])
    {
        list($response) = $this->leadsAggregationsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsAggregationsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'lead_id' => string,
     *    'phone' => string,
     *    'partner_id' => int,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'status' => string,
     *    'client_id' => int,
     *    'employee_id' => string,
     *    'client_decision_postponed' => bool,
     *    'all_quotes_published_before' => string,
     *    'expires_within' => int,
     *    'industry' => string,
     *    'is_quotes_lead' => bool,
     *    'has_max_quotes' => bool,
     *    'has_accepted_quote' => bool,
     *    'has_rejected_quote' => bool,
     *    'no_quote_for_partner_id' => int,
     *    'is_match_priority' => bool,
     *    'is_completed_call_priority' => bool,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'minimum_revenue_amount_excl_vat' => string,
     *    'maximum_revenue_amount_excl_vat' => string,
     *    'lead_category' => string,
     *    'validator_id' => string,
     *    'is_given_up' => bool,
     *    'industry_id' => string,
     *    'call_count_before_validation_lt' => int,
     *    'is_validation_postponed' => bool,
     *    'created_at_lte' => string,
     *    'created_at_gte' => string,
     *    'validated_at_gte' => string,
     *    'latest_called_at_before' => string,
     *    'segmentation_criteria' => string,
     *    'segmented_for_partner_business_unit_id' => int,
     *    'sub_geo_region_name' => string,
     *    'is_anonymized' => bool,
     *    'has_lead_quote_fee' => bool,
     *    'desired_partner_company_size_id' => string,
     *    'segmented_for_lead_marketplace_partner_id' => int,
     *    'personal_title_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\AggregationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsAggregationsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/aggregations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['phone'])) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($criteria['phone']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['client_decision_postponed'])) {
            $queryParams['client_decision_postponed'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_decision_postponed']);
        }
        // query params
        if (isset($criteria['all_quotes_published_before'])) {
            $queryParams['all_quotes_published_before'] = $this->apiClient->getSerializer()->toQueryValue($criteria['all_quotes_published_before']);
        }
        // query params
        if (isset($criteria['expires_within'])) {
            $queryParams['expires_within'] = $this->apiClient->getSerializer()->toQueryValue($criteria['expires_within']);
        }
        // query params
        if (isset($criteria['industry'])) {
            $queryParams['industry'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry']);
        }
        // query params
        if (isset($criteria['is_quotes_lead'])) {
            $queryParams['is_quotes_lead'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_quotes_lead']);
        }
        // query params
        if (isset($criteria['has_max_quotes'])) {
            $queryParams['has_max_quotes'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_max_quotes']);
        }
        // query params
        if (isset($criteria['has_accepted_quote'])) {
            $queryParams['has_accepted_quote'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_accepted_quote']);
        }
        // query params
        if (isset($criteria['has_rejected_quote'])) {
            $queryParams['has_rejected_quote'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_rejected_quote']);
        }
        // query params
        if (isset($criteria['no_quote_for_partner_id'])) {
            $queryParams['no_quote_for_partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['no_quote_for_partner_id']);
        }
        // query params
        if (isset($criteria['is_match_priority'])) {
            $queryParams['is_match_priority'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_match_priority']);
        }
        // query params
        if (isset($criteria['is_completed_call_priority'])) {
            $queryParams['is_completed_call_priority'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_completed_call_priority']);
        }
        // query params
        if (isset($criteria['geo_point'])) {
            $queryParams['geo_point'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_point']);
        }
        // query params
        if (isset($criteria['geo_rect'])) {
            $queryParams['geo_rect'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_rect']);
        }
        // query params
        if (isset($criteria['geo_distance'])) {
            $queryParams['geo_distance'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_distance']);
        }
        // query params
        if (isset($criteria['minimum_revenue_amount_excl_vat'])) {
            $queryParams['minimum_revenue_amount_excl_vat'] = $this->apiClient->getSerializer()->toQueryValue($criteria['minimum_revenue_amount_excl_vat']);
        }
        // query params
        if (isset($criteria['maximum_revenue_amount_excl_vat'])) {
            $queryParams['maximum_revenue_amount_excl_vat'] = $this->apiClient->getSerializer()->toQueryValue($criteria['maximum_revenue_amount_excl_vat']);
        }
        // query params
        if (isset($criteria['lead_category'])) {
            $queryParams['lead_category'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_category']);
        }
        // query params
        if (isset($criteria['validator_id'])) {
            $queryParams['validator_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['validator_id']);
        }
        // query params
        if (isset($criteria['is_given_up'])) {
            $queryParams['is_given_up'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_given_up']);
        }
        // query params
        if (isset($criteria['industry_id'])) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry_id']);
        }
        // query params
        if (isset($criteria['call_count_before_validation_lt'])) {
            $queryParams['call_count_before_validation_lt'] = $this->apiClient->getSerializer()->toQueryValue($criteria['call_count_before_validation_lt']);
        }
        // query params
        if (isset($criteria['is_validation_postponed'])) {
            $queryParams['is_validation_postponed'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_validation_postponed']);
        }
        // query params
        if (isset($criteria['created_at_lte'])) {
            $queryParams['created_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['created_at_lte']);
        }
        // query params
        if (isset($criteria['created_at_gte'])) {
            $queryParams['created_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['created_at_gte']);
        }
        // query params
        if (isset($criteria['validated_at_gte'])) {
            $queryParams['validated_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['validated_at_gte']);
        }
        // query params
        if (isset($criteria['latest_called_at_before'])) {
            $queryParams['latest_called_at_before'] = $this->apiClient->getSerializer()->toQueryValue($criteria['latest_called_at_before']);
        }
        // query params
        if (isset($criteria['segmentation_criteria'])) {
            $queryParams['segmentation_criteria'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmentation_criteria']);
        }
        // query params
        if (isset($criteria['segmented_for_partner_business_unit_id'])) {
            $queryParams['segmented_for_partner_business_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_partner_business_unit_id']);
        }
        // query params
        if (isset($criteria['sub_geo_region_name'])) {
            $queryParams['sub_geo_region_name'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sub_geo_region_name']);
        }
        // query params
        if (isset($criteria['is_anonymized'])) {
            $queryParams['is_anonymized'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_anonymized']);
        }
        // query params
        if (isset($criteria['has_lead_quote_fee'])) {
            $queryParams['has_lead_quote_fee'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_lead_quote_fee']);
        }
        // query params
        if (isset($criteria['desired_partner_company_size_id'])) {
            $queryParams['desired_partner_company_size_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['desired_partner_company_size_id']);
        }
        // query params
        if (isset($criteria['segmented_for_lead_marketplace_partner_id'])) {
            $queryParams['segmented_for_lead_marketplace_partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_lead_marketplace_partner_id']);
        }
        // query params
        if (isset($criteria['personal_title_id'])) {
            $queryParams['personal_title_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['personal_title_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\AggregationResult',
                '/leads/aggregations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\AggregationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\AggregationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsAllocationsCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadAllocationsResource $lead_allocations_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadAllocationsResource
     */
    public function leadsAllocationsCreate($lead_id , $lead_allocations_resource)
    {
        list($response) = $this->leadsAllocationsCreateWithHttpInfo($lead_id, $lead_allocations_resource);
        return $response;
    }

    /**
     * Operation leadsAllocationsCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadAllocationsResource $lead_allocations_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadAllocationsResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsAllocationsCreateWithHttpInfo($lead_id , $lead_allocations_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/allocations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_allocations_resource)) {
            $_tempBody = $lead_allocations_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadAllocationsResource',
                '/leads/{lead_id}/allocations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadAllocationsResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadAllocationsResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsAllocationsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'lead_id' => int,
     *    'partner_id' => int,
     *    'partner_business_unit_id' => string,
     *    'starts_at' => string,
     *    'ends_at' => string,
     *    'has_business_unit' => bool,
     *    'sort' => string,
     *    'is_used' => bool,
     *    'is_processed' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadPartnerAllocationResult
     */
    public function leadsAllocationsIndex($criteria = [])
    {
        list($response) = $this->leadsAllocationsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsAllocationsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'lead_id' => int,
     *    'partner_id' => int,
     *    'partner_business_unit_id' => string,
     *    'starts_at' => string,
     *    'ends_at' => string,
     *    'has_business_unit' => bool,
     *    'sort' => string,
     *    'is_used' => bool,
     *    'is_processed' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadPartnerAllocationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsAllocationsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/allocations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['partner_business_unit_id'])) {
            $queryParams['partner_business_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_business_unit_id']);
        }
        // query params
        if (isset($criteria['starts_at'])) {
            $queryParams['starts_at'] = $this->apiClient->getSerializer()->toQueryValue($criteria['starts_at']);
        }
        // query params
        if (isset($criteria['ends_at'])) {
            $queryParams['ends_at'] = $this->apiClient->getSerializer()->toQueryValue($criteria['ends_at']);
        }
        // query params
        if (isset($criteria['has_business_unit'])) {
            $queryParams['has_business_unit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_business_unit']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['is_used'])) {
            $queryParams['is_used'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_used']);
        }
        // query params
        if (isset($criteria['is_processed'])) {
            $queryParams['is_processed'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_processed']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadPartnerAllocationResult',
                '/leads/allocations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadPartnerAllocationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadPartnerAllocationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsAllocationsuggestionsDelete
     *
     * 
     *
     * @param string $lead_id 
     * @param string $allocation_suggestion_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function leadsAllocationsuggestionsDelete($lead_id,  $allocation_suggestion_id )
    {
        list($response) = $this->leadsAllocationsuggestionsDeleteWithHttpInfo($lead_id, $allocation_suggestion_id);
        return $response;
    }

    /**
     * Operation leadsAllocationsuggestionsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $allocation_suggestion_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsAllocationsuggestionsDeleteWithHttpInfo($lead_id,  $allocation_suggestion_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/allocationsuggestions/{allocation_suggestion_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($allocation_suggestion_id !== null) {
            $resourcePath = str_replace(
                "{" . "allocation_suggestion_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($allocation_suggestion_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}/allocationsuggestions/{allocation_suggestion_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCategoriesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'id' => string,
     *    'identifier' => string,
     *    'title' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadCategoryResult
     */
    public function leadsCategoriesIndex($criteria = [])
    {
        list($response) = $this->leadsCategoriesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsCategoriesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'id' => string,
     *    'identifier' => string,
     *    'title' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadCategoryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCategoriesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['id'])) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['id']);
        }
        // query params
        if (isset($criteria['identifier'])) {
            $queryParams['identifier'] = $this->apiClient->getSerializer()->toQueryValue($criteria['identifier']);
        }
        // query params
        if (isset($criteria['title'])) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($criteria['title']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadCategoryResult',
                '/leads/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadCategoryResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadCategoryResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCertificationsCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\CertificationResource $certification_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\CertificationResource
     */
    public function leadsCertificationsCreate($lead_id , $certification_resource)
    {
        list($response) = $this->leadsCertificationsCreateWithHttpInfo($lead_id, $certification_resource);
        return $response;
    }

    /**
     * Operation leadsCertificationsCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\CertificationResource $certification_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\CertificationResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCertificationsCreateWithHttpInfo($lead_id , $certification_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/certifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($certification_resource)) {
            $_tempBody = $certification_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\CertificationResource',
                '/leads/{lead_id}/certifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\CertificationResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\CertificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCertificationsDelete
     *
     * 
     *
     * @param string $lead_id 
     * @param string $certification_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function leadsCertificationsDelete($lead_id,  $certification_id )
    {
        list($response) = $this->leadsCertificationsDeleteWithHttpInfo($lead_id, $certification_id);
        return $response;
    }

    /**
     * Operation leadsCertificationsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $certification_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCertificationsDeleteWithHttpInfo($lead_id,  $certification_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/certifications/{certification_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($certification_id !== null) {
            $resourcePath = str_replace(
                "{" . "certification_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($certification_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}/certifications/{certification_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCertificationsIndex
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'is_segmentable' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\CertificationResult
     */
    public function leadsCertificationsIndex($lead_id , $criteria = [])
    {
        list($response) = $this->leadsCertificationsIndexWithHttpInfo($lead_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsCertificationsIndexWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'is_segmentable' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\CertificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCertificationsIndexWithHttpInfo($lead_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/certifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['is_segmentable'])) {
            $queryParams['is_segmentable'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_segmentable']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\CertificationResult',
                '/leads/{lead_id}/certifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\CertificationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\CertificationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCertificationsUpdate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadCertificationsResource $lead_certifications_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\CertificationResource
     */
    public function leadsCertificationsUpdate($lead_id , $lead_certifications_resource)
    {
        list($response) = $this->leadsCertificationsUpdateWithHttpInfo($lead_id, $lead_certifications_resource);
        return $response;
    }

    /**
     * Operation leadsCertificationsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadCertificationsResource $lead_certifications_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\CertificationResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCertificationsUpdateWithHttpInfo($lead_id , $lead_certifications_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/certifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_certifications_resource)) {
            $_tempBody = $lead_certifications_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\CertificationResource',
                '/leads/{lead_id}/certifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\CertificationResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\CertificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCompanysizesIndex
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadCompanySizesResult
     */
    public function leadsCompanysizesIndex($lead_id , $criteria = [])
    {
        list($response) = $this->leadsCompanysizesIndexWithHttpInfo($lead_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsCompanysizesIndexWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadCompanySizesResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCompanysizesIndexWithHttpInfo($lead_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/companysizes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadCompanySizesResult',
                '/leads/{lead_id}/companysizes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadCompanySizesResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadCompanySizesResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCompanysizesUpdate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadCompanySizesResource $lead_company_sizes_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadCompanySizesResource
     */
    public function leadsCompanysizesUpdate($lead_id , $lead_company_sizes_resource)
    {
        list($response) = $this->leadsCompanysizesUpdateWithHttpInfo($lead_id, $lead_company_sizes_resource);
        return $response;
    }

    /**
     * Operation leadsCompanysizesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadCompanySizesResource $lead_company_sizes_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadCompanySizesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCompanysizesUpdateWithHttpInfo($lead_id , $lead_company_sizes_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/companysizes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_company_sizes_resource)) {
            $_tempBody = $lead_company_sizes_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadCompanySizesResource',
                '/leads/{lead_id}/companysizes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadCompanySizesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadCompanySizesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsCreate
     *
     * 
     *
     * @param \Ageras\Api\LeadResource $lead_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsCreate($lead_resource)
    {
        list($response) = $this->leadsCreateWithHttpInfo($lead_resource);
        return $response;
    }

    /**
     * Operation leadsCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\LeadResource $lead_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsCreateWithHttpInfo($lead_resource)
    {
        // parse inputs
        $resourcePath = "/leads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($lead_resource)) {
            $_tempBody = $lead_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsDelete
     *
     * 
     *
     * @param string $lead_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function leadsDelete($lead_id )
    {
        list($response) = $this->leadsDeleteWithHttpInfo($lead_id);
        return $response;
    }

    /**
     * Operation leadsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsDeleteWithHttpInfo($lead_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsDemopartnersIndex
     *
     * 
     *
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResult
     */
    public function leadsDemopartnersIndex($partner_id )
    {
        list($response) = $this->leadsDemopartnersIndexWithHttpInfo($partner_id);
        return $response;
    }

    /**
     * Operation leadsDemopartnersIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsDemopartnersIndexWithHttpInfo($partner_id )
    {
        // parse inputs
        $resourcePath = "/leads/demopartners/{partner_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResult',
                '/leads/demopartners/{partner_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsDemopartnersIndex_0
     *
     * 
     *
     * @param string $lead_id 
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResult
     */
    public function leadsDemopartnersIndex_0($lead_id,  $partner_id )
    {
        list($response) = $this->leadsDemopartnersIndex_0WithHttpInfo($lead_id, $partner_id);
        return $response;
    }

    /**
     * Operation leadsDemopartnersIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsDemopartnersIndex_0WithHttpInfo($lead_id,  $partner_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/demopartners/{partner_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResult',
                '/leads/{lead_id}/demopartners/{partner_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsExcludedpartnersCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\PartnerSuggestResource $partner_suggest_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsExcludedpartnersCreate($lead_id , $partner_suggest_resource)
    {
        list($response) = $this->leadsExcludedpartnersCreateWithHttpInfo($lead_id, $partner_suggest_resource);
        return $response;
    }

    /**
     * Operation leadsExcludedpartnersCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\PartnerSuggestResource $partner_suggest_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsExcludedpartnersCreateWithHttpInfo($lead_id , $partner_suggest_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/excludedpartners";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_suggest_resource)) {
            $_tempBody = $partner_suggest_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}/excludedpartners'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsExcludedpartnersDelete
     *
     * 
     *
     * @param string $lead_id 
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function leadsExcludedpartnersDelete($lead_id,  $partner_id )
    {
        list($response) = $this->leadsExcludedpartnersDeleteWithHttpInfo($lead_id, $partner_id);
        return $response;
    }

    /**
     * Operation leadsExcludedpartnersDeleteWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsExcludedpartnersDeleteWithHttpInfo($lead_id,  $partner_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/excludedpartners/{partner_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}/excludedpartners/{partner_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsExcludedpartnersIndex
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadPartnerResult
     */
    public function leadsExcludedpartnersIndex($lead_id , $criteria = [])
    {
        list($response) = $this->leadsExcludedpartnersIndexWithHttpInfo($lead_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsExcludedpartnersIndexWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadPartnerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsExcludedpartnersIndexWithHttpInfo($lead_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/excludedpartners";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadPartnerResult',
                '/leads/{lead_id}/excludedpartners'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadPartnerResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadPartnerResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsGet
     *
     * 
     *
     * @param string $lead_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsGet($lead_id )
    {
        list($response) = $this->leadsGetWithHttpInfo($lead_id);
        return $response;
    }

    /**
     * Operation leadsGetWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsGetWithHttpInfo($lead_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'lead_id' => string,
     *    'phone' => string,
     *    'partner_id' => int,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'status' => string,
     *    'client_id' => int,
     *    'employee_id' => string,
     *    'client_decision_postponed' => bool,
     *    'all_quotes_published_before' => string,
     *    'expires_within' => int,
     *    'industry' => string,
     *    'is_quotes_lead' => bool,
     *    'has_max_quotes' => bool,
     *    'has_accepted_quote' => bool,
     *    'has_rejected_quote' => bool,
     *    'no_quote_for_partner_id' => int,
     *    'is_match_priority' => bool,
     *    'is_completed_call_priority' => bool,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'minimum_revenue_amount_excl_vat' => string,
     *    'maximum_revenue_amount_excl_vat' => string,
     *    'lead_category' => string,
     *    'validator_id' => string,
     *    'is_given_up' => bool,
     *    'industry_id' => string,
     *    'call_count_before_validation_lt' => int,
     *    'is_validation_postponed' => bool,
     *    'created_at_lte' => string,
     *    'created_at_gte' => string,
     *    'validated_at_gte' => string,
     *    'latest_called_at_before' => string,
     *    'segmentation_criteria' => string,
     *    'segmented_for_partner_business_unit_id' => int,
     *    'sub_geo_region_name' => string,
     *    'is_anonymized' => bool,
     *    'has_lead_quote_fee' => bool,
     *    'desired_partner_company_size_id' => string,
     *    'segmented_for_lead_marketplace_partner_id' => int,
     *    'personal_title_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResult
     */
    public function leadsIndex($criteria = [])
    {
        list($response) = $this->leadsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'lead_id' => string,
     *    'phone' => string,
     *    'partner_id' => int,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'status' => string,
     *    'client_id' => int,
     *    'employee_id' => string,
     *    'client_decision_postponed' => bool,
     *    'all_quotes_published_before' => string,
     *    'expires_within' => int,
     *    'industry' => string,
     *    'is_quotes_lead' => bool,
     *    'has_max_quotes' => bool,
     *    'has_accepted_quote' => bool,
     *    'has_rejected_quote' => bool,
     *    'no_quote_for_partner_id' => int,
     *    'is_match_priority' => bool,
     *    'is_completed_call_priority' => bool,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'minimum_revenue_amount_excl_vat' => string,
     *    'maximum_revenue_amount_excl_vat' => string,
     *    'lead_category' => string,
     *    'validator_id' => string,
     *    'is_given_up' => bool,
     *    'industry_id' => string,
     *    'call_count_before_validation_lt' => int,
     *    'is_validation_postponed' => bool,
     *    'created_at_lte' => string,
     *    'created_at_gte' => string,
     *    'validated_at_gte' => string,
     *    'latest_called_at_before' => string,
     *    'segmentation_criteria' => string,
     *    'segmented_for_partner_business_unit_id' => int,
     *    'sub_geo_region_name' => string,
     *    'is_anonymized' => bool,
     *    'has_lead_quote_fee' => bool,
     *    'desired_partner_company_size_id' => string,
     *    'segmented_for_lead_marketplace_partner_id' => int,
     *    'personal_title_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['phone'])) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($criteria['phone']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['client_decision_postponed'])) {
            $queryParams['client_decision_postponed'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_decision_postponed']);
        }
        // query params
        if (isset($criteria['all_quotes_published_before'])) {
            $queryParams['all_quotes_published_before'] = $this->apiClient->getSerializer()->toQueryValue($criteria['all_quotes_published_before']);
        }
        // query params
        if (isset($criteria['expires_within'])) {
            $queryParams['expires_within'] = $this->apiClient->getSerializer()->toQueryValue($criteria['expires_within']);
        }
        // query params
        if (isset($criteria['industry'])) {
            $queryParams['industry'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry']);
        }
        // query params
        if (isset($criteria['is_quotes_lead'])) {
            $queryParams['is_quotes_lead'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_quotes_lead']);
        }
        // query params
        if (isset($criteria['has_max_quotes'])) {
            $queryParams['has_max_quotes'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_max_quotes']);
        }
        // query params
        if (isset($criteria['has_accepted_quote'])) {
            $queryParams['has_accepted_quote'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_accepted_quote']);
        }
        // query params
        if (isset($criteria['has_rejected_quote'])) {
            $queryParams['has_rejected_quote'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_rejected_quote']);
        }
        // query params
        if (isset($criteria['no_quote_for_partner_id'])) {
            $queryParams['no_quote_for_partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['no_quote_for_partner_id']);
        }
        // query params
        if (isset($criteria['is_match_priority'])) {
            $queryParams['is_match_priority'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_match_priority']);
        }
        // query params
        if (isset($criteria['is_completed_call_priority'])) {
            $queryParams['is_completed_call_priority'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_completed_call_priority']);
        }
        // query params
        if (isset($criteria['geo_point'])) {
            $queryParams['geo_point'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_point']);
        }
        // query params
        if (isset($criteria['geo_rect'])) {
            $queryParams['geo_rect'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_rect']);
        }
        // query params
        if (isset($criteria['geo_distance'])) {
            $queryParams['geo_distance'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_distance']);
        }
        // query params
        if (isset($criteria['minimum_revenue_amount_excl_vat'])) {
            $queryParams['minimum_revenue_amount_excl_vat'] = $this->apiClient->getSerializer()->toQueryValue($criteria['minimum_revenue_amount_excl_vat']);
        }
        // query params
        if (isset($criteria['maximum_revenue_amount_excl_vat'])) {
            $queryParams['maximum_revenue_amount_excl_vat'] = $this->apiClient->getSerializer()->toQueryValue($criteria['maximum_revenue_amount_excl_vat']);
        }
        // query params
        if (isset($criteria['lead_category'])) {
            $queryParams['lead_category'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_category']);
        }
        // query params
        if (isset($criteria['validator_id'])) {
            $queryParams['validator_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['validator_id']);
        }
        // query params
        if (isset($criteria['is_given_up'])) {
            $queryParams['is_given_up'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_given_up']);
        }
        // query params
        if (isset($criteria['industry_id'])) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry_id']);
        }
        // query params
        if (isset($criteria['call_count_before_validation_lt'])) {
            $queryParams['call_count_before_validation_lt'] = $this->apiClient->getSerializer()->toQueryValue($criteria['call_count_before_validation_lt']);
        }
        // query params
        if (isset($criteria['is_validation_postponed'])) {
            $queryParams['is_validation_postponed'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_validation_postponed']);
        }
        // query params
        if (isset($criteria['created_at_lte'])) {
            $queryParams['created_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['created_at_lte']);
        }
        // query params
        if (isset($criteria['created_at_gte'])) {
            $queryParams['created_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['created_at_gte']);
        }
        // query params
        if (isset($criteria['validated_at_gte'])) {
            $queryParams['validated_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['validated_at_gte']);
        }
        // query params
        if (isset($criteria['latest_called_at_before'])) {
            $queryParams['latest_called_at_before'] = $this->apiClient->getSerializer()->toQueryValue($criteria['latest_called_at_before']);
        }
        // query params
        if (isset($criteria['segmentation_criteria'])) {
            $queryParams['segmentation_criteria'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmentation_criteria']);
        }
        // query params
        if (isset($criteria['segmented_for_partner_business_unit_id'])) {
            $queryParams['segmented_for_partner_business_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_partner_business_unit_id']);
        }
        // query params
        if (isset($criteria['sub_geo_region_name'])) {
            $queryParams['sub_geo_region_name'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sub_geo_region_name']);
        }
        // query params
        if (isset($criteria['is_anonymized'])) {
            $queryParams['is_anonymized'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_anonymized']);
        }
        // query params
        if (isset($criteria['has_lead_quote_fee'])) {
            $queryParams['has_lead_quote_fee'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_lead_quote_fee']);
        }
        // query params
        if (isset($criteria['desired_partner_company_size_id'])) {
            $queryParams['desired_partner_company_size_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['desired_partner_company_size_id']);
        }
        // query params
        if (isset($criteria['segmented_for_lead_marketplace_partner_id'])) {
            $queryParams['segmented_for_lead_marketplace_partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_lead_marketplace_partner_id']);
        }
        // query params
        if (isset($criteria['personal_title_id'])) {
            $queryParams['personal_title_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['personal_title_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResult',
                '/leads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsNotesCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadNoteResource $lead_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsNotesCreate($lead_id , $lead_note_resource)
    {
        list($response) = $this->leadsNotesCreateWithHttpInfo($lead_id, $lead_note_resource);
        return $response;
    }

    /**
     * Operation leadsNotesCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadNoteResource $lead_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsNotesCreateWithHttpInfo($lead_id , $lead_note_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_note_resource)) {
            $_tempBody = $lead_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotefeesCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadQuoteFeeResource $lead_quote_fee_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteFeeResource
     */
    public function leadsQuotefeesCreate($lead_id , $lead_quote_fee_resource)
    {
        list($response) = $this->leadsQuotefeesCreateWithHttpInfo($lead_id, $lead_quote_fee_resource);
        return $response;
    }

    /**
     * Operation leadsQuotefeesCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadQuoteFeeResource $lead_quote_fee_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteFeeResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotefeesCreateWithHttpInfo($lead_id , $lead_quote_fee_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotefees";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_fee_resource)) {
            $_tempBody = $lead_quote_fee_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteFeeResource',
                '/leads/{lead_id}/quotefees'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteFeeResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteFeeResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesActionsCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteActionResource $lead_quote_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesActionsCreate($lead_id,  $lead_quote_id , $lead_quote_action_resource)
    {
        list($response) = $this->leadsQuotesActionsCreateWithHttpInfo($lead_id, $lead_quote_id, $lead_quote_action_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteActionResource $lead_quote_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesActionsCreateWithHttpInfo($lead_id,  $lead_quote_id , $lead_quote_action_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_action_resource)) {
            $_tempBody = $lead_quote_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesCreate($lead_id , $lead_quote_resource)
    {
        list($response) = $this->leadsQuotesCreateWithHttpInfo($lead_id, $lead_quote_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesCreateWithHttpInfo($lead_id , $lead_quote_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_resource)) {
            $_tempBody = $lead_quote_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/{lead_id}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesDelete
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function leadsQuotesDelete($lead_id,  $lead_quote_id )
    {
        list($response) = $this->leadsQuotesDeleteWithHttpInfo($lead_id, $lead_quote_id);
        return $response;
    }

    /**
     * Operation leadsQuotesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesDeleteWithHttpInfo($lead_id,  $lead_quote_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}/quotes/{lead_quote_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesGet
     *
     * 
     *
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesGet($lead_quote_id )
    {
        list($response) = $this->leadsQuotesGetWithHttpInfo($lead_quote_id);
        return $response;
    }

    /**
     * Operation leadsQuotesGetWithHttpInfo
     *
     * 
     *
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesGetWithHttpInfo($lead_quote_id )
    {
        // parse inputs
        $resourcePath = "/leads/quotes/{lead_quote_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/quotes/{lead_quote_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesGet_0
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesGet_0($lead_id,  $lead_quote_id )
    {
        list($response) = $this->leadsQuotesGet_0WithHttpInfo($lead_id, $lead_quote_id);
        return $response;
    }

    /**
     * Operation leadsQuotesGet_0WithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesGet_0WithHttpInfo($lead_id,  $lead_quote_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'geo_code' => string,
     *    'is_accepted' => bool,
     *    'is_published' => bool,
     *    'is_rejected' => bool,
     *    'sort' => string,
     *    'lead_category_type' => string,
     *    'reservation_is_expired' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResult
     */
    public function leadsQuotesIndex($criteria = [])
    {
        list($response) = $this->leadsQuotesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsQuotesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'geo_code' => string,
     *    'is_accepted' => bool,
     *    'is_published' => bool,
     *    'is_rejected' => bool,
     *    'sort' => string,
     *    'lead_category_type' => string,
     *    'reservation_is_expired' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['lead_quote_id'])) {
            $queryParams['lead_quote_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_quote_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['is_accepted'])) {
            $queryParams['is_accepted'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_accepted']);
        }
        // query params
        if (isset($criteria['is_published'])) {
            $queryParams['is_published'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_published']);
        }
        // query params
        if (isset($criteria['is_rejected'])) {
            $queryParams['is_rejected'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_rejected']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['lead_category_type'])) {
            $queryParams['lead_category_type'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_category_type']);
        }
        // query params
        if (isset($criteria['reservation_is_expired'])) {
            $queryParams['reservation_is_expired'] = $this->apiClient->getSerializer()->toQueryValue($criteria['reservation_is_expired']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResult',
                '/leads/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesIndex_0
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'geo_code' => string,
     *    'is_accepted' => bool,
     *    'is_published' => bool,
     *    'is_rejected' => bool,
     *    'sort' => string,
     *    'lead_category_type' => string,
     *    'reservation_is_expired' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResult
     */
    public function leadsQuotesIndex_0($lead_id , $criteria = [])
    {
        list($response) = $this->leadsQuotesIndex_0WithHttpInfo($lead_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsQuotesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_quote_id' => string,
     *    'partner_id' => string,
     *    'geo_code' => string,
     *    'is_accepted' => bool,
     *    'is_published' => bool,
     *    'is_rejected' => bool,
     *    'sort' => string,
     *    'lead_category_type' => string,
     *    'reservation_is_expired' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesIndex_0WithHttpInfo($lead_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_quote_id'])) {
            $queryParams['lead_quote_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_quote_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['is_accepted'])) {
            $queryParams['is_accepted'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_accepted']);
        }
        // query params
        if (isset($criteria['is_published'])) {
            $queryParams['is_published'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_published']);
        }
        // query params
        if (isset($criteria['is_rejected'])) {
            $queryParams['is_rejected'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_rejected']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['lead_category_type'])) {
            $queryParams['lead_category_type'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_category_type']);
        }
        // query params
        if (isset($criteria['reservation_is_expired'])) {
            $queryParams['reservation_is_expired'] = $this->apiClient->getSerializer()->toQueryValue($criteria['reservation_is_expired']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResult',
                '/leads/{lead_id}/quotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesItemsCreate
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteItemResource $lead_quote_item_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteItemResource
     */
    public function leadsQuotesItemsCreate($lead_id,  $lead_quote_id , $lead_quote_item_resource)
    {
        list($response) = $this->leadsQuotesItemsCreateWithHttpInfo($lead_id, $lead_quote_id, $lead_quote_item_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesItemsCreateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteItemResource $lead_quote_item_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteItemResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesItemsCreateWithHttpInfo($lead_id,  $lead_quote_id , $lead_quote_item_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_item_resource)) {
            $_tempBody = $lead_quote_item_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteItemResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}/items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteItemResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteItemResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesItemsDelete
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_item_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function leadsQuotesItemsDelete($lead_id,  $lead_quote_id,  $lead_quote_item_id )
    {
        list($response) = $this->leadsQuotesItemsDeleteWithHttpInfo($lead_id, $lead_quote_id, $lead_quote_item_id);
        return $response;
    }

    /**
     * Operation leadsQuotesItemsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_item_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesItemsDeleteWithHttpInfo($lead_id,  $lead_quote_id,  $lead_quote_item_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/items/{lead_quote_item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_item_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_item_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/leads/{lead_id}/quotes/{lead_quote_id}/items/{lead_quote_item_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesItemsGet
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_item_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteItemResource
     */
    public function leadsQuotesItemsGet($lead_id,  $lead_quote_id,  $lead_quote_item_id )
    {
        list($response) = $this->leadsQuotesItemsGetWithHttpInfo($lead_id, $lead_quote_id, $lead_quote_item_id);
        return $response;
    }

    /**
     * Operation leadsQuotesItemsGetWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_item_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteItemResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesItemsGetWithHttpInfo($lead_id,  $lead_quote_id,  $lead_quote_item_id )
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/items/{lead_quote_item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_item_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_item_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteItemResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}/items/{lead_quote_item_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteItemResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteItemResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesItemsIndex
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteItemResult
     */
    public function leadsQuotesItemsIndex($lead_id,  $lead_quote_id , $criteria = [])
    {
        list($response) = $this->leadsQuotesItemsIndexWithHttpInfo($lead_id, $lead_quote_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsQuotesItemsIndexWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteItemResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesItemsIndexWithHttpInfo($lead_id,  $lead_quote_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteItemResult',
                '/leads/{lead_id}/quotes/{lead_quote_id}/items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteItemResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteItemResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesItemsUpdate
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_item_id 
     * @param \Ageras\Api\LeadQuoteItemResource $lead_quote_item_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteItemResource
     */
    public function leadsQuotesItemsUpdate($lead_id,  $lead_quote_id,  $lead_quote_item_id , $lead_quote_item_resource)
    {
        list($response) = $this->leadsQuotesItemsUpdateWithHttpInfo($lead_id, $lead_quote_id, $lead_quote_item_id, $lead_quote_item_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesItemsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_item_id 
     * @param \Ageras\Api\LeadQuoteItemResource $lead_quote_item_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteItemResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesItemsUpdateWithHttpInfo($lead_id,  $lead_quote_id,  $lead_quote_item_id , $lead_quote_item_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/items/{lead_quote_item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_item_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_item_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_item_resource)) {
            $_tempBody = $lead_quote_item_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteItemResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}/items/{lead_quote_item_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteItemResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteItemResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesLoansUpdate
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_loan_id 
     * @param \Ageras\Api\LeadQuoteLoanResource $lead_quote_loan_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteLoanResource
     */
    public function leadsQuotesLoansUpdate($lead_id,  $lead_quote_id,  $lead_quote_loan_id , $lead_quote_loan_resource)
    {
        list($response) = $this->leadsQuotesLoansUpdateWithHttpInfo($lead_id, $lead_quote_id, $lead_quote_loan_id, $lead_quote_loan_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesLoansUpdateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param string $lead_quote_loan_id 
     * @param \Ageras\Api\LeadQuoteLoanResource $lead_quote_loan_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteLoanResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesLoansUpdateWithHttpInfo($lead_id,  $lead_quote_id,  $lead_quote_loan_id , $lead_quote_loan_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}/loans/{lead_quote_loan_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_loan_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_loan_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_loan_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_loan_resource)) {
            $_tempBody = $lead_quote_loan_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteLoanResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}/loans/{lead_quote_loan_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteLoanResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteLoanResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesProgressstepsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'title' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteProgressResult
     */
    public function leadsQuotesProgressstepsIndex($criteria = [])
    {
        list($response) = $this->leadsQuotesProgressstepsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsQuotesProgressstepsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'title' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteProgressResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesProgressstepsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/quotes/progresssteps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['title'])) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($criteria['title']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteProgressResult',
                '/leads/quotes/progresssteps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteProgressResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteProgressResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesUpdate
     *
     * 
     *
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesUpdate($lead_quote_id , $lead_quote_resource)
    {
        list($response) = $this->leadsQuotesUpdateWithHttpInfo($lead_quote_id, $lead_quote_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesUpdateWithHttpInfo($lead_quote_id , $lead_quote_resource)
    {
        // parse inputs
        $resourcePath = "/leads/quotes/{lead_quote_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_resource)) {
            $_tempBody = $lead_quote_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/quotes/{lead_quote_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsQuotesUpdate_0
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadQuoteResource
     */
    public function leadsQuotesUpdate_0($lead_id,  $lead_quote_id , $lead_quote_resource)
    {
        list($response) = $this->leadsQuotesUpdate_0WithHttpInfo($lead_id, $lead_quote_id, $lead_quote_resource);
        return $response;
    }

    /**
     * Operation leadsQuotesUpdate_0WithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param string $lead_quote_id 
     * @param \Ageras\Api\LeadQuoteResource $lead_quote_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadQuoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsQuotesUpdate_0WithHttpInfo($lead_id,  $lead_quote_id , $lead_quote_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/quotes/{lead_quote_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_quote_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_quote_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_quote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_quote_resource)) {
            $_tempBody = $lead_quote_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadQuoteResource',
                '/leads/{lead_id}/quotes/{lead_quote_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadQuoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadQuoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsSegmentationsubgeoregionsIndex
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\SegmentationSubGeoRegionResult
     */
    public function leadsSegmentationsubgeoregionsIndex($lead_id , $criteria = [])
    {
        list($response) = $this->leadsSegmentationsubgeoregionsIndexWithHttpInfo($lead_id, $criteria);
        return $response;
    }

    /**
     * Operation leadsSegmentationsubgeoregionsIndexWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\SegmentationSubGeoRegionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsSegmentationsubgeoregionsIndexWithHttpInfo($lead_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/segmentationsubgeoregions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SegmentationSubGeoRegionResult',
                '/leads/{lead_id}/segmentationsubgeoregions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SegmentationSubGeoRegionResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SegmentationSubGeoRegionResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsSegmentationsubgeoregionsUpdate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\SegmentationSubGeoRegionsResource $segmentation_sub_geo_regions_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\SegmentationSubGeoRegionsResource
     */
    public function leadsSegmentationsubgeoregionsUpdate($lead_id , $segmentation_sub_geo_regions_resource)
    {
        list($response) = $this->leadsSegmentationsubgeoregionsUpdateWithHttpInfo($lead_id, $segmentation_sub_geo_regions_resource);
        return $response;
    }

    /**
     * Operation leadsSegmentationsubgeoregionsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\SegmentationSubGeoRegionsResource $segmentation_sub_geo_regions_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\SegmentationSubGeoRegionsResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsSegmentationsubgeoregionsUpdateWithHttpInfo($lead_id , $segmentation_sub_geo_regions_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}/segmentationsubgeoregions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($segmentation_sub_geo_regions_resource)) {
            $_tempBody = $segmentation_sub_geo_regions_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SegmentationSubGeoRegionsResource',
                '/leads/{lead_id}/segmentationsubgeoregions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SegmentationSubGeoRegionsResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SegmentationSubGeoRegionsResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsTypesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'type_id' => string,
     *    'title' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'is_archived' => bool,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadTypeResult
     */
    public function leadsTypesIndex($criteria = [])
    {
        list($response) = $this->leadsTypesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation leadsTypesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'type_id' => string,
     *    'title' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'is_archived' => bool,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadTypeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsTypesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/leads/types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['type_id'])) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['type_id']);
        }
        // query params
        if (isset($criteria['title'])) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($criteria['title']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['is_archived'])) {
            $queryParams['is_archived'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_archived']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadTypeResult',
                '/leads/types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadTypeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadTypeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leadsUpdate
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadResource $lead_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadResource
     */
    public function leadsUpdate($lead_id , $lead_resource)
    {
        list($response) = $this->leadsUpdateWithHttpInfo($lead_id, $lead_resource);
        return $response;
    }

    /**
     * Operation leadsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $lead_id 
     * @param \Ageras\Api\LeadResource $lead_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function leadsUpdateWithHttpInfo($lead_id , $lead_resource)
    {
        // parse inputs
        $resourcePath = "/leads/{lead_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_resource)) {
            $_tempBody = $lead_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadResource',
                '/leads/{lead_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
