<?php
/**
 * CheckoutPaymentEventResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api\Model;

use \ArrayAccess;

/**
 * CheckoutPaymentEventResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CheckoutPaymentEventResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutPaymentEventResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'identifier' => 'string',
        'callback' => 'string',
        'provider' => '\Ageras\Api\Model\CheckoutPaymentProviderResource',
        'fee' => '\Ageras\Api\Model\AmountResource',
        'vat_amount' => '\Ageras\Api\Model\AmountResource',
        'price_incl_vat' => '\Ageras\Api\Model\AmountResource',
        'price_excl_vat' => '\Ageras\Api\Model\AmountResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'identifier' => 'identifier',
        'callback' => 'callback',
        'provider' => 'provider',
        'fee' => 'fee',
        'vat_amount' => 'vat_amount',
        'price_incl_vat' => 'price_incl_vat',
        'price_excl_vat' => 'price_excl_vat'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'identifier' => 'setIdentifier',
        'callback' => 'setCallback',
        'provider' => 'setProvider',
        'fee' => 'setFee',
        'vat_amount' => 'setVatAmount',
        'price_incl_vat' => 'setPriceInclVat',
        'price_excl_vat' => 'setPriceExclVat'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'identifier' => 'getIdentifier',
        'callback' => 'getCallback',
        'provider' => 'getProvider',
        'fee' => 'getFee',
        'vat_amount' => 'getVatAmount',
        'price_incl_vat' => 'getPriceInclVat',
        'price_excl_vat' => 'getPriceExclVat'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['callback'] = isset($data['callback']) ? $data['callback'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
        $this->container['price_incl_vat'] = isset($data['price_incl_vat']) ? $data['price_incl_vat'] : null;
        $this->container['price_excl_vat'] = isset($data['price_excl_vat']) ? $data['price_excl_vat'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier payment event identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets callback
     * @return string
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     * @param string $callback callback for
     * @return $this
     */
    public function setCallback($callback)
    {
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets provider
     * @return \Ageras\Api\Model\CheckoutPaymentProviderResource
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param \Ageras\Api\Model\CheckoutPaymentProviderResource $provider
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets fee
     * @return \Ageras\Api\Model\AmountResource
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     * @param \Ageras\Api\Model\AmountResource $fee
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets vat_amount
     * @return \Ageras\Api\Model\AmountResource
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     * @param \Ageras\Api\Model\AmountResource $vat_amount
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets price_incl_vat
     * @return \Ageras\Api\Model\AmountResource
     */
    public function getPriceInclVat()
    {
        return $this->container['price_incl_vat'];
    }

    /**
     * Sets price_incl_vat
     * @param \Ageras\Api\Model\AmountResource $price_incl_vat
     * @return $this
     */
    public function setPriceInclVat($price_incl_vat)
    {
        $this->container['price_incl_vat'] = $price_incl_vat;

        return $this;
    }

    /**
     * Gets price_excl_vat
     * @return \Ageras\Api\Model\AmountResource
     */
    public function getPriceExclVat()
    {
        return $this->container['price_excl_vat'];
    }

    /**
     * Sets price_excl_vat
     * @param \Ageras\Api\Model\AmountResource $price_excl_vat
     * @return $this
     */
    public function setPriceExclVat($price_excl_vat)
    {
        $this->container['price_excl_vat'] = $price_excl_vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


