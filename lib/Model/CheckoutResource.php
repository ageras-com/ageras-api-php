<?php
/**
 * CheckoutResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api\Model;

use \ArrayAccess;

/**
 * CheckoutResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CheckoutResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'geo_code' => 'string',
        'status' => 'string',
        'scope' => 'string',
        'validation_summary' => 'string[]',
        'payments' => '\Ageras\Api\Model\CheckoutPaymentResource',
        'creator' => '\Ageras\Api\Model\CheckoutConsumerResource',
        'buyer' => '\Ageras\Api\Model\CheckoutConsumerResource',
        'lines' => '\Ageras\Api\Model\CheckoutLineResource[]',
        'total_vat_amount' => '\Ageras\Api\Model\AmountResource',
        'total_price_incl_vat' => '\Ageras\Api\Model\AmountResource',
        'total_price_excl_vat' => '\Ageras\Api\Model\AmountResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'geo_code' => 'geo_code',
        'status' => 'status',
        'scope' => 'scope',
        'validation_summary' => 'validation_summary',
        'payments' => 'payments',
        'creator' => 'creator',
        'buyer' => 'buyer',
        'lines' => 'lines',
        'total_vat_amount' => 'total_vat_amount',
        'total_price_incl_vat' => 'total_price_incl_vat',
        'total_price_excl_vat' => 'total_price_excl_vat'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'geo_code' => 'setGeoCode',
        'status' => 'setStatus',
        'scope' => 'setScope',
        'validation_summary' => 'setValidationSummary',
        'payments' => 'setPayments',
        'creator' => 'setCreator',
        'buyer' => 'setBuyer',
        'lines' => 'setLines',
        'total_vat_amount' => 'setTotalVatAmount',
        'total_price_incl_vat' => 'setTotalPriceInclVat',
        'total_price_excl_vat' => 'setTotalPriceExclVat'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'geo_code' => 'getGeoCode',
        'status' => 'getStatus',
        'scope' => 'getScope',
        'validation_summary' => 'getValidationSummary',
        'payments' => 'getPayments',
        'creator' => 'getCreator',
        'buyer' => 'getBuyer',
        'lines' => 'getLines',
        'total_vat_amount' => 'getTotalVatAmount',
        'total_price_incl_vat' => 'getTotalPriceInclVat',
        'total_price_excl_vat' => 'getTotalPriceExclVat'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_UNKNOWN = 'unknown';
    const STATUS_CREATED = 'created';
    const STATUS_INVALID = 'invalid';
    const STATUS_VALID = 'valid';
    const STATUS_IN_PROGRESS = 'in_progress';
    const STATUS_PAYMENT_IN_PROGRESS = 'payment_in_progress';
    const STATUS_PAID = 'paid';
    const STATUS_FAILED = 'failed';
    const STATUS_COMPLETED = 'completed';
    const VALIDATION_SUMMARY_UNKNOWN = 'unknown';
    const VALIDATION_SUMMARY_MISSING_BUYER = 'missing_buyer';
    const VALIDATION_SUMMARY_NO_CHECKOUT_LINES = 'no_checkout_lines';
    const VALIDATION_SUMMARY_INVALID_ITEM = 'invalid_item';
    const VALIDATION_SUMMARY_INVALID_QUANTITY = 'invalid_quantity';
    const VALIDATION_SUMMARY_ITEM_NOT_IN_STOCK = 'item_not_in_stock';
    const VALIDATION_SUMMARY_ITEM_ALREADY_PURCHASED = 'item_already_purchased';
    const VALIDATION_SUMMARY_INVALID_CHAINED_ITEM = 'invalid_chained_item';
    const VALIDATION_SUMMARY_MORE_THAN_ONE_SELLER = 'more_than_one_seller';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_CREATED,
            self::STATUS_INVALID,
            self::STATUS_VALID,
            self::STATUS_IN_PROGRESS,
            self::STATUS_PAYMENT_IN_PROGRESS,
            self::STATUS_PAID,
            self::STATUS_FAILED,
            self::STATUS_COMPLETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getValidationSummaryAllowableValues()
    {
        return [
            self::VALIDATION_SUMMARY_UNKNOWN,
            self::VALIDATION_SUMMARY_MISSING_BUYER,
            self::VALIDATION_SUMMARY_NO_CHECKOUT_LINES,
            self::VALIDATION_SUMMARY_INVALID_ITEM,
            self::VALIDATION_SUMMARY_INVALID_QUANTITY,
            self::VALIDATION_SUMMARY_ITEM_NOT_IN_STOCK,
            self::VALIDATION_SUMMARY_ITEM_ALREADY_PURCHASED,
            self::VALIDATION_SUMMARY_INVALID_CHAINED_ITEM,
            self::VALIDATION_SUMMARY_MORE_THAN_ONE_SELLER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['geo_code'] = isset($data['geo_code']) ? $data['geo_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'unknown';
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['validation_summary'] = isset($data['validation_summary']) ? $data['validation_summary'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['total_vat_amount'] = isset($data['total_vat_amount']) ? $data['total_vat_amount'] : null;
        $this->container['total_price_incl_vat'] = isset($data['total_price_incl_vat']) ? $data['total_price_incl_vat'] : null;
        $this->container['total_price_excl_vat'] = isset($data['total_price_excl_vat']) ? $data['total_price_excl_vat'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["unknown", "created", "invalid", "valid", "in_progress", "payment_in_progress", "paid", "failed", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'unknown', 'created', 'invalid', 'valid', 'in_progress', 'payment_in_progress', 'paid', 'failed', 'completed'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["unknown", "created", "invalid", "valid", "in_progress", "payment_in_progress", "paid", "failed", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Client id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets geo_code
     * @return string
     */
    public function getGeoCode()
    {
        return $this->container['geo_code'];
    }

    /**
     * Sets geo_code
     * @param string $geo_code
     * @return $this
     */
    public function setGeoCode($geo_code)
    {
        $this->container['geo_code'] = $geo_code;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('unknown', 'created', 'invalid', 'valid', 'in_progress', 'payment_in_progress', 'paid', 'failed', 'completed');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'unknown', 'created', 'invalid', 'valid', 'in_progress', 'payment_in_progress', 'paid', 'failed', 'completed'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets scope
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     * @param string $scope
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets validation_summary
     * @return string[]
     */
    public function getValidationSummary()
    {
        return $this->container['validation_summary'];
    }

    /**
     * Sets validation_summary
     * @param string[] $validation_summary
     * @return $this
     */
    public function setValidationSummary($validation_summary)
    {
        $allowed_values = array('unknown', 'missing_buyer', 'no_checkout_lines', 'invalid_item', 'invalid_quantity', 'item_not_in_stock', 'item_already_purchased', 'invalid_chained_item', 'more_than_one_seller');
        if (!is_null($validation_summary) && (array_diff($validation_summary, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'validation_summary', must be one of 'unknown', 'missing_buyer', 'no_checkout_lines', 'invalid_item', 'invalid_quantity', 'item_not_in_stock', 'item_already_purchased', 'invalid_chained_item', 'more_than_one_seller'");
        }
        $this->container['validation_summary'] = $validation_summary;

        return $this;
    }

    /**
     * Gets payments
     * @return \Ageras\Api\Model\CheckoutPaymentResource
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     * @param \Ageras\Api\Model\CheckoutPaymentResource $payments
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets creator
     * @return \Ageras\Api\Model\CheckoutConsumerResource
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     * @param \Ageras\Api\Model\CheckoutConsumerResource $creator
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets buyer
     * @return \Ageras\Api\Model\CheckoutConsumerResource
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     * @param \Ageras\Api\Model\CheckoutConsumerResource $buyer
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets lines
     * @return \Ageras\Api\Model\CheckoutLineResource[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \Ageras\Api\Model\CheckoutLineResource[] $lines
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets total_vat_amount
     * @return \Ageras\Api\Model\AmountResource
     */
    public function getTotalVatAmount()
    {
        return $this->container['total_vat_amount'];
    }

    /**
     * Sets total_vat_amount
     * @param \Ageras\Api\Model\AmountResource $total_vat_amount
     * @return $this
     */
    public function setTotalVatAmount($total_vat_amount)
    {
        $this->container['total_vat_amount'] = $total_vat_amount;

        return $this;
    }

    /**
     * Gets total_price_incl_vat
     * @return \Ageras\Api\Model\AmountResource
     */
    public function getTotalPriceInclVat()
    {
        return $this->container['total_price_incl_vat'];
    }

    /**
     * Sets total_price_incl_vat
     * @param \Ageras\Api\Model\AmountResource $total_price_incl_vat
     * @return $this
     */
    public function setTotalPriceInclVat($total_price_incl_vat)
    {
        $this->container['total_price_incl_vat'] = $total_price_incl_vat;

        return $this;
    }

    /**
     * Gets total_price_excl_vat
     * @return \Ageras\Api\Model\AmountResource
     */
    public function getTotalPriceExclVat()
    {
        return $this->container['total_price_excl_vat'];
    }

    /**
     * Sets total_price_excl_vat
     * @param \Ageras\Api\Model\AmountResource $total_price_excl_vat
     * @return $this
     */
    public function setTotalPriceExclVat($total_price_excl_vat)
    {
        $this->container['total_price_excl_vat'] = $total_price_excl_vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


