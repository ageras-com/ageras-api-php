<?php
/**
 * LeadRequirementsResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api\Model;

use \ArrayAccess;

/**
 * LeadRequirementsResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LeadRequirementsResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LeadRequirementsResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'local_partner' => 'string',
        'contact_available_at' => 'string',
        'contact_by_phone' => 'string',
        'contact_by_email' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'local_partner' => 'local_partner',
        'contact_available_at' => 'contact_available_at',
        'contact_by_phone' => 'contact_by_phone',
        'contact_by_email' => 'contact_by_email'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'local_partner' => 'setLocalPartner',
        'contact_available_at' => 'setContactAvailableAt',
        'contact_by_phone' => 'setContactByPhone',
        'contact_by_email' => 'setContactByEmail'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'local_partner' => 'getLocalPartner',
        'contact_available_at' => 'getContactAvailableAt',
        'contact_by_phone' => 'getContactByPhone',
        'contact_by_email' => 'getContactByEmail'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['local_partner'] = isset($data['local_partner']) ? $data['local_partner'] : null;
        $this->container['contact_available_at'] = isset($data['contact_available_at']) ? $data['contact_available_at'] : null;
        $this->container['contact_by_phone'] = isset($data['contact_by_phone']) ? $data['contact_by_phone'] : null;
        $this->container['contact_by_email'] = isset($data['contact_by_email']) ? $data['contact_by_email'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets local_partner
     * @return string
     */
    public function getLocalPartner()
    {
        return $this->container['local_partner'];
    }

    /**
     * Sets local_partner
     * @param string $local_partner Was it a local partner?
     * @return $this
     */
    public function setLocalPartner($local_partner)
    {
        $this->container['local_partner'] = $local_partner;

        return $this;
    }

    /**
     * Gets contact_available_at
     * @return string
     */
    public function getContactAvailableAt()
    {
        return $this->container['contact_available_at'];
    }

    /**
     * Sets contact_available_at
     * @param string $contact_available_at When can the given Lead be contacted.
     * @return $this
     */
    public function setContactAvailableAt($contact_available_at)
    {
        $this->container['contact_available_at'] = $contact_available_at;

        return $this;
    }

    /**
     * Gets contact_by_phone
     * @return string
     */
    public function getContactByPhone()
    {
        return $this->container['contact_by_phone'];
    }

    /**
     * Sets contact_by_phone
     * @param string $contact_by_phone Should the lead be contacted by phone?
     * @return $this
     */
    public function setContactByPhone($contact_by_phone)
    {
        $this->container['contact_by_phone'] = $contact_by_phone;

        return $this;
    }

    /**
     * Gets contact_by_email
     * @return string
     */
    public function getContactByEmail()
    {
        return $this->container['contact_by_email'];
    }

    /**
     * Sets contact_by_email
     * @param string $contact_by_email Should the lead the contacted by email?
     * @return $this
     */
    public function setContactByEmail($contact_by_email)
    {
        $this->container['contact_by_email'] = $contact_by_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


