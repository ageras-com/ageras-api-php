<?php
/**
 * LeadResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LeadResource Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LeadResource implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LeadResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'validated_at' => 'string',
        'status' => 'string',
        'open_for_offers' => 'bool',
        'title' => 'string',
        'description' => 'string',
        'customer' => '\Swagger\Client\Model\LeadCustomerResource',
        'punch_price' => 'int',
        'geo' => '\Swagger\Client\Model\LeadGeoResource',
        'attributes' => '\Swagger\Client\Model\LeadAttributeResource[]',
        'industries' => '\Swagger\Client\Model\LeadIndustryPairResource',
        'meeting' => '\Swagger\Client\Model\LeadMeetingResource',
        'accepted' => '\Swagger\Client\Model\LeadAcceptedResource',
        'offers_info' => '\Swagger\Client\Model\LeadOfferInfoResource',
        'affiliate_campaign' => '\Swagger\Client\Model\AffiliateCampaignResource'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'validated_at' => 'validated_at',
        'status' => 'status',
        'open_for_offers' => 'open_for_offers',
        'title' => 'title',
        'description' => 'description',
        'customer' => 'customer',
        'punch_price' => 'punch_price',
        'geo' => 'geo',
        'attributes' => 'attributes',
        'industries' => 'industries',
        'meeting' => 'meeting',
        'accepted' => 'accepted',
        'offers_info' => 'offers_info',
        'affiliate_campaign' => 'affiliate_campaign'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'validated_at' => 'setValidatedAt',
        'status' => 'setStatus',
        'open_for_offers' => 'setOpenForOffers',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'customer' => 'setCustomer',
        'punch_price' => 'setPunchPrice',
        'geo' => 'setGeo',
        'attributes' => 'setAttributes',
        'industries' => 'setIndustries',
        'meeting' => 'setMeeting',
        'accepted' => 'setAccepted',
        'offers_info' => 'setOffersInfo',
        'affiliate_campaign' => 'setAffiliateCampaign'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'validated_at' => 'getValidatedAt',
        'status' => 'getStatus',
        'open_for_offers' => 'getOpenForOffers',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'customer' => 'getCustomer',
        'punch_price' => 'getPunchPrice',
        'geo' => 'getGeo',
        'attributes' => 'getAttributes',
        'industries' => 'getIndustries',
        'meeting' => 'getMeeting',
        'accepted' => 'getAccepted',
        'offers_info' => 'getOffersInfo',
        'affiliate_campaign' => 'getAffiliateCampaign'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_UNKNOWN = 'unknown';
    const STATUS_VALIDATED = 'validated';
    const STATUS_INVALID = 'invalid';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_VALIDATED,
            self::STATUS_INVALID,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['validated_at'] = isset($data['validated_at']) ? $data['validated_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'unknown';
        $this->container['open_for_offers'] = isset($data['open_for_offers']) ? $data['open_for_offers'] : false;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['punch_price'] = isset($data['punch_price']) ? $data['punch_price'] : null;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['industries'] = isset($data['industries']) ? $data['industries'] : null;
        $this->container['meeting'] = isset($data['meeting']) ? $data['meeting'] : null;
        $this->container['accepted'] = isset($data['accepted']) ? $data['accepted'] : null;
        $this->container['offers_info'] = isset($data['offers_info']) ? $data['offers_info'] : null;
        $this->container['affiliate_campaign'] = isset($data['affiliate_campaign']) ? $data['affiliate_campaign'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("unknown", "validated", "invalid");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("unknown", "validated", "invalid");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Id for the Lead.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Date the Lead was created.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at Date the Lead was updated.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets validated_at
     * @return string
     */
    public function getValidatedAt()
    {
        return $this->container['validated_at'];
    }

    /**
     * Sets validated_at
     * @param string $validated_at Date the Lead was Updated.
     * @return $this
     */
    public function setValidatedAt($validated_at)
    {
        $this->container['validated_at'] = $validated_at;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Current Validation Status of the Lead.
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('unknown', 'validated', 'invalid');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'unknown', 'validated', 'invalid'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets open_for_offers
     * @return bool
     */
    public function getOpenForOffers()
    {
        return $this->container['open_for_offers'];
    }

    /**
     * Sets open_for_offers
     * @param bool $open_for_offers Is the current lead open for offers.
     * @return $this
     */
    public function setOpenForOffers($open_for_offers)
    {
        $this->container['open_for_offers'] = $open_for_offers;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Title for the Lead.
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description A description of the given Lead.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets customer
     * @return \Swagger\Client\Model\LeadCustomerResource
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param \Swagger\Client\Model\LeadCustomerResource $customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets punch_price
     * @return int
     */
    public function getPunchPrice()
    {
        return $this->container['punch_price'];
    }

    /**
     * Sets punch_price
     * @param int $punch_price The price for the given lead.
     * @return $this
     */
    public function setPunchPrice($punch_price)
    {
        $this->container['punch_price'] = $punch_price;

        return $this;
    }

    /**
     * Gets geo
     * @return \Swagger\Client\Model\LeadGeoResource
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     * @param \Swagger\Client\Model\LeadGeoResource $geo
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets attributes
     * @return \Swagger\Client\Model\LeadAttributeResource[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param \Swagger\Client\Model\LeadAttributeResource[] $attributes Attributes for the lead.
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets industries
     * @return \Swagger\Client\Model\LeadIndustryPairResource
     */
    public function getIndustries()
    {
        return $this->container['industries'];
    }

    /**
     * Sets industries
     * @param \Swagger\Client\Model\LeadIndustryPairResource $industries
     * @return $this
     */
    public function setIndustries($industries)
    {
        $this->container['industries'] = $industries;

        return $this;
    }

    /**
     * Gets meeting
     * @return \Swagger\Client\Model\LeadMeetingResource
     */
    public function getMeeting()
    {
        return $this->container['meeting'];
    }

    /**
     * Sets meeting
     * @param \Swagger\Client\Model\LeadMeetingResource $meeting
     * @return $this
     */
    public function setMeeting($meeting)
    {
        $this->container['meeting'] = $meeting;

        return $this;
    }

    /**
     * Gets accepted
     * @return \Swagger\Client\Model\LeadAcceptedResource
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     * @param \Swagger\Client\Model\LeadAcceptedResource $accepted
     * @return $this
     */
    public function setAccepted($accepted)
    {
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets offers_info
     * @return \Swagger\Client\Model\LeadOfferInfoResource
     */
    public function getOffersInfo()
    {
        return $this->container['offers_info'];
    }

    /**
     * Sets offers_info
     * @param \Swagger\Client\Model\LeadOfferInfoResource $offers_info
     * @return $this
     */
    public function setOffersInfo($offers_info)
    {
        $this->container['offers_info'] = $offers_info;

        return $this;
    }

    /**
     * Gets affiliate_campaign
     * @return \Swagger\Client\Model\AffiliateCampaignResource
     */
    public function getAffiliateCampaign()
    {
        return $this->container['affiliate_campaign'];
    }

    /**
     * Sets affiliate_campaign
     * @param \Swagger\Client\Model\AffiliateCampaignResource $affiliate_campaign
     * @return $this
     */
    public function setAffiliateCampaign($affiliate_campaign)
    {
        $this->container['affiliate_campaign'] = $affiliate_campaign;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


