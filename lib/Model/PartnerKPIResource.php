<?php
/**
 * PartnerKPIResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PartnerKPIResource Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerKPIResource implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerKPIResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'punches_monthly' => 'int',
        'punches_use_speed' => 'float',
        'last_login' => 'string',
        'last_lead_bought' => 'string',
        'revenue_6months' => '\Swagger\Client\Model\AmountResource',
        'last_invoice' => 'string',
        'avg_punch_price_6months' => '\Swagger\Client\Model\AmountResource',
        'avg_due_days_6months' => 'float',
        'last_coupon_size' => 'int',
        'punches_left' => 'int',
        'punches_spent_6months' => 'int',
        'punches_bought_6months' => 'int',
        'golden_ratio_6months' => 'float',
        'total_revenue' => '\Swagger\Client\Model\AmountResource',
        'success_rate' => 'float',
        'last_sale' => '\Swagger\Client\Model\AmountResource',
        'last_sale_type' => 'string',
        'revenue_current_month' => '\Swagger\Client\Model\AmountResource'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'punches_monthly' => 'punches_monthly',
        'punches_use_speed' => 'punches_use_speed',
        'last_login' => 'last_login',
        'last_lead_bought' => 'last_lead_bought',
        'revenue_6months' => 'revenue_6months',
        'last_invoice' => 'last_invoice',
        'avg_punch_price_6months' => 'avg_punch_price_6months',
        'avg_due_days_6months' => 'avg_due_days_6months',
        'last_coupon_size' => 'last_coupon_size',
        'punches_left' => 'punches_left',
        'punches_spent_6months' => 'punches_spent_6months',
        'punches_bought_6months' => 'punches_bought_6months',
        'golden_ratio_6months' => 'golden_ratio_6months',
        'total_revenue' => 'total_revenue',
        'success_rate' => 'success_rate',
        'last_sale' => 'last_sale',
        'last_sale_type' => 'last_sale_type',
        'revenue_current_month' => 'revenue_current_month'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'punches_monthly' => 'setPunchesMonthly',
        'punches_use_speed' => 'setPunchesUseSpeed',
        'last_login' => 'setLastLogin',
        'last_lead_bought' => 'setLastLeadBought',
        'revenue_6months' => 'setRevenue6months',
        'last_invoice' => 'setLastInvoice',
        'avg_punch_price_6months' => 'setAvgPunchPrice6months',
        'avg_due_days_6months' => 'setAvgDueDays6months',
        'last_coupon_size' => 'setLastCouponSize',
        'punches_left' => 'setPunchesLeft',
        'punches_spent_6months' => 'setPunchesSpent6months',
        'punches_bought_6months' => 'setPunchesBought6months',
        'golden_ratio_6months' => 'setGoldenRatio6months',
        'total_revenue' => 'setTotalRevenue',
        'success_rate' => 'setSuccessRate',
        'last_sale' => 'setLastSale',
        'last_sale_type' => 'setLastSaleType',
        'revenue_current_month' => 'setRevenueCurrentMonth'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'punches_monthly' => 'getPunchesMonthly',
        'punches_use_speed' => 'getPunchesUseSpeed',
        'last_login' => 'getLastLogin',
        'last_lead_bought' => 'getLastLeadBought',
        'revenue_6months' => 'getRevenue6months',
        'last_invoice' => 'getLastInvoice',
        'avg_punch_price_6months' => 'getAvgPunchPrice6months',
        'avg_due_days_6months' => 'getAvgDueDays6months',
        'last_coupon_size' => 'getLastCouponSize',
        'punches_left' => 'getPunchesLeft',
        'punches_spent_6months' => 'getPunchesSpent6months',
        'punches_bought_6months' => 'getPunchesBought6months',
        'golden_ratio_6months' => 'getGoldenRatio6months',
        'total_revenue' => 'getTotalRevenue',
        'success_rate' => 'getSuccessRate',
        'last_sale' => 'getLastSale',
        'last_sale_type' => 'getLastSaleType',
        'revenue_current_month' => 'getRevenueCurrentMonth'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['punches_monthly'] = isset($data['punches_monthly']) ? $data['punches_monthly'] : null;
        $this->container['punches_use_speed'] = isset($data['punches_use_speed']) ? $data['punches_use_speed'] : null;
        $this->container['last_login'] = isset($data['last_login']) ? $data['last_login'] : null;
        $this->container['last_lead_bought'] = isset($data['last_lead_bought']) ? $data['last_lead_bought'] : null;
        $this->container['revenue_6months'] = isset($data['revenue_6months']) ? $data['revenue_6months'] : null;
        $this->container['last_invoice'] = isset($data['last_invoice']) ? $data['last_invoice'] : null;
        $this->container['avg_punch_price_6months'] = isset($data['avg_punch_price_6months']) ? $data['avg_punch_price_6months'] : null;
        $this->container['avg_due_days_6months'] = isset($data['avg_due_days_6months']) ? $data['avg_due_days_6months'] : null;
        $this->container['last_coupon_size'] = isset($data['last_coupon_size']) ? $data['last_coupon_size'] : null;
        $this->container['punches_left'] = isset($data['punches_left']) ? $data['punches_left'] : null;
        $this->container['punches_spent_6months'] = isset($data['punches_spent_6months']) ? $data['punches_spent_6months'] : null;
        $this->container['punches_bought_6months'] = isset($data['punches_bought_6months']) ? $data['punches_bought_6months'] : null;
        $this->container['golden_ratio_6months'] = isset($data['golden_ratio_6months']) ? $data['golden_ratio_6months'] : null;
        $this->container['total_revenue'] = isset($data['total_revenue']) ? $data['total_revenue'] : null;
        $this->container['success_rate'] = isset($data['success_rate']) ? $data['success_rate'] : null;
        $this->container['last_sale'] = isset($data['last_sale']) ? $data['last_sale'] : null;
        $this->container['last_sale_type'] = isset($data['last_sale_type']) ? $data['last_sale_type'] : null;
        $this->container['revenue_current_month'] = isset($data['revenue_current_month']) ? $data['revenue_current_month'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets punches_monthly
     * @return int
     */
    public function getPunchesMonthly()
    {
        return $this->container['punches_monthly'];
    }

    /**
     * Sets punches_monthly
     * @param int $punches_monthly
     * @return $this
     */
    public function setPunchesMonthly($punches_monthly)
    {
        $this->container['punches_monthly'] = $punches_monthly;

        return $this;
    }

    /**
     * Gets punches_use_speed
     * @return float
     */
    public function getPunchesUseSpeed()
    {
        return $this->container['punches_use_speed'];
    }

    /**
     * Sets punches_use_speed
     * @param float $punches_use_speed
     * @return $this
     */
    public function setPunchesUseSpeed($punches_use_speed)
    {
        $this->container['punches_use_speed'] = $punches_use_speed;

        return $this;
    }

    /**
     * Gets last_login
     * @return string
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     * @param string $last_login
     * @return $this
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets last_lead_bought
     * @return string
     */
    public function getLastLeadBought()
    {
        return $this->container['last_lead_bought'];
    }

    /**
     * Sets last_lead_bought
     * @param string $last_lead_bought
     * @return $this
     */
    public function setLastLeadBought($last_lead_bought)
    {
        $this->container['last_lead_bought'] = $last_lead_bought;

        return $this;
    }

    /**
     * Gets revenue_6months
     * @return \Swagger\Client\Model\AmountResource
     */
    public function getRevenue6months()
    {
        return $this->container['revenue_6months'];
    }

    /**
     * Sets revenue_6months
     * @param \Swagger\Client\Model\AmountResource $revenue_6months
     * @return $this
     */
    public function setRevenue6months($revenue_6months)
    {
        $this->container['revenue_6months'] = $revenue_6months;

        return $this;
    }

    /**
     * Gets last_invoice
     * @return string
     */
    public function getLastInvoice()
    {
        return $this->container['last_invoice'];
    }

    /**
     * Sets last_invoice
     * @param string $last_invoice
     * @return $this
     */
    public function setLastInvoice($last_invoice)
    {
        $this->container['last_invoice'] = $last_invoice;

        return $this;
    }

    /**
     * Gets avg_punch_price_6months
     * @return \Swagger\Client\Model\AmountResource
     */
    public function getAvgPunchPrice6months()
    {
        return $this->container['avg_punch_price_6months'];
    }

    /**
     * Sets avg_punch_price_6months
     * @param \Swagger\Client\Model\AmountResource $avg_punch_price_6months
     * @return $this
     */
    public function setAvgPunchPrice6months($avg_punch_price_6months)
    {
        $this->container['avg_punch_price_6months'] = $avg_punch_price_6months;

        return $this;
    }

    /**
     * Gets avg_due_days_6months
     * @return float
     */
    public function getAvgDueDays6months()
    {
        return $this->container['avg_due_days_6months'];
    }

    /**
     * Sets avg_due_days_6months
     * @param float $avg_due_days_6months
     * @return $this
     */
    public function setAvgDueDays6months($avg_due_days_6months)
    {
        $this->container['avg_due_days_6months'] = $avg_due_days_6months;

        return $this;
    }

    /**
     * Gets last_coupon_size
     * @return int
     */
    public function getLastCouponSize()
    {
        return $this->container['last_coupon_size'];
    }

    /**
     * Sets last_coupon_size
     * @param int $last_coupon_size
     * @return $this
     */
    public function setLastCouponSize($last_coupon_size)
    {
        $this->container['last_coupon_size'] = $last_coupon_size;

        return $this;
    }

    /**
     * Gets punches_left
     * @return int
     */
    public function getPunchesLeft()
    {
        return $this->container['punches_left'];
    }

    /**
     * Sets punches_left
     * @param int $punches_left
     * @return $this
     */
    public function setPunchesLeft($punches_left)
    {
        $this->container['punches_left'] = $punches_left;

        return $this;
    }

    /**
     * Gets punches_spent_6months
     * @return int
     */
    public function getPunchesSpent6months()
    {
        return $this->container['punches_spent_6months'];
    }

    /**
     * Sets punches_spent_6months
     * @param int $punches_spent_6months
     * @return $this
     */
    public function setPunchesSpent6months($punches_spent_6months)
    {
        $this->container['punches_spent_6months'] = $punches_spent_6months;

        return $this;
    }

    /**
     * Gets punches_bought_6months
     * @return int
     */
    public function getPunchesBought6months()
    {
        return $this->container['punches_bought_6months'];
    }

    /**
     * Sets punches_bought_6months
     * @param int $punches_bought_6months
     * @return $this
     */
    public function setPunchesBought6months($punches_bought_6months)
    {
        $this->container['punches_bought_6months'] = $punches_bought_6months;

        return $this;
    }

    /**
     * Gets golden_ratio_6months
     * @return float
     */
    public function getGoldenRatio6months()
    {
        return $this->container['golden_ratio_6months'];
    }

    /**
     * Sets golden_ratio_6months
     * @param float $golden_ratio_6months
     * @return $this
     */
    public function setGoldenRatio6months($golden_ratio_6months)
    {
        $this->container['golden_ratio_6months'] = $golden_ratio_6months;

        return $this;
    }

    /**
     * Gets total_revenue
     * @return \Swagger\Client\Model\AmountResource
     */
    public function getTotalRevenue()
    {
        return $this->container['total_revenue'];
    }

    /**
     * Sets total_revenue
     * @param \Swagger\Client\Model\AmountResource $total_revenue
     * @return $this
     */
    public function setTotalRevenue($total_revenue)
    {
        $this->container['total_revenue'] = $total_revenue;

        return $this;
    }

    /**
     * Gets success_rate
     * @return float
     */
    public function getSuccessRate()
    {
        return $this->container['success_rate'];
    }

    /**
     * Sets success_rate
     * @param float $success_rate
     * @return $this
     */
    public function setSuccessRate($success_rate)
    {
        $this->container['success_rate'] = $success_rate;

        return $this;
    }

    /**
     * Gets last_sale
     * @return \Swagger\Client\Model\AmountResource
     */
    public function getLastSale()
    {
        return $this->container['last_sale'];
    }

    /**
     * Sets last_sale
     * @param \Swagger\Client\Model\AmountResource $last_sale
     * @return $this
     */
    public function setLastSale($last_sale)
    {
        $this->container['last_sale'] = $last_sale;

        return $this;
    }

    /**
     * Gets last_sale_type
     * @return string
     */
    public function getLastSaleType()
    {
        return $this->container['last_sale_type'];
    }

    /**
     * Sets last_sale_type
     * @param string $last_sale_type
     * @return $this
     */
    public function setLastSaleType($last_sale_type)
    {
        $this->container['last_sale_type'] = $last_sale_type;

        return $this;
    }

    /**
     * Gets revenue_current_month
     * @return \Swagger\Client\Model\AmountResource
     */
    public function getRevenueCurrentMonth()
    {
        return $this->container['revenue_current_month'];
    }

    /**
     * Sets revenue_current_month
     * @param \Swagger\Client\Model\AmountResource $revenue_current_month
     * @return $this
     */
    public function setRevenueCurrentMonth($revenue_current_month)
    {
        $this->container['revenue_current_month'] = $revenue_current_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


