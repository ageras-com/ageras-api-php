<?php
/**
 * PartnerUserCvAwardResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api\Model;

use \ArrayAccess;

/**
 * PartnerUserCvAwardResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerUserCvAwardResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerUserCvAwardResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'award_name' => 'string',
        'issuer' => 'string',
        'description' => 'string',
        'award_type' => 'string',
        'reward_date' => 'string',
        'validation' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'award_name' => 'award_name',
        'issuer' => 'issuer',
        'description' => 'description',
        'award_type' => 'award_type',
        'reward_date' => 'reward_date',
        'validation' => 'validation'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'award_name' => 'setAwardName',
        'issuer' => 'setIssuer',
        'description' => 'setDescription',
        'award_type' => 'setAwardType',
        'reward_date' => 'setRewardDate',
        'validation' => 'setValidation'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'award_name' => 'getAwardName',
        'issuer' => 'getIssuer',
        'description' => 'getDescription',
        'award_type' => 'getAwardType',
        'reward_date' => 'getRewardDate',
        'validation' => 'getValidation'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['award_name'] = isset($data['award_name']) ? $data['award_name'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['award_type'] = isset($data['award_type']) ? $data['award_type'] : null;
        $this->container['reward_date'] = isset($data['reward_date']) ? $data['reward_date'] : null;
        $this->container['validation'] = isset($data['validation']) ? $data['validation'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets award_name
     * @return string
     */
    public function getAwardName()
    {
        return $this->container['award_name'];
    }

    /**
     * Sets award_name
     * @param string $award_name Award name.
     * @return $this
     */
    public function setAwardName($award_name)
    {
        $this->container['award_name'] = $award_name;

        return $this;
    }

    /**
     * Gets issuer
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     * @param string $issuer Award issuer.
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Award description.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets award_type
     * @return string
     */
    public function getAwardType()
    {
        return $this->container['award_type'];
    }

    /**
     * Sets award_type
     * @param string $award_type Award type.
     * @return $this
     */
    public function setAwardType($award_type)
    {
        $this->container['award_type'] = $award_type;

        return $this;
    }

    /**
     * Gets reward_date
     * @return string
     */
    public function getRewardDate()
    {
        return $this->container['reward_date'];
    }

    /**
     * Sets reward_date
     * @param string $reward_date Award date.
     * @return $this
     */
    public function setRewardDate($reward_date)
    {
        $this->container['reward_date'] = $reward_date;

        return $this;
    }

    /**
     * Gets validation
     * @return string
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     * @param string $validation
     * @return $this
     */
    public function setValidation($validation)
    {
        $this->container['validation'] = $validation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


