<?php
/**
 * PartnerUserResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PartnerUserResource Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerUserResource implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerUserResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'partner_id' => 'int',
        'email' => 'string',
        'password' => 'string',
        'name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'phone' => 'string',
        'mobile' => 'string',
        'is_finance_user' => 'bool',
        'last_login' => 'string',
        'profile_picture' => 'string',
        'wants_emails' => 'bool',
        'wants_text_messages' => 'bool',
        'is_visible' => 'bool',
        'is_active' => 'bool',
        'access_type' => 'string',
        'has_refund_permission' => 'bool',
        'updated_at' => 'string',
        'created_at' => 'string',
        'cv' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'partner_id' => 'partner_id',
        'email' => 'email',
        'password' => 'password',
        'name' => 'name',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'phone' => 'phone',
        'mobile' => 'mobile',
        'is_finance_user' => 'is_finance_user',
        'last_login' => 'last_login',
        'profile_picture' => 'profile_picture',
        'wants_emails' => 'wants_emails',
        'wants_text_messages' => 'wants_text_messages',
        'is_visible' => 'is_visible',
        'is_active' => 'is_active',
        'access_type' => 'access_type',
        'has_refund_permission' => 'has_refund_permission',
        'updated_at' => 'updated_at',
        'created_at' => 'created_at',
        'cv' => 'cv'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'partner_id' => 'setPartnerId',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'phone' => 'setPhone',
        'mobile' => 'setMobile',
        'is_finance_user' => 'setIsFinanceUser',
        'last_login' => 'setLastLogin',
        'profile_picture' => 'setProfilePicture',
        'wants_emails' => 'setWantsEmails',
        'wants_text_messages' => 'setWantsTextMessages',
        'is_visible' => 'setIsVisible',
        'is_active' => 'setIsActive',
        'access_type' => 'setAccessType',
        'has_refund_permission' => 'setHasRefundPermission',
        'updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt',
        'cv' => 'setCv'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'partner_id' => 'getPartnerId',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'phone' => 'getPhone',
        'mobile' => 'getMobile',
        'is_finance_user' => 'getIsFinanceUser',
        'last_login' => 'getLastLogin',
        'profile_picture' => 'getProfilePicture',
        'wants_emails' => 'getWantsEmails',
        'wants_text_messages' => 'getWantsTextMessages',
        'is_visible' => 'getIsVisible',
        'is_active' => 'getIsActive',
        'access_type' => 'getAccessType',
        'has_refund_permission' => 'getHasRefundPermission',
        'updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt',
        'cv' => 'getCv'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['is_finance_user'] = isset($data['is_finance_user']) ? $data['is_finance_user'] : false;
        $this->container['last_login'] = isset($data['last_login']) ? $data['last_login'] : null;
        $this->container['profile_picture'] = isset($data['profile_picture']) ? $data['profile_picture'] : null;
        $this->container['wants_emails'] = isset($data['wants_emails']) ? $data['wants_emails'] : false;
        $this->container['wants_text_messages'] = isset($data['wants_text_messages']) ? $data['wants_text_messages'] : false;
        $this->container['is_visible'] = isset($data['is_visible']) ? $data['is_visible'] : false;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : false;
        $this->container['access_type'] = isset($data['access_type']) ? $data['access_type'] : null;
        $this->container['has_refund_permission'] = isset($data['has_refund_permission']) ? $data['has_refund_permission'] : false;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['cv'] = isset($data['cv']) ? $data['cv'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id User Id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner_id
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     * @param int $partner_id Id to the given partner.
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email to the given partner user.
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password Password.
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Full name of the partner user.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name first name.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name last name.
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Phone Number.
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets mobile
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     * @param string $mobile Mobile Number.
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets is_finance_user
     * @return bool
     */
    public function getIsFinanceUser()
    {
        return $this->container['is_finance_user'];
    }

    /**
     * Sets is_finance_user
     * @param bool $is_finance_user True / false if the current partner user is finance user.
     * @return $this
     */
    public function setIsFinanceUser($is_finance_user)
    {
        $this->container['is_finance_user'] = $is_finance_user;

        return $this;
    }

    /**
     * Gets last_login
     * @return string
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     * @param string $last_login Last time user was logged in.
     * @return $this
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets profile_picture
     * @return string
     */
    public function getProfilePicture()
    {
        return $this->container['profile_picture'];
    }

    /**
     * Sets profile_picture
     * @param string $profile_picture Portrait of the partner user.
     * @return $this
     */
    public function setProfilePicture($profile_picture)
    {
        $this->container['profile_picture'] = $profile_picture;

        return $this;
    }

    /**
     * Gets wants_emails
     * @return bool
     */
    public function getWantsEmails()
    {
        return $this->container['wants_emails'];
    }

    /**
     * Sets wants_emails
     * @param bool $wants_emails Partner User is interested in emails.
     * @return $this
     */
    public function setWantsEmails($wants_emails)
    {
        $this->container['wants_emails'] = $wants_emails;

        return $this;
    }

    /**
     * Gets wants_text_messages
     * @return bool
     */
    public function getWantsTextMessages()
    {
        return $this->container['wants_text_messages'];
    }

    /**
     * Sets wants_text_messages
     * @param bool $wants_text_messages Partner User is interested in text messsages.
     * @return $this
     */
    public function setWantsTextMessages($wants_text_messages)
    {
        $this->container['wants_text_messages'] = $wants_text_messages;

        return $this;
    }

    /**
     * Gets is_visible
     * @return bool
     */
    public function getIsVisible()
    {
        return $this->container['is_visible'];
    }

    /**
     * Sets is_visible
     * @param bool $is_visible Partner User is visible.
     * @return $this
     */
    public function setIsVisible($is_visible)
    {
        $this->container['is_visible'] = $is_visible;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active Partner User is Active.
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets access_type
     * @return string
     */
    public function getAccessType()
    {
        return $this->container['access_type'];
    }

    /**
     * Sets access_type
     * @param string $access_type The Type of Access the Partner User has.
     * @return $this
     */
    public function setAccessType($access_type)
    {
        $this->container['access_type'] = $access_type;

        return $this;
    }

    /**
     * Gets has_refund_permission
     * @return bool
     */
    public function getHasRefundPermission()
    {
        return $this->container['has_refund_permission'];
    }

    /**
     * Sets has_refund_permission
     * @param bool $has_refund_permission partner User has access to refunds.
     * @return $this
     */
    public function setHasRefundPermission($has_refund_permission)
    {
        $this->container['has_refund_permission'] = $has_refund_permission;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at Last time the given partner user was updated.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at The date the partner user was created.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets cv
     * @return string
     */
    public function getCv()
    {
        return $this->container['cv'];
    }

    /**
     * Sets cv
     * @param string $cv Partner user CV Resoruce.
     * @return $this
     */
    public function setCv($cv)
    {
        $this->container['cv'] = $cv;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


