<?php
/**
 * PaymentCardDataResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentCardDataResource Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentCardDataResource implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentCardDataResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'txnid' => 'int',
        'orderid' => 'string',
        'amount' => 'int',
        'currency' => 'int',
        'date' => 'int',
        'time' => 'string',
        'txnfee' => 'int',
        'subscriptionid' => 'int',
        'paymenttype' => 'int',
        'cardno' => 'string',
        'hash' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'txnid' => 'txnid',
        'orderid' => 'orderid',
        'amount' => 'amount',
        'currency' => 'currency',
        'date' => 'date',
        'time' => 'time',
        'txnfee' => 'txnfee',
        'subscriptionid' => 'subscriptionid',
        'paymenttype' => 'paymenttype',
        'cardno' => 'cardno',
        'hash' => 'hash'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'txnid' => 'setTxnid',
        'orderid' => 'setOrderid',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'date' => 'setDate',
        'time' => 'setTime',
        'txnfee' => 'setTxnfee',
        'subscriptionid' => 'setSubscriptionid',
        'paymenttype' => 'setPaymenttype',
        'cardno' => 'setCardno',
        'hash' => 'setHash'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'txnid' => 'getTxnid',
        'orderid' => 'getOrderid',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'date' => 'getDate',
        'time' => 'getTime',
        'txnfee' => 'getTxnfee',
        'subscriptionid' => 'getSubscriptionid',
        'paymenttype' => 'getPaymenttype',
        'cardno' => 'getCardno',
        'hash' => 'getHash'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['txnid'] = isset($data['txnid']) ? $data['txnid'] : null;
        $this->container['orderid'] = isset($data['orderid']) ? $data['orderid'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['txnfee'] = isset($data['txnfee']) ? $data['txnfee'] : null;
        $this->container['subscriptionid'] = isset($data['subscriptionid']) ? $data['subscriptionid'] : null;
        $this->container['paymenttype'] = isset($data['paymenttype']) ? $data['paymenttype'] : null;
        $this->container['cardno'] = isset($data['cardno']) ? $data['cardno'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets txnid
     * @return int
     */
    public function getTxnid()
    {
        return $this->container['txnid'];
    }

    /**
     * Sets txnid
     * @param int $txnid
     * @return $this
     */
    public function setTxnid($txnid)
    {
        $this->container['txnid'] = $txnid;

        return $this;
    }

    /**
     * Gets orderid
     * @return string
     */
    public function getOrderid()
    {
        return $this->container['orderid'];
    }

    /**
     * Sets orderid
     * @param string $orderid
     * @return $this
     */
    public function setOrderid($orderid)
    {
        $this->container['orderid'] = $orderid;

        return $this;
    }

    /**
     * Gets amount
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param int $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     * @return int
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param int $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date
     * @return int
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param int $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets time
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     * @param string $time
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets txnfee
     * @return int
     */
    public function getTxnfee()
    {
        return $this->container['txnfee'];
    }

    /**
     * Sets txnfee
     * @param int $txnfee
     * @return $this
     */
    public function setTxnfee($txnfee)
    {
        $this->container['txnfee'] = $txnfee;

        return $this;
    }

    /**
     * Gets subscriptionid
     * @return int
     */
    public function getSubscriptionid()
    {
        return $this->container['subscriptionid'];
    }

    /**
     * Sets subscriptionid
     * @param int $subscriptionid
     * @return $this
     */
    public function setSubscriptionid($subscriptionid)
    {
        $this->container['subscriptionid'] = $subscriptionid;

        return $this;
    }

    /**
     * Gets paymenttype
     * @return int
     */
    public function getPaymenttype()
    {
        return $this->container['paymenttype'];
    }

    /**
     * Sets paymenttype
     * @param int $paymenttype
     * @return $this
     */
    public function setPaymenttype($paymenttype)
    {
        $this->container['paymenttype'] = $paymenttype;

        return $this;
    }

    /**
     * Gets cardno
     * @return string
     */
    public function getCardno()
    {
        return $this->container['cardno'];
    }

    /**
     * Sets cardno
     * @param string $cardno
     * @return $this
     */
    public function setCardno($cardno)
    {
        $this->container['cardno'] = $cardno;

        return $this;
    }

    /**
     * Gets hash
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     * @param string $hash
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


