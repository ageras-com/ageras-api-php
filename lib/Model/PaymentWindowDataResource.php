<?php
/**
 * PaymentWindowDataResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api\Model;

use \ArrayAccess;

/**
 * PaymentWindowDataResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentWindowDataResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentWindowDataResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantnumber' => 'string',
        'amount' => 'int',
        'subscription' => 'bool',
        'currency' => 'int',
        'windowstate' => 'int',
        'paymentcollection' => 'bool',
        'iframeheight' => 'int',
        'iframewidth' => 'int',
        'cssurl' => 'string',
        'accepturl' => 'string',
        'cancelurl' => 'string',
        'hash' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantnumber' => 'merchantnumber',
        'amount' => 'amount',
        'subscription' => 'subscription',
        'currency' => 'currency',
        'windowstate' => 'windowstate',
        'paymentcollection' => 'paymentcollection',
        'iframeheight' => 'iframeheight',
        'iframewidth' => 'iframewidth',
        'cssurl' => 'cssurl',
        'accepturl' => 'accepturl',
        'cancelurl' => 'cancelurl',
        'hash' => 'hash'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'merchantnumber' => 'setMerchantnumber',
        'amount' => 'setAmount',
        'subscription' => 'setSubscription',
        'currency' => 'setCurrency',
        'windowstate' => 'setWindowstate',
        'paymentcollection' => 'setPaymentcollection',
        'iframeheight' => 'setIframeheight',
        'iframewidth' => 'setIframewidth',
        'cssurl' => 'setCssurl',
        'accepturl' => 'setAccepturl',
        'cancelurl' => 'setCancelurl',
        'hash' => 'setHash'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'merchantnumber' => 'getMerchantnumber',
        'amount' => 'getAmount',
        'subscription' => 'getSubscription',
        'currency' => 'getCurrency',
        'windowstate' => 'getWindowstate',
        'paymentcollection' => 'getPaymentcollection',
        'iframeheight' => 'getIframeheight',
        'iframewidth' => 'getIframewidth',
        'cssurl' => 'getCssurl',
        'accepturl' => 'getAccepturl',
        'cancelurl' => 'getCancelurl',
        'hash' => 'getHash'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantnumber'] = isset($data['merchantnumber']) ? $data['merchantnumber'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : false;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['windowstate'] = isset($data['windowstate']) ? $data['windowstate'] : null;
        $this->container['paymentcollection'] = isset($data['paymentcollection']) ? $data['paymentcollection'] : false;
        $this->container['iframeheight'] = isset($data['iframeheight']) ? $data['iframeheight'] : null;
        $this->container['iframewidth'] = isset($data['iframewidth']) ? $data['iframewidth'] : null;
        $this->container['cssurl'] = isset($data['cssurl']) ? $data['cssurl'] : null;
        $this->container['accepturl'] = isset($data['accepturl']) ? $data['accepturl'] : null;
        $this->container['cancelurl'] = isset($data['cancelurl']) ? $data['cancelurl'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets merchantnumber
     * @return string
     */
    public function getMerchantnumber()
    {
        return $this->container['merchantnumber'];
    }

    /**
     * Sets merchantnumber
     * @param string $merchantnumber
     * @return $this
     */
    public function setMerchantnumber($merchantnumber)
    {
        $this->container['merchantnumber'] = $merchantnumber;

        return $this;
    }

    /**
     * Gets amount
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param int $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets subscription
     * @return bool
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     * @param bool $subscription
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets currency
     * @return int
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param int $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets windowstate
     * @return int
     */
    public function getWindowstate()
    {
        return $this->container['windowstate'];
    }

    /**
     * Sets windowstate
     * @param int $windowstate
     * @return $this
     */
    public function setWindowstate($windowstate)
    {
        $this->container['windowstate'] = $windowstate;

        return $this;
    }

    /**
     * Gets paymentcollection
     * @return bool
     */
    public function getPaymentcollection()
    {
        return $this->container['paymentcollection'];
    }

    /**
     * Sets paymentcollection
     * @param bool $paymentcollection
     * @return $this
     */
    public function setPaymentcollection($paymentcollection)
    {
        $this->container['paymentcollection'] = $paymentcollection;

        return $this;
    }

    /**
     * Gets iframeheight
     * @return int
     */
    public function getIframeheight()
    {
        return $this->container['iframeheight'];
    }

    /**
     * Sets iframeheight
     * @param int $iframeheight
     * @return $this
     */
    public function setIframeheight($iframeheight)
    {
        $this->container['iframeheight'] = $iframeheight;

        return $this;
    }

    /**
     * Gets iframewidth
     * @return int
     */
    public function getIframewidth()
    {
        return $this->container['iframewidth'];
    }

    /**
     * Sets iframewidth
     * @param int $iframewidth
     * @return $this
     */
    public function setIframewidth($iframewidth)
    {
        $this->container['iframewidth'] = $iframewidth;

        return $this;
    }

    /**
     * Gets cssurl
     * @return string
     */
    public function getCssurl()
    {
        return $this->container['cssurl'];
    }

    /**
     * Sets cssurl
     * @param string $cssurl
     * @return $this
     */
    public function setCssurl($cssurl)
    {
        $this->container['cssurl'] = $cssurl;

        return $this;
    }

    /**
     * Gets accepturl
     * @return string
     */
    public function getAccepturl()
    {
        return $this->container['accepturl'];
    }

    /**
     * Sets accepturl
     * @param string $accepturl
     * @return $this
     */
    public function setAccepturl($accepturl)
    {
        $this->container['accepturl'] = $accepturl;

        return $this;
    }

    /**
     * Gets cancelurl
     * @return string
     */
    public function getCancelurl()
    {
        return $this->container['cancelurl'];
    }

    /**
     * Sets cancelurl
     * @param string $cancelurl
     * @return $this
     */
    public function setCancelurl($cancelurl)
    {
        $this->container['cancelurl'] = $cancelurl;

        return $this;
    }

    /**
     * Gets hash
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     * @param string $hash
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


