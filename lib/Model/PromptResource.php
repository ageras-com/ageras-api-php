<?php
/**
 * PromptResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api\Model;

use \ArrayAccess;

/**
 * PromptResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PromptResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PromptResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'attributes' => '\Ageras\Api\Model\PromptAttributeResource[]',
        'type' => 'string',
        'trigger' => 'string',
        'receiver_type' => 'string',
        'partner_id' => 'int',
        'partner_user_id' => 'int',
        'status' => 'string',
        'status_at' => 'string',
        'expires_at' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'attributes' => 'attributes',
        'type' => 'type',
        'trigger' => 'trigger',
        'receiver_type' => 'receiver_type',
        'partner_id' => 'partner_id',
        'partner_user_id' => 'partner_user_id',
        'status' => 'status',
        'status_at' => 'status_at',
        'expires_at' => 'expires_at'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'attributes' => 'setAttributes',
        'type' => 'setType',
        'trigger' => 'setTrigger',
        'receiver_type' => 'setReceiverType',
        'partner_id' => 'setPartnerId',
        'partner_user_id' => 'setPartnerUserId',
        'status' => 'setStatus',
        'status_at' => 'setStatusAt',
        'expires_at' => 'setExpiresAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'attributes' => 'getAttributes',
        'type' => 'getType',
        'trigger' => 'getTrigger',
        'receiver_type' => 'getReceiverType',
        'partner_id' => 'getPartnerId',
        'partner_user_id' => 'getPartnerUserId',
        'status' => 'getStatus',
        'status_at' => 'getStatusAt',
        'expires_at' => 'getExpiresAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const RECEIVER_TYPE_UNKNOWN = 'unknown';
    const RECEIVER_TYPE_PARTNER = 'partner';
    const RECEIVER_TYPE_PARTNER_USER = 'partner_user';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getReceiverTypeAllowableValues()
    {
        return [
            self::RECEIVER_TYPE_UNKNOWN,
            self::RECEIVER_TYPE_PARTNER,
            self::RECEIVER_TYPE_PARTNER_USER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['trigger'] = isset($data['trigger']) ? $data['trigger'] : null;
        $this->container['receiver_type'] = isset($data['receiver_type']) ? $data['receiver_type'] : 'unknown';
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['partner_user_id'] = isset($data['partner_user_id']) ? $data['partner_user_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_at'] = isset($data['status_at']) ? $data['status_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["unknown", "partner", "partner_user"];
        if (!in_array($this->container['receiver_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'receiver_type', must be one of 'unknown', 'partner', 'partner_user'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["unknown", "partner", "partner_user"];
        if (!in_array($this->container['receiver_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Client id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets attributes
     * @return \Ageras\Api\Model\PromptAttributeResource[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param \Ageras\Api\Model\PromptAttributeResource[] $attributes Attributes
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets trigger
     * @return string
     */
    public function getTrigger()
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     * @param string $trigger Trigger
     * @return $this
     */
    public function setTrigger($trigger)
    {
        $this->container['trigger'] = $trigger;

        return $this;
    }

    /**
     * Gets receiver_type
     * @return string
     */
    public function getReceiverType()
    {
        return $this->container['receiver_type'];
    }

    /**
     * Sets receiver_type
     * @param string $receiver_type Receiver
     * @return $this
     */
    public function setReceiverType($receiver_type)
    {
        $allowed_values = array('unknown', 'partner', 'partner_user');
        if (!is_null($receiver_type) && (!in_array($receiver_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'receiver_type', must be one of 'unknown', 'partner', 'partner_user'");
        }
        $this->container['receiver_type'] = $receiver_type;

        return $this;
    }

    /**
     * Gets partner_id
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     * @param int $partner_id Partner id
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets partner_user_id
     * @return int
     */
    public function getPartnerUserId()
    {
        return $this->container['partner_user_id'];
    }

    /**
     * Sets partner_user_id
     * @param int $partner_user_id Partner user id
     * @return $this
     */
    public function setPartnerUserId($partner_user_id)
    {
        $this->container['partner_user_id'] = $partner_user_id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Last status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_at
     * @return string
     */
    public function getStatusAt()
    {
        return $this->container['status_at'];
    }

    /**
     * Sets status_at
     * @param string $status_at Last status date
     * @return $this
     */
    public function setStatusAt($status_at)
    {
        $this->container['status_at'] = $status_at;

        return $this;
    }

    /**
     * Gets expires_at
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     * @param string $expires_at Expires at
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


