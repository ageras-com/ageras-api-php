<?php
/**
 * VoucherRefundRequestActionResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api\Model;

use \ArrayAccess;

/**
 * VoucherRefundRequestActionResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VoucherRefundRequestActionResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VoucherRefundRequestActionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'string',
        'voucher_refund_request_id' => 'int',
        'accepted_amount_excl_vat' => 'float',
        'decision_reason' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'voucher_refund_request_id' => 'voucher_refund_request_id',
        'accepted_amount_excl_vat' => 'accepted_amount_excl_vat',
        'decision_reason' => 'decision_reason'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'voucher_refund_request_id' => 'setVoucherRefundRequestId',
        'accepted_amount_excl_vat' => 'setAcceptedAmountExclVat',
        'decision_reason' => 'setDecisionReason'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'voucher_refund_request_id' => 'getVoucherRefundRequestId',
        'accepted_amount_excl_vat' => 'getAcceptedAmountExclVat',
        'decision_reason' => 'getDecisionReason'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACTION_UNKNOWN = 'unknown';
    const ACTION_ACCEPT = 'accept';
    const ACTION_REJECT = 'reject';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_UNKNOWN,
            self::ACTION_ACCEPT,
            self::ACTION_REJECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : 'unknown';
        $this->container['voucher_refund_request_id'] = isset($data['voucher_refund_request_id']) ? $data['voucher_refund_request_id'] : null;
        $this->container['accepted_amount_excl_vat'] = isset($data['accepted_amount_excl_vat']) ? $data['accepted_amount_excl_vat'] : null;
        $this->container['decision_reason'] = isset($data['decision_reason']) ? $data['decision_reason'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["unknown", "accept", "reject"];
        if (!in_array($this->container['action'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'action', must be one of 'unknown', 'accept', 'reject'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["unknown", "accept", "reject"];
        if (!in_array($this->container['action'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets action
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     * @param string $action Lead action
     * @return $this
     */
    public function setAction($action)
    {
        $allowed_values = array('unknown', 'accept', 'reject');
        if (!is_null($action) && (!in_array($action, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'action', must be one of 'unknown', 'accept', 'reject'");
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets voucher_refund_request_id
     * @return int
     */
    public function getVoucherRefundRequestId()
    {
        return $this->container['voucher_refund_request_id'];
    }

    /**
     * Sets voucher_refund_request_id
     * @param int $voucher_refund_request_id Refund request id
     * @return $this
     */
    public function setVoucherRefundRequestId($voucher_refund_request_id)
    {
        $this->container['voucher_refund_request_id'] = $voucher_refund_request_id;

        return $this;
    }

    /**
     * Gets accepted_amount_excl_vat
     * @return float
     */
    public function getAcceptedAmountExclVat()
    {
        return $this->container['accepted_amount_excl_vat'];
    }

    /**
     * Sets accepted_amount_excl_vat
     * @param float $accepted_amount_excl_vat Amount of money to refund. @var float
     * @return $this
     */
    public function setAcceptedAmountExclVat($accepted_amount_excl_vat)
    {
        $this->container['accepted_amount_excl_vat'] = $accepted_amount_excl_vat;

        return $this;
    }

    /**
     * Gets decision_reason
     * @return string
     */
    public function getDecisionReason()
    {
        return $this->container['decision_reason'];
    }

    /**
     * Sets decision_reason
     * @param string $decision_reason Reason for the decision. @var string
     * @return $this
     */
    public function setDecisionReason($decision_reason)
    {
        $this->container['decision_reason'] = $decision_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


