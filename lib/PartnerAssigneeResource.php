<?php
/**
 * PartnerAssigneeResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerAssigneeResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerAssigneeResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerAssigneeResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'partner_id' => 'int',
        'assignee_id' => 'int',
        'assignee_type' => 'string',
        'assignee_role' => 'string',
        'assignee_info' => '\Ageras\Api\PartnerAssigneeInfoResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'partner_id' => 'partner_id',
        'assignee_id' => 'assignee_id',
        'assignee_type' => 'assignee_type',
        'assignee_role' => 'assignee_role',
        'assignee_info' => 'assignee_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'partner_id' => 'setPartnerId',
        'assignee_id' => 'setAssigneeId',
        'assignee_type' => 'setAssigneeType',
        'assignee_role' => 'setAssigneeRole',
        'assignee_info' => 'setAssigneeInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'partner_id' => 'getPartnerId',
        'assignee_id' => 'getAssigneeId',
        'assignee_type' => 'getAssigneeType',
        'assignee_role' => 'getAssigneeRole',
        'assignee_info' => 'getAssigneeInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ASSIGNEE_TYPE_ALL = 'all';
    const ASSIGNEE_TYPE_EMPLOYEE = 'employee';
    const ASSIGNEE_ROLE_ALL = 'all';
    const ASSIGNEE_ROLE_CLIENT_CONSULTANT = 'client_consultant';
    const ASSIGNEE_ROLE_ACCOUNT_MANAGER = 'account_manager';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAssigneeTypeAllowableValues()
    {
        return [
            self::ASSIGNEE_TYPE_ALL,
            self::ASSIGNEE_TYPE_EMPLOYEE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAssigneeRoleAllowableValues()
    {
        return [
            self::ASSIGNEE_ROLE_ALL,
            self::ASSIGNEE_ROLE_CLIENT_CONSULTANT,
            self::ASSIGNEE_ROLE_ACCOUNT_MANAGER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['assignee_id'] = isset($data['assignee_id']) ? $data['assignee_id'] : null;
        $this->container['assignee_type'] = isset($data['assignee_type']) ? $data['assignee_type'] : 'all';
        $this->container['assignee_role'] = isset($data['assignee_role']) ? $data['assignee_role'] : 'all';
        $this->container['assignee_info'] = isset($data['assignee_info']) ? $data['assignee_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["all", "employee"];
        if (!in_array($this->container['assignee_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'assignee_type', must be one of 'all', 'employee'.";
        }

        $allowed_values = ["all", "client_consultant", "account_manager"];
        if (!in_array($this->container['assignee_role'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'assignee_role', must be one of 'all', 'client_consultant', 'account_manager'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["all", "employee"];
        if (!in_array($this->container['assignee_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["all", "client_consultant", "account_manager"];
        if (!in_array($this->container['assignee_role'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets partner_id
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     * @param int $partner_id
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets assignee_id
     * @return int
     */
    public function getAssigneeId()
    {
        return $this->container['assignee_id'];
    }

    /**
     * Sets assignee_id
     * @param int $assignee_id
     * @return $this
     */
    public function setAssigneeId($assignee_id)
    {
        $this->container['assignee_id'] = $assignee_id;

        return $this;
    }

    /**
     * Gets assignee_type
     * @return string
     */
    public function getAssigneeType()
    {
        return $this->container['assignee_type'];
    }

    /**
     * Sets assignee_type
     * @param string $assignee_type
     * @return $this
     */
    public function setAssigneeType($assignee_type)
    {
        $allowed_values = array('all', 'employee');
        if (!is_null($assignee_type) && (!in_array($assignee_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'assignee_type', must be one of 'all', 'employee'");
        }
        $this->container['assignee_type'] = $assignee_type;

        return $this;
    }

    /**
     * Gets assignee_role
     * @return string
     */
    public function getAssigneeRole()
    {
        return $this->container['assignee_role'];
    }

    /**
     * Sets assignee_role
     * @param string $assignee_role
     * @return $this
     */
    public function setAssigneeRole($assignee_role)
    {
        $allowed_values = array('all', 'client_consultant', 'account_manager');
        if (!is_null($assignee_role) && (!in_array($assignee_role, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'assignee_role', must be one of 'all', 'client_consultant', 'account_manager'");
        }
        $this->container['assignee_role'] = $assignee_role;

        return $this;
    }

    /**
     * Gets assignee_info
     * @return \Ageras\Api\PartnerAssigneeInfoResource
     */
    public function getAssigneeInfo()
    {
        return $this->container['assignee_info'];
    }

    /**
     * Sets assignee_info
     * @param \Ageras\Api\PartnerAssigneeInfoResource $assignee_info
     * @return $this
     */
    public function setAssigneeInfo($assignee_info)
    {
        $this->container['assignee_info'] = $assignee_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


