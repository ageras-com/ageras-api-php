<?php
/**
 * PartnerBusinessUnitAccumulatedAllocationResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerBusinessUnitAccumulatedAllocationResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerBusinessUnitAccumulatedAllocationResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerBusinessUnitAccumulatedAllocationResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'normal_quota_allocation_count' => 'int',
        'normal_allocation_quota' => 'int',
        'pay_per_spot_allocation_count' => 'int',
        'pay_per_spot_allocation_limit' => 'int',
        'just_in_time_allocation_count' => 'int',
        'allocation_count' => 'int',
        'allocation_quota' => 'int',
        'overdelivery_allocation_count' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'normal_quota_allocation_count' => 'normal_quota_allocation_count',
        'normal_allocation_quota' => 'normal_allocation_quota',
        'pay_per_spot_allocation_count' => 'pay_per_spot_allocation_count',
        'pay_per_spot_allocation_limit' => 'pay_per_spot_allocation_limit',
        'just_in_time_allocation_count' => 'just_in_time_allocation_count',
        'allocation_count' => 'allocation_count',
        'allocation_quota' => 'allocation_quota',
        'overdelivery_allocation_count' => 'overdelivery_allocation_count'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'normal_quota_allocation_count' => 'setNormalQuotaAllocationCount',
        'normal_allocation_quota' => 'setNormalAllocationQuota',
        'pay_per_spot_allocation_count' => 'setPayPerSpotAllocationCount',
        'pay_per_spot_allocation_limit' => 'setPayPerSpotAllocationLimit',
        'just_in_time_allocation_count' => 'setJustInTimeAllocationCount',
        'allocation_count' => 'setAllocationCount',
        'allocation_quota' => 'setAllocationQuota',
        'overdelivery_allocation_count' => 'setOverdeliveryAllocationCount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'normal_quota_allocation_count' => 'getNormalQuotaAllocationCount',
        'normal_allocation_quota' => 'getNormalAllocationQuota',
        'pay_per_spot_allocation_count' => 'getPayPerSpotAllocationCount',
        'pay_per_spot_allocation_limit' => 'getPayPerSpotAllocationLimit',
        'just_in_time_allocation_count' => 'getJustInTimeAllocationCount',
        'allocation_count' => 'getAllocationCount',
        'allocation_quota' => 'getAllocationQuota',
        'overdelivery_allocation_count' => 'getOverdeliveryAllocationCount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['normal_quota_allocation_count'] = isset($data['normal_quota_allocation_count']) ? $data['normal_quota_allocation_count'] : null;
        $this->container['normal_allocation_quota'] = isset($data['normal_allocation_quota']) ? $data['normal_allocation_quota'] : null;
        $this->container['pay_per_spot_allocation_count'] = isset($data['pay_per_spot_allocation_count']) ? $data['pay_per_spot_allocation_count'] : null;
        $this->container['pay_per_spot_allocation_limit'] = isset($data['pay_per_spot_allocation_limit']) ? $data['pay_per_spot_allocation_limit'] : null;
        $this->container['just_in_time_allocation_count'] = isset($data['just_in_time_allocation_count']) ? $data['just_in_time_allocation_count'] : null;
        $this->container['allocation_count'] = isset($data['allocation_count']) ? $data['allocation_count'] : null;
        $this->container['allocation_quota'] = isset($data['allocation_quota']) ? $data['allocation_quota'] : null;
        $this->container['overdelivery_allocation_count'] = isset($data['overdelivery_allocation_count']) ? $data['overdelivery_allocation_count'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets normal_quota_allocation_count
     * @return int
     */
    public function getNormalQuotaAllocationCount()
    {
        return $this->container['normal_quota_allocation_count'];
    }

    /**
     * Sets normal_quota_allocation_count
     * @param int $normal_quota_allocation_count Number of allocations fulfilled by the normal quota of allocations.
     * @return $this
     */
    public function setNormalQuotaAllocationCount($normal_quota_allocation_count)
    {
        $this->container['normal_quota_allocation_count'] = $normal_quota_allocation_count;

        return $this;
    }

    /**
     * Gets normal_allocation_quota
     * @return int
     */
    public function getNormalAllocationQuota()
    {
        return $this->container['normal_allocation_quota'];
    }

    /**
     * Sets normal_allocation_quota
     * @param int $normal_allocation_quota Count of allocations accumulated from the normal allocation quota.
     * @return $this
     */
    public function setNormalAllocationQuota($normal_allocation_quota)
    {
        $this->container['normal_allocation_quota'] = $normal_allocation_quota;

        return $this;
    }

    /**
     * Gets pay_per_spot_allocation_count
     * @return int
     */
    public function getPayPerSpotAllocationCount()
    {
        return $this->container['pay_per_spot_allocation_count'];
    }

    /**
     * Sets pay_per_spot_allocation_count
     * @param int $pay_per_spot_allocation_count Number of allocations fulfilled by the pay per spot limit.
     * @return $this
     */
    public function setPayPerSpotAllocationCount($pay_per_spot_allocation_count)
    {
        $this->container['pay_per_spot_allocation_count'] = $pay_per_spot_allocation_count;

        return $this;
    }

    /**
     * Gets pay_per_spot_allocation_limit
     * @return int
     */
    public function getPayPerSpotAllocationLimit()
    {
        return $this->container['pay_per_spot_allocation_limit'];
    }

    /**
     * Sets pay_per_spot_allocation_limit
     * @param int $pay_per_spot_allocation_limit Count of allocations added each refill period from the pay per spot limit.
     * @return $this
     */
    public function setPayPerSpotAllocationLimit($pay_per_spot_allocation_limit)
    {
        $this->container['pay_per_spot_allocation_limit'] = $pay_per_spot_allocation_limit;

        return $this;
    }

    /**
     * Gets just_in_time_allocation_count
     * @return int
     */
    public function getJustInTimeAllocationCount()
    {
        return $this->container['just_in_time_allocation_count'];
    }

    /**
     * Sets just_in_time_allocation_count
     * @param int $just_in_time_allocation_count Number of allocations fulfilled by just in time fulfillment.
     * @return $this
     */
    public function setJustInTimeAllocationCount($just_in_time_allocation_count)
    {
        $this->container['just_in_time_allocation_count'] = $just_in_time_allocation_count;

        return $this;
    }

    /**
     * Gets allocation_count
     * @return int
     */
    public function getAllocationCount()
    {
        return $this->container['allocation_count'];
    }

    /**
     * Sets allocation_count
     * @param int $allocation_count Total including normal quota and just in time allocations.
     * @return $this
     */
    public function setAllocationCount($allocation_count)
    {
        $this->container['allocation_count'] = $allocation_count;

        return $this;
    }

    /**
     * Gets allocation_quota
     * @return int
     */
    public function getAllocationQuota()
    {
        return $this->container['allocation_quota'];
    }

    /**
     * Sets allocation_quota
     * @param int $allocation_quota Synonym for normal quota.
     * @return $this
     */
    public function setAllocationQuota($allocation_quota)
    {
        $this->container['allocation_quota'] = $allocation_quota;

        return $this;
    }

    /**
     * Gets overdelivery_allocation_count
     * @return int
     */
    public function getOverdeliveryAllocationCount()
    {
        return $this->container['overdelivery_allocation_count'];
    }

    /**
     * Sets overdelivery_allocation_count
     * @param int $overdelivery_allocation_count Count of allocations that were overdelivered, i.e. above the applicable quota
     * @return $this
     */
    public function setOverdeliveryAllocationCount($overdelivery_allocation_count)
    {
        $this->container['overdelivery_allocation_count'] = $overdelivery_allocation_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


