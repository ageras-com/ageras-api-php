<?php
/**
 * PartnerBusinessUnitPartnerResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerBusinessUnitPartnerResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerBusinessUnitPartnerResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerBusinessUnitPartnerResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_name' => 'string',
        'company_information' => 'string',
        'slug' => 'string',
        'logo' => 'string',
        'has_marketing_package' => 'bool',
        'is_subscription_paused' => 'bool',
        'features' => 'string[]',
        'rating' => '\Ageras\Api\PartnerRatingResource',
        'badges' => '\Ageras\Api\PartnerBadgeResource[]',
        'geo' => '\Ageras\Api\PartnerGeoResource',
        'public_employees' => '\Ageras\Api\PartnerBusinessUnitPartnerUserResource[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_name' => 'company_name',
        'company_information' => 'company_information',
        'slug' => 'slug',
        'logo' => 'logo',
        'has_marketing_package' => 'has_marketing_package',
        'is_subscription_paused' => 'is_subscription_paused',
        'features' => 'features',
        'rating' => 'rating',
        'badges' => 'badges',
        'geo' => 'geo',
        'public_employees' => 'public_employees'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_name' => 'setCompanyName',
        'company_information' => 'setCompanyInformation',
        'slug' => 'setSlug',
        'logo' => 'setLogo',
        'has_marketing_package' => 'setHasMarketingPackage',
        'is_subscription_paused' => 'setIsSubscriptionPaused',
        'features' => 'setFeatures',
        'rating' => 'setRating',
        'badges' => 'setBadges',
        'geo' => 'setGeo',
        'public_employees' => 'setPublicEmployees'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_name' => 'getCompanyName',
        'company_information' => 'getCompanyInformation',
        'slug' => 'getSlug',
        'logo' => 'getLogo',
        'has_marketing_package' => 'getHasMarketingPackage',
        'is_subscription_paused' => 'getIsSubscriptionPaused',
        'features' => 'getFeatures',
        'rating' => 'getRating',
        'badges' => 'getBadges',
        'geo' => 'getGeo',
        'public_employees' => 'getPublicEmployees'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_information'] = isset($data['company_information']) ? $data['company_information'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['has_marketing_package'] = isset($data['has_marketing_package']) ? $data['has_marketing_package'] : false;
        $this->container['is_subscription_paused'] = isset($data['is_subscription_paused']) ? $data['is_subscription_paused'] : false;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['badges'] = isset($data['badges']) ? $data['badges'] : null;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['public_employees'] = isset($data['public_employees']) ? $data['public_employees'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Primary ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_name
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     * @param string $company_name Partner company name.
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_information
     * @return string
     */
    public function getCompanyInformation()
    {
        return $this->container['company_information'];
    }

    /**
     * Sets company_information
     * @param string $company_information
     * @return $this
     */
    public function setCompanyInformation($company_information)
    {
        $this->container['company_information'] = $company_information;

        return $this;
    }

    /**
     * Gets slug
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     * @param string $slug
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets logo
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     * @param string $logo
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets has_marketing_package
     * @return bool
     */
    public function getHasMarketingPackage()
    {
        return $this->container['has_marketing_package'];
    }

    /**
     * Sets has_marketing_package
     * @param bool $has_marketing_package Does the partner have a marketing package?
     * @return $this
     */
    public function setHasMarketingPackage($has_marketing_package)
    {
        $this->container['has_marketing_package'] = $has_marketing_package;

        return $this;
    }

    /**
     * Gets is_subscription_paused
     * @return bool
     */
    public function getIsSubscriptionPaused()
    {
        return $this->container['is_subscription_paused'];
    }

    /**
     * Sets is_subscription_paused
     * @param bool $is_subscription_paused Is the partner's subscription paused?
     * @return $this
     */
    public function setIsSubscriptionPaused($is_subscription_paused)
    {
        $this->container['is_subscription_paused'] = $is_subscription_paused;

        return $this;
    }

    /**
     * Gets features
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     * @param string[] $features An array of the partner's features
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets rating
     * @return \Ageras\Api\PartnerRatingResource
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     * @param \Ageras\Api\PartnerRatingResource $rating
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets badges
     * @return \Ageras\Api\PartnerBadgeResource[]
     */
    public function getBadges()
    {
        return $this->container['badges'];
    }

    /**
     * Sets badges
     * @param \Ageras\Api\PartnerBadgeResource[] $badges
     * @return $this
     */
    public function setBadges($badges)
    {
        $this->container['badges'] = $badges;

        return $this;
    }

    /**
     * Gets geo
     * @return \Ageras\Api\PartnerGeoResource
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     * @param \Ageras\Api\PartnerGeoResource $geo
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets public_employees
     * @return \Ageras\Api\PartnerBusinessUnitPartnerUserResource[]
     */
    public function getPublicEmployees()
    {
        return $this->container['public_employees'];
    }

    /**
     * Sets public_employees
     * @param \Ageras\Api\PartnerBusinessUnitPartnerUserResource[] $public_employees
     * @return $this
     */
    public function setPublicEmployees($public_employees)
    {
        $this->container['public_employees'] = $public_employees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


