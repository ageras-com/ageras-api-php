<?php
/**
 * PartnerBusinessUnitResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerBusinessUnitResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerBusinessUnitResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerBusinessUnitResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner_user_id' => 'int',
        'geo' => '\Ageras\Api\PartnerBusinessUnitGeoResource',
        'disable_digital_leads' => 'bool',
        'display_name' => 'string',
        'geo_range' => 'int',
        'desired_revenue_range' => '\Ageras\Api\PartnerBusinessUnitRevenueRangeResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner_user_id' => 'partner_user_id',
        'geo' => 'geo',
        'disable_digital_leads' => 'disable_digital_leads',
        'display_name' => 'display_name',
        'geo_range' => 'geo_range',
        'desired_revenue_range' => 'desired_revenue_range'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner_user_id' => 'setPartnerUserId',
        'geo' => 'setGeo',
        'disable_digital_leads' => 'setDisableDigitalLeads',
        'display_name' => 'setDisplayName',
        'geo_range' => 'setGeoRange',
        'desired_revenue_range' => 'setDesiredRevenueRange'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner_user_id' => 'getPartnerUserId',
        'geo' => 'getGeo',
        'disable_digital_leads' => 'getDisableDigitalLeads',
        'display_name' => 'getDisplayName',
        'geo_range' => 'getGeoRange',
        'desired_revenue_range' => 'getDesiredRevenueRange'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner_user_id'] = isset($data['partner_user_id']) ? $data['partner_user_id'] : null;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['disable_digital_leads'] = isset($data['disable_digital_leads']) ? $data['disable_digital_leads'] : false;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['geo_range'] = isset($data['geo_range']) ? $data['geo_range'] : null;
        $this->container['desired_revenue_range'] = isset($data['desired_revenue_range']) ? $data['desired_revenue_range'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Primary ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner_user_id
     * @return int
     */
    public function getPartnerUserId()
    {
        return $this->container['partner_user_id'];
    }

    /**
     * Sets partner_user_id
     * @param int $partner_user_id Partner user ID.
     * @return $this
     */
    public function setPartnerUserId($partner_user_id)
    {
        $this->container['partner_user_id'] = $partner_user_id;

        return $this;
    }

    /**
     * Gets geo
     * @return \Ageras\Api\PartnerBusinessUnitGeoResource
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     * @param \Ageras\Api\PartnerBusinessUnitGeoResource $geo
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets disable_digital_leads
     * @return bool
     */
    public function getDisableDigitalLeads()
    {
        return $this->container['disable_digital_leads'];
    }

    /**
     * Sets disable_digital_leads
     * @param bool $disable_digital_leads Does this business unit disable digital leads?
     * @return $this
     */
    public function setDisableDigitalLeads($disable_digital_leads)
    {
        $this->container['disable_digital_leads'] = $disable_digital_leads;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name Human-readable name.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets geo_range
     * @return int
     */
    public function getGeoRange()
    {
        return $this->container['geo_range'];
    }

    /**
     * Sets geo_range
     * @param int $geo_range Distance this business unit is willing to look for leads.
     * @return $this
     */
    public function setGeoRange($geo_range)
    {
        $this->container['geo_range'] = $geo_range;

        return $this;
    }

    /**
     * Gets desired_revenue_range
     * @return \Ageras\Api\PartnerBusinessUnitRevenueRangeResource
     */
    public function getDesiredRevenueRange()
    {
        return $this->container['desired_revenue_range'];
    }

    /**
     * Sets desired_revenue_range
     * @param \Ageras\Api\PartnerBusinessUnitRevenueRangeResource $desired_revenue_range
     * @return $this
     */
    public function setDesiredRevenueRange($desired_revenue_range)
    {
        $this->container['desired_revenue_range'] = $desired_revenue_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


