<?php
/**
 * PartnerContractOfferResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerContractOfferResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerContractOfferResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerContractOfferResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'offer_group' => '\Ageras\Api\NestedContractOfferGroupResource',
        'offer_items' => '\Ageras\Api\PartnerContractOfferItemResource[]',
        'price_excl_vat' => '\Ageras\Api\AmountResource',
        'sort' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'offer_group' => 'offer_group',
        'offer_items' => 'offer_items',
        'price_excl_vat' => 'price_excl_vat',
        'sort' => 'sort'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'offer_group' => 'setOfferGroup',
        'offer_items' => 'setOfferItems',
        'price_excl_vat' => 'setPriceExclVat',
        'sort' => 'setSort'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'offer_group' => 'getOfferGroup',
        'offer_items' => 'getOfferItems',
        'price_excl_vat' => 'getPriceExclVat',
        'sort' => 'getSort'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['offer_group'] = isset($data['offer_group']) ? $data['offer_group'] : null;
        $this->container['offer_items'] = isset($data['offer_items']) ? $data['offer_items'] : null;
        $this->container['price_excl_vat'] = isset($data['price_excl_vat']) ? $data['price_excl_vat'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The offer id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets offer_group
     * @return \Ageras\Api\NestedContractOfferGroupResource
     */
    public function getOfferGroup()
    {
        return $this->container['offer_group'];
    }

    /**
     * Sets offer_group
     * @param \Ageras\Api\NestedContractOfferGroupResource $offer_group
     * @return $this
     */
    public function setOfferGroup($offer_group)
    {
        $this->container['offer_group'] = $offer_group;

        return $this;
    }

    /**
     * Gets offer_items
     * @return \Ageras\Api\PartnerContractOfferItemResource[]
     */
    public function getOfferItems()
    {
        return $this->container['offer_items'];
    }

    /**
     * Sets offer_items
     * @param \Ageras\Api\PartnerContractOfferItemResource[] $offer_items List of offer items that are connected to this offer.
     * @return $this
     */
    public function setOfferItems($offer_items)
    {
        $this->container['offer_items'] = $offer_items;

        return $this;
    }

    /**
     * Gets price_excl_vat
     * @return \Ageras\Api\AmountResource
     */
    public function getPriceExclVat()
    {
        return $this->container['price_excl_vat'];
    }

    /**
     * Sets price_excl_vat
     * @param \Ageras\Api\AmountResource $price_excl_vat
     * @return $this
     */
    public function setPriceExclVat($price_excl_vat)
    {
        $this->container['price_excl_vat'] = $price_excl_vat;

        return $this;
    }

    /**
     * Gets sort
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     * @param int $sort List of offer items that are connected to this offer.
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


