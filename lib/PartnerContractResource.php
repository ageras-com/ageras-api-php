<?php
/**
 * PartnerContractResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerContractResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerContractResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerContractResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner' => '\Ageras\Api\PartnerContractPartnerResource',
        'created_at' => 'string',
        'binding_period_months' => 'int',
        'billing_frequency_months' => 'int',
        'allocation_frequency_months' => 'int',
        'cancellation_period_months' => 'int',
        'accepted_at' => 'string',
        'canceled_at' => 'string',
        'starts_at' => 'string',
        'business_units' => '\Ageras\Api\PartnerContractBusinessUnitResource[]',
        'current_partner_contract_period' => '\Ageras\Api\PartnerContractPeriodResource',
        'intending_to_replace_partner_contract_id' => 'int',
        'replaces_partner_contract_id' => 'int',
        'category' => '\Ageras\Api\PartnerCategoryResource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner' => 'partner',
        'created_at' => 'created_at',
        'binding_period_months' => 'binding_period_months',
        'billing_frequency_months' => 'billing_frequency_months',
        'allocation_frequency_months' => 'allocation_frequency_months',
        'cancellation_period_months' => 'cancellation_period_months',
        'accepted_at' => 'accepted_at',
        'canceled_at' => 'canceled_at',
        'starts_at' => 'starts_at',
        'business_units' => 'business_units',
        'current_partner_contract_period' => 'current_partner_contract_period',
        'intending_to_replace_partner_contract_id' => 'intending_to_replace_partner_contract_id',
        'replaces_partner_contract_id' => 'replaces_partner_contract_id',
        'category' => 'category'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner' => 'setPartner',
        'created_at' => 'setCreatedAt',
        'binding_period_months' => 'setBindingPeriodMonths',
        'billing_frequency_months' => 'setBillingFrequencyMonths',
        'allocation_frequency_months' => 'setAllocationFrequencyMonths',
        'cancellation_period_months' => 'setCancellationPeriodMonths',
        'accepted_at' => 'setAcceptedAt',
        'canceled_at' => 'setCanceledAt',
        'starts_at' => 'setStartsAt',
        'business_units' => 'setBusinessUnits',
        'current_partner_contract_period' => 'setCurrentPartnerContractPeriod',
        'intending_to_replace_partner_contract_id' => 'setIntendingToReplacePartnerContractId',
        'replaces_partner_contract_id' => 'setReplacesPartnerContractId',
        'category' => 'setCategory'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner' => 'getPartner',
        'created_at' => 'getCreatedAt',
        'binding_period_months' => 'getBindingPeriodMonths',
        'billing_frequency_months' => 'getBillingFrequencyMonths',
        'allocation_frequency_months' => 'getAllocationFrequencyMonths',
        'cancellation_period_months' => 'getCancellationPeriodMonths',
        'accepted_at' => 'getAcceptedAt',
        'canceled_at' => 'getCanceledAt',
        'starts_at' => 'getStartsAt',
        'business_units' => 'getBusinessUnits',
        'current_partner_contract_period' => 'getCurrentPartnerContractPeriod',
        'intending_to_replace_partner_contract_id' => 'getIntendingToReplacePartnerContractId',
        'replaces_partner_contract_id' => 'getReplacesPartnerContractId',
        'category' => 'getCategory'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['binding_period_months'] = isset($data['binding_period_months']) ? $data['binding_period_months'] : null;
        $this->container['billing_frequency_months'] = isset($data['billing_frequency_months']) ? $data['billing_frequency_months'] : null;
        $this->container['allocation_frequency_months'] = isset($data['allocation_frequency_months']) ? $data['allocation_frequency_months'] : null;
        $this->container['cancellation_period_months'] = isset($data['cancellation_period_months']) ? $data['cancellation_period_months'] : null;
        $this->container['accepted_at'] = isset($data['accepted_at']) ? $data['accepted_at'] : null;
        $this->container['canceled_at'] = isset($data['canceled_at']) ? $data['canceled_at'] : null;
        $this->container['starts_at'] = isset($data['starts_at']) ? $data['starts_at'] : null;
        $this->container['business_units'] = isset($data['business_units']) ? $data['business_units'] : null;
        $this->container['current_partner_contract_period'] = isset($data['current_partner_contract_period']) ? $data['current_partner_contract_period'] : null;
        $this->container['intending_to_replace_partner_contract_id'] = isset($data['intending_to_replace_partner_contract_id']) ? $data['intending_to_replace_partner_contract_id'] : null;
        $this->container['replaces_partner_contract_id'] = isset($data['replaces_partner_contract_id']) ? $data['replaces_partner_contract_id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The contract ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner
     * @return \Ageras\Api\PartnerContractPartnerResource
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     * @param \Ageras\Api\PartnerContractPartnerResource $partner
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at When the contract was created.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets binding_period_months
     * @return int
     */
    public function getBindingPeriodMonths()
    {
        return $this->container['binding_period_months'];
    }

    /**
     * Sets binding_period_months
     * @param int $binding_period_months Number of months contract is bound for, i.e. how often is the contract renewed.
     * @return $this
     */
    public function setBindingPeriodMonths($binding_period_months)
    {
        $this->container['binding_period_months'] = $binding_period_months;

        return $this;
    }

    /**
     * Gets billing_frequency_months
     * @return int
     */
    public function getBillingFrequencyMonths()
    {
        return $this->container['billing_frequency_months'];
    }

    /**
     * Sets billing_frequency_months
     * @param int $billing_frequency_months How often is the contract billed.
     * @return $this
     */
    public function setBillingFrequencyMonths($billing_frequency_months)
    {
        $this->container['billing_frequency_months'] = $billing_frequency_months;

        return $this;
    }

    /**
     * Gets allocation_frequency_months
     * @return int
     */
    public function getAllocationFrequencyMonths()
    {
        return $this->container['allocation_frequency_months'];
    }

    /**
     * Sets allocation_frequency_months
     * @param int $allocation_frequency_months How often are the allocations populated.
     * @return $this
     */
    public function setAllocationFrequencyMonths($allocation_frequency_months)
    {
        $this->container['allocation_frequency_months'] = $allocation_frequency_months;

        return $this;
    }

    /**
     * Gets cancellation_period_months
     * @return int
     */
    public function getCancellationPeriodMonths()
    {
        return $this->container['cancellation_period_months'];
    }

    /**
     * Sets cancellation_period_months
     * @param int $cancellation_period_months How many months before contract end can partner cancel.
     * @return $this
     */
    public function setCancellationPeriodMonths($cancellation_period_months)
    {
        $this->container['cancellation_period_months'] = $cancellation_period_months;

        return $this;
    }

    /**
     * Gets accepted_at
     * @return string
     */
    public function getAcceptedAt()
    {
        return $this->container['accepted_at'];
    }

    /**
     * Sets accepted_at
     * @param string $accepted_at When the contract was accepted start.
     * @return $this
     */
    public function setAcceptedAt($accepted_at)
    {
        $this->container['accepted_at'] = $accepted_at;

        return $this;
    }

    /**
     * Gets canceled_at
     * @return string
     */
    public function getCanceledAt()
    {
        return $this->container['canceled_at'];
    }

    /**
     * Sets canceled_at
     * @param string $canceled_at When the contract was canceled.
     * @return $this
     */
    public function setCanceledAt($canceled_at)
    {
        $this->container['canceled_at'] = $canceled_at;

        return $this;
    }

    /**
     * Gets starts_at
     * @return string
     */
    public function getStartsAt()
    {
        return $this->container['starts_at'];
    }

    /**
     * Sets starts_at
     * @param string $starts_at When the contract should start.
     * @return $this
     */
    public function setStartsAt($starts_at)
    {
        $this->container['starts_at'] = $starts_at;

        return $this;
    }

    /**
     * Gets business_units
     * @return \Ageras\Api\PartnerContractBusinessUnitResource[]
     */
    public function getBusinessUnits()
    {
        return $this->container['business_units'];
    }

    /**
     * Sets business_units
     * @param \Ageras\Api\PartnerContractBusinessUnitResource[] $business_units Business units on this contract.
     * @return $this
     */
    public function setBusinessUnits($business_units)
    {
        $this->container['business_units'] = $business_units;

        return $this;
    }

    /**
     * Gets current_partner_contract_period
     * @return \Ageras\Api\PartnerContractPeriodResource
     */
    public function getCurrentPartnerContractPeriod()
    {
        return $this->container['current_partner_contract_period'];
    }

    /**
     * Sets current_partner_contract_period
     * @param \Ageras\Api\PartnerContractPeriodResource $current_partner_contract_period
     * @return $this
     */
    public function setCurrentPartnerContractPeriod($current_partner_contract_period)
    {
        $this->container['current_partner_contract_period'] = $current_partner_contract_period;

        return $this;
    }

    /**
     * Gets intending_to_replace_partner_contract_id
     * @return int
     */
    public function getIntendingToReplacePartnerContractId()
    {
        return $this->container['intending_to_replace_partner_contract_id'];
    }

    /**
     * Sets intending_to_replace_partner_contract_id
     * @param int $intending_to_replace_partner_contract_id ID of the contract that this contract intends to replace.
     * @return $this
     */
    public function setIntendingToReplacePartnerContractId($intending_to_replace_partner_contract_id)
    {
        $this->container['intending_to_replace_partner_contract_id'] = $intending_to_replace_partner_contract_id;

        return $this;
    }

    /**
     * Gets replaces_partner_contract_id
     * @return int
     */
    public function getReplacesPartnerContractId()
    {
        return $this->container['replaces_partner_contract_id'];
    }

    /**
     * Sets replaces_partner_contract_id
     * @param int $replaces_partner_contract_id ID of the contract being replaced by this contract.
     * @return $this
     */
    public function setReplacesPartnerContractId($replaces_partner_contract_id)
    {
        $this->container['replaces_partner_contract_id'] = $replaces_partner_contract_id;

        return $this;
    }

    /**
     * Gets category
     * @return \Ageras\Api\PartnerCategoryResource
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param \Ageras\Api\PartnerCategoryResource $category
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


