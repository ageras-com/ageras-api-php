<?php
/**
 * PartnerNoteResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * PartnerNoteResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartnerNoteResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartnerNoteResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'partner_user_id' => 'int',
        'creator_type' => 'string',
        'note' => 'string',
        'satisfaction' => '\Ageras\Api\PartnerSatisfactionResource',
        'is_pinned' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employee_id',
        'partner_user_id' => 'partner_user_id',
        'creator_type' => 'creator_type',
        'note' => 'note',
        'satisfaction' => 'satisfaction',
        'is_pinned' => 'is_pinned'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'partner_user_id' => 'setPartnerUserId',
        'creator_type' => 'setCreatorType',
        'note' => 'setNote',
        'satisfaction' => 'setSatisfaction',
        'is_pinned' => 'setIsPinned'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'partner_user_id' => 'getPartnerUserId',
        'creator_type' => 'getCreatorType',
        'note' => 'getNote',
        'satisfaction' => 'getSatisfaction',
        'is_pinned' => 'getIsPinned'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CREATOR_TYPE_UNKNOWN = 'unknown';
    const CREATOR_TYPE_EMPLOYEE = 'employee';
    const CREATOR_TYPE_PARTNER_USER = 'partner_user';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCreatorTypeAllowableValues()
    {
        return [
            self::CREATOR_TYPE_UNKNOWN,
            self::CREATOR_TYPE_EMPLOYEE,
            self::CREATOR_TYPE_PARTNER_USER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['partner_user_id'] = isset($data['partner_user_id']) ? $data['partner_user_id'] : null;
        $this->container['creator_type'] = isset($data['creator_type']) ? $data['creator_type'] : 'unknown';
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['satisfaction'] = isset($data['satisfaction']) ? $data['satisfaction'] : null;
        $this->container['is_pinned'] = isset($data['is_pinned']) ? $data['is_pinned'] : false;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["unknown", "employee", "partner_user"];
        if (!in_array($this->container['creator_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'creator_type', must be one of 'unknown', 'employee', 'partner_user'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["unknown", "employee", "partner_user"];
        if (!in_array($this->container['creator_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     * @param int $employee_id
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets partner_user_id
     * @return int
     */
    public function getPartnerUserId()
    {
        return $this->container['partner_user_id'];
    }

    /**
     * Sets partner_user_id
     * @param int $partner_user_id
     * @return $this
     */
    public function setPartnerUserId($partner_user_id)
    {
        $this->container['partner_user_id'] = $partner_user_id;

        return $this;
    }

    /**
     * Gets creator_type
     * @return string
     */
    public function getCreatorType()
    {
        return $this->container['creator_type'];
    }

    /**
     * Sets creator_type
     * @param string $creator_type
     * @return $this
     */
    public function setCreatorType($creator_type)
    {
        $allowed_values = array('unknown', 'employee', 'partner_user');
        if (!is_null($creator_type) && (!in_array($creator_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'creator_type', must be one of 'unknown', 'employee', 'partner_user'");
        }
        $this->container['creator_type'] = $creator_type;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets satisfaction
     * @return \Ageras\Api\PartnerSatisfactionResource
     */
    public function getSatisfaction()
    {
        return $this->container['satisfaction'];
    }

    /**
     * Sets satisfaction
     * @param \Ageras\Api\PartnerSatisfactionResource $satisfaction
     * @return $this
     */
    public function setSatisfaction($satisfaction)
    {
        $this->container['satisfaction'] = $satisfaction;

        return $this;
    }

    /**
     * Gets is_pinned
     * @return bool
     */
    public function getIsPinned()
    {
        return $this->container['is_pinned'];
    }

    /**
     * Sets is_pinned
     * @param bool $is_pinned Is the note pinned?
     * @return $this
     */
    public function setIsPinned($is_pinned)
    {
        $this->container['is_pinned'] = $is_pinned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


