<?php
/**
 * PartnersApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\Configuration;
use \Ageras\Api\ObjectSerializer;

/**
 * PartnersApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PartnersApi
{
    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return PartnersApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation partnersActionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerActionResource $partner_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerResource
     */
    public function partnersActionsCreate($partner_id , $partner_action_resource)
    {
        list($response) = $this->partnersActionsCreateWithHttpInfo($partner_id, $partner_action_resource);
        return $response;
    }

    /**
     * Operation partnersActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerActionResource $partner_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersActionsCreateWithHttpInfo($partner_id , $partner_action_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_action_resource)) {
            $_tempBody = $partner_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerResource',
                '/partners/{partner_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAggregationsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'state' => string,
     *    'is_enabled' => bool,
     *    'employee_id' => string,
     *    'geo_code' => string,
     *    'satisfaction' => string,
     *    'punches_use_speed' => string,
     *    'refill_offer_id' => string,
     *    'industry_id' => string,
     *    'industry' => string,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'sort' => string,
     *    'canvas_status' => string,
     *    'is_public' => bool,
     *    'package_type' => string,
     *    'badge_id' => string,
     *    'digital_leads' => bool,
     *    'has_marketing_package' => bool,
     *    'has_active_contract' => bool,
     *    'has_unused_allocations' => bool,
     *    'wants_exclusive_leads' => bool,
     *    'partner_assignee_client_consultant_employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\AggregationResult
     */
    public function partnersAggregationsIndex($criteria = [])
    {
        list($response) = $this->partnersAggregationsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersAggregationsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'state' => string,
     *    'is_enabled' => bool,
     *    'employee_id' => string,
     *    'geo_code' => string,
     *    'satisfaction' => string,
     *    'punches_use_speed' => string,
     *    'refill_offer_id' => string,
     *    'industry_id' => string,
     *    'industry' => string,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'sort' => string,
     *    'canvas_status' => string,
     *    'is_public' => bool,
     *    'package_type' => string,
     *    'badge_id' => string,
     *    'digital_leads' => bool,
     *    'has_marketing_package' => bool,
     *    'has_active_contract' => bool,
     *    'has_unused_allocations' => bool,
     *    'wants_exclusive_leads' => bool,
     *    'partner_assignee_client_consultant_employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\AggregationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAggregationsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/aggregations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['state'])) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($criteria['state']);
        }
        // query params
        if (isset($criteria['is_enabled'])) {
            $queryParams['is_enabled'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_enabled']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['satisfaction'])) {
            $queryParams['satisfaction'] = $this->apiClient->getSerializer()->toQueryValue($criteria['satisfaction']);
        }
        // query params
        if (isset($criteria['punches_use_speed'])) {
            $queryParams['punches_use_speed'] = $this->apiClient->getSerializer()->toQueryValue($criteria['punches_use_speed']);
        }
        // query params
        if (isset($criteria['refill_offer_id'])) {
            $queryParams['refill_offer_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['refill_offer_id']);
        }
        // query params
        if (isset($criteria['industry_id'])) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry_id']);
        }
        // query params
        if (isset($criteria['industry'])) {
            $queryParams['industry'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry']);
        }
        // query params
        if (isset($criteria['geo_point'])) {
            $queryParams['geo_point'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_point']);
        }
        // query params
        if (isset($criteria['geo_rect'])) {
            $queryParams['geo_rect'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_rect']);
        }
        // query params
        if (isset($criteria['geo_distance'])) {
            $queryParams['geo_distance'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_distance']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['canvas_status'])) {
            $queryParams['canvas_status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['canvas_status']);
        }
        // query params
        if (isset($criteria['is_public'])) {
            $queryParams['is_public'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_public']);
        }
        // query params
        if (isset($criteria['package_type'])) {
            $queryParams['package_type'] = $this->apiClient->getSerializer()->toQueryValue($criteria['package_type']);
        }
        // query params
        if (isset($criteria['badge_id'])) {
            $queryParams['badge_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['badge_id']);
        }
        // query params
        if (isset($criteria['digital_leads'])) {
            $queryParams['digital_leads'] = $this->apiClient->getSerializer()->toQueryValue($criteria['digital_leads']);
        }
        // query params
        if (isset($criteria['has_marketing_package'])) {
            $queryParams['has_marketing_package'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_marketing_package']);
        }
        // query params
        if (isset($criteria['has_active_contract'])) {
            $queryParams['has_active_contract'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_active_contract']);
        }
        // query params
        if (isset($criteria['has_unused_allocations'])) {
            $queryParams['has_unused_allocations'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_unused_allocations']);
        }
        // query params
        if (isset($criteria['wants_exclusive_leads'])) {
            $queryParams['wants_exclusive_leads'] = $this->apiClient->getSerializer()->toQueryValue($criteria['wants_exclusive_leads']);
        }
        // query params
        if (isset($criteria['partner_assignee_client_consultant_employee_id'])) {
            $queryParams['partner_assignee_client_consultant_employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_assignee_client_consultant_employee_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\AggregationResult',
                '/partners/aggregations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\AggregationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\AggregationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAllocationboostsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerAllocationBoostResource $partner_allocation_boost_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerAllocationBoostResource
     */
    public function partnersAllocationboostsCreate($partner_id , $partner_allocation_boost_resource)
    {
        list($response) = $this->partnersAllocationboostsCreateWithHttpInfo($partner_id, $partner_allocation_boost_resource);
        return $response;
    }

    /**
     * Operation partnersAllocationboostsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerAllocationBoostResource $partner_allocation_boost_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerAllocationBoostResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAllocationboostsCreateWithHttpInfo($partner_id , $partner_allocation_boost_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/allocationboosts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_allocation_boost_resource)) {
            $_tempBody = $partner_allocation_boost_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerAllocationBoostResource',
                '/partners/{partner_id}/allocationboosts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerAllocationBoostResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerAllocationBoostResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAllocationdeliveriesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'partner_id' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'revenue_segment_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerAllocationDeliveryResult
     */
    public function partnersAllocationdeliveriesIndex($criteria = [])
    {
        list($response) = $this->partnersAllocationdeliveriesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersAllocationdeliveriesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'partner_id' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'revenue_segment_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerAllocationDeliveryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAllocationdeliveriesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/allocationdeliveries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['process_at_gte'])) {
            $queryParams['process_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_gte']);
        }
        // query params
        if (isset($criteria['process_at_lte'])) {
            $queryParams['process_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_lte']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['revenue_segment_id'])) {
            $queryParams['revenue_segment_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['revenue_segment_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerAllocationDeliveryResult',
                '/partners/allocationdeliveries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerAllocationDeliveryResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerAllocationDeliveryResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAllocationdeliveriesIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'revenue_segment_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerAllocationDeliveryResult
     */
    public function partnersAllocationdeliveriesIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersAllocationdeliveriesIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersAllocationdeliveriesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'revenue_segment_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerAllocationDeliveryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAllocationdeliveriesIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/allocationdeliveries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['process_at_gte'])) {
            $queryParams['process_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_gte']);
        }
        // query params
        if (isset($criteria['process_at_lte'])) {
            $queryParams['process_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_lte']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['revenue_segment_id'])) {
            $queryParams['revenue_segment_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['revenue_segment_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerAllocationDeliveryResult',
                '/partners/{partner_id}/allocationdeliveries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerAllocationDeliveryResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerAllocationDeliveryResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAllocationpausesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerAllocationPauseResource $partner_allocation_pause_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerAllocationPauseResource
     */
    public function partnersAllocationpausesCreate($partner_id , $partner_allocation_pause_resource)
    {
        list($response) = $this->partnersAllocationpausesCreateWithHttpInfo($partner_id, $partner_allocation_pause_resource);
        return $response;
    }

    /**
     * Operation partnersAllocationpausesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerAllocationPauseResource $partner_allocation_pause_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerAllocationPauseResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAllocationpausesCreateWithHttpInfo($partner_id , $partner_allocation_pause_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/allocationpauses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_allocation_pause_resource)) {
            $_tempBody = $partner_allocation_pause_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerAllocationPauseResource',
                '/partners/{partner_id}/allocationpauses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerAllocationPauseResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerAllocationPauseResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAssigneesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerAssigneeResource $partner_assignee_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerAssigneeResource
     */
    public function partnersAssigneesCreate($partner_id , $partner_assignee_resource)
    {
        list($response) = $this->partnersAssigneesCreateWithHttpInfo($partner_id, $partner_assignee_resource);
        return $response;
    }

    /**
     * Operation partnersAssigneesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerAssigneeResource $partner_assignee_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerAssigneeResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAssigneesCreateWithHttpInfo($partner_id , $partner_assignee_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/assignees";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_assignee_resource)) {
            $_tempBody = $partner_assignee_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerAssigneeResource',
                '/partners/{partner_id}/assignees'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerAssigneeResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerAssigneeResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAssigneesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_assignee_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersAssigneesDelete($partner_id,  $partner_assignee_id )
    {
        list($response) = $this->partnersAssigneesDeleteWithHttpInfo($partner_id, $partner_assignee_id);
        return $response;
    }

    /**
     * Operation partnersAssigneesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_assignee_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAssigneesDeleteWithHttpInfo($partner_id,  $partner_assignee_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/assignees/{partner_assignee_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_assignee_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_assignee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_assignee_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/assignees/{partner_assignee_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersAssigneesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'roles' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerAssigneeResult
     */
    public function partnersAssigneesIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersAssigneesIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersAssigneesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'roles' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerAssigneeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersAssigneesIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/assignees";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['roles'])) {
            $queryParams['roles'] = $this->apiClient->getSerializer()->toQueryValue($criteria['roles']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerAssigneeResult',
                '/partners/{partner_id}/assignees'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerAssigneeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerAssigneeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBankaccountsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerBankaccountResource $partner_bankaccount_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBankaccountResource
     */
    public function partnersBankaccountsCreate($partner_id , $partner_bankaccount_resource)
    {
        list($response) = $this->partnersBankaccountsCreateWithHttpInfo($partner_id, $partner_bankaccount_resource);
        return $response;
    }

    /**
     * Operation partnersBankaccountsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerBankaccountResource $partner_bankaccount_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBankaccountResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBankaccountsCreateWithHttpInfo($partner_id , $partner_bankaccount_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/bankaccounts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_bankaccount_resource)) {
            $_tempBody = $partner_bankaccount_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBankaccountResource',
                '/partners/{partner_id}/bankaccounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBankaccountResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBankaccountResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBankaccountsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBankaccountResult
     */
    public function partnersBankaccountsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersBankaccountsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBankaccountsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBankaccountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBankaccountsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/bankaccounts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBankaccountResult',
                '/partners/{partner_id}/bankaccounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBankaccountResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBankaccountResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBrowserpushsubscriptionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\BrowserPushSubscriptionResource $browser_push_subscription_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\BrowserPushSubscriptionResource
     */
    public function partnersBrowserpushsubscriptionsCreate($partner_id , $browser_push_subscription_resource)
    {
        list($response) = $this->partnersBrowserpushsubscriptionsCreateWithHttpInfo($partner_id, $browser_push_subscription_resource);
        return $response;
    }

    /**
     * Operation partnersBrowserpushsubscriptionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\BrowserPushSubscriptionResource $browser_push_subscription_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\BrowserPushSubscriptionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBrowserpushsubscriptionsCreateWithHttpInfo($partner_id , $browser_push_subscription_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/browserpushsubscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($browser_push_subscription_resource)) {
            $_tempBody = $browser_push_subscription_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\BrowserPushSubscriptionResource',
                '/partners/{partner_id}/browserpushsubscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\BrowserPushSubscriptionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\BrowserPushSubscriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitcontractsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerBusinessUnitContractResource $partner_business_unit_contract_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitContractResource
     */
    public function partnersBusinessunitcontractsCreate($partner_id , $partner_business_unit_contract_resource)
    {
        list($response) = $this->partnersBusinessunitcontractsCreateWithHttpInfo($partner_id, $partner_business_unit_contract_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitcontractsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerBusinessUnitContractResource $partner_business_unit_contract_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitContractResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitcontractsCreateWithHttpInfo($partner_id , $partner_business_unit_contract_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunitcontracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_business_unit_contract_resource)) {
            $_tempBody = $partner_business_unit_contract_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitContractResource',
                '/partners/{partner_id}/businessunitcontracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitContractResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitContractResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitcontractsGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitContractResource
     */
    public function partnersBusinessunitcontractsGet($partner_id,  $contract_id )
    {
        list($response) = $this->partnersBusinessunitcontractsGetWithHttpInfo($partner_id, $contract_id);
        return $response;
    }

    /**
     * Operation partnersBusinessunitcontractsGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitContractResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitcontractsGetWithHttpInfo($partner_id,  $contract_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunitcontracts/{contract_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contract_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitContractResource',
                '/partners/{partner_id}/businessunitcontracts/{contract_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitContractResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitContractResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitcontractsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitContractResult
     */
    public function partnersBusinessunitcontractsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersBusinessunitcontractsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitcontractsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitContractResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitcontractsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunitcontracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitContractResult',
                '/partners/{partner_id}/businessunitcontracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitContractResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitContractResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\LeadPartnerAllocationLimitResource $lead_partner_allocation_limit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadPartnerAllocationLimitResource
     */
    public function partnersBusinessunitsAllocationlimitsCreate($partner_id,  $partner_business_unit_id , $lead_partner_allocation_limit_resource)
    {
        list($response) = $this->partnersBusinessunitsAllocationlimitsCreateWithHttpInfo($partner_id, $partner_business_unit_id, $lead_partner_allocation_limit_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\LeadPartnerAllocationLimitResource $lead_partner_allocation_limit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadPartnerAllocationLimitResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsAllocationlimitsCreateWithHttpInfo($partner_id,  $partner_business_unit_id , $lead_partner_allocation_limit_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationlimits";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_partner_allocation_limit_resource)) {
            $_tempBody = $lead_partner_allocation_limit_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadPartnerAllocationLimitResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationlimits'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadPartnerAllocationLimitResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadPartnerAllocationLimitResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param string $limit_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersBusinessunitsAllocationlimitsDelete($partner_id,  $partner_business_unit_id,  $limit_id )
    {
        list($response) = $this->partnersBusinessunitsAllocationlimitsDeleteWithHttpInfo($partner_id, $partner_business_unit_id, $limit_id);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param string $limit_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsAllocationlimitsDeleteWithHttpInfo($partner_id,  $partner_business_unit_id,  $limit_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationlimits/{limit_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // path params
        if ($limit_id !== null) {
            $resourcePath = str_replace(
                "{" . "limit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($limit_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationlimits/{limit_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'effective_at_gte' => string,
     *    'effective_at_lte' => string,
     *    'partner_business_unit_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadPartnerAllocationLimitResult
     */
    public function partnersBusinessunitsAllocationlimitsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersBusinessunitsAllocationlimitsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'effective_at_gte' => string,
     *    'effective_at_lte' => string,
     *    'partner_business_unit_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadPartnerAllocationLimitResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsAllocationlimitsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/allocationlimits";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['effective_at_gte'])) {
            $queryParams['effective_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['effective_at_gte']);
        }
        // query params
        if (isset($criteria['effective_at_lte'])) {
            $queryParams['effective_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['effective_at_lte']);
        }
        // query params
        if (isset($criteria['partner_business_unit_id'])) {
            $queryParams['partner_business_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_business_unit_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadPartnerAllocationLimitResult',
                '/partners/{partner_id}/businessunits/allocationlimits'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadPartnerAllocationLimitResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadPartnerAllocationLimitResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param string $limit_id 
     * @param \Ageras\Api\LeadPartnerAllocationLimitResource $lead_partner_allocation_limit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadPartnerAllocationLimitResource
     */
    public function partnersBusinessunitsAllocationlimitsUpdate($partner_id,  $partner_business_unit_id,  $limit_id , $lead_partner_allocation_limit_resource)
    {
        list($response) = $this->partnersBusinessunitsAllocationlimitsUpdateWithHttpInfo($partner_id, $partner_business_unit_id, $limit_id, $lead_partner_allocation_limit_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsAllocationlimitsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param string $limit_id 
     * @param \Ageras\Api\LeadPartnerAllocationLimitResource $lead_partner_allocation_limit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadPartnerAllocationLimitResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsAllocationlimitsUpdateWithHttpInfo($partner_id,  $partner_business_unit_id,  $limit_id , $lead_partner_allocation_limit_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationlimits/{limit_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // path params
        if ($limit_id !== null) {
            $resourcePath = str_replace(
                "{" . "limit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($limit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_partner_allocation_limit_resource)) {
            $_tempBody = $lead_partner_allocation_limit_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadPartnerAllocationLimitResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationlimits/{limit_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadPartnerAllocationLimitResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadPartnerAllocationLimitResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsAllocationquotasCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\LeadAllocationQuotaResource $lead_allocation_quota_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadAllocationQuotaResource
     */
    public function partnersBusinessunitsAllocationquotasCreate($partner_id,  $partner_business_unit_id , $lead_allocation_quota_resource)
    {
        list($response) = $this->partnersBusinessunitsAllocationquotasCreateWithHttpInfo($partner_id, $partner_business_unit_id, $lead_allocation_quota_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsAllocationquotasCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\LeadAllocationQuotaResource $lead_allocation_quota_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadAllocationQuotaResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsAllocationquotasCreateWithHttpInfo($partner_id,  $partner_business_unit_id , $lead_allocation_quota_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationquotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_allocation_quota_resource)) {
            $_tempBody = $lead_allocation_quota_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadAllocationQuotaResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationquotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadAllocationQuotaResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadAllocationQuotaResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsAllocationquotasDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param string $quota_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersBusinessunitsAllocationquotasDelete($partner_id,  $partner_business_unit_id,  $quota_id )
    {
        list($response) = $this->partnersBusinessunitsAllocationquotasDeleteWithHttpInfo($partner_id, $partner_business_unit_id, $quota_id);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsAllocationquotasDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param string $quota_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsAllocationquotasDeleteWithHttpInfo($partner_id,  $partner_business_unit_id,  $quota_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationquotas/{quota_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // path params
        if ($quota_id !== null) {
            $resourcePath = str_replace(
                "{" . "quota_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($quota_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/allocationquotas/{quota_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsAllocationquotasIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'effective_at_gte' => string,
     *    'effective_at_lte' => string,
     *    'partner_business_unit_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\LeadAllocationQuotaResult
     */
    public function partnersBusinessunitsAllocationquotasIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersBusinessunitsAllocationquotasIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsAllocationquotasIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'effective_at_gte' => string,
     *    'effective_at_lte' => string,
     *    'partner_business_unit_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\LeadAllocationQuotaResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsAllocationquotasIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/allocationquotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['effective_at_gte'])) {
            $queryParams['effective_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['effective_at_gte']);
        }
        // query params
        if (isset($criteria['effective_at_lte'])) {
            $queryParams['effective_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['effective_at_lte']);
        }
        // query params
        if (isset($criteria['partner_business_unit_id'])) {
            $queryParams['partner_business_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_business_unit_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\LeadAllocationQuotaResult',
                '/partners/{partner_id}/businessunits/allocationquotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\LeadAllocationQuotaResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\LeadAllocationQuotaResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerBusinessUnitResource $partner_business_unit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitResource
     */
    public function partnersBusinessunitsCreate($partner_id , $partner_business_unit_resource)
    {
        list($response) = $this->partnersBusinessunitsCreateWithHttpInfo($partner_id, $partner_business_unit_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerBusinessUnitResource $partner_business_unit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsCreateWithHttpInfo($partner_id , $partner_business_unit_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_business_unit_resource)) {
            $_tempBody = $partner_business_unit_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitResource',
                '/partners/{partner_id}/businessunits'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_businessunit_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersBusinessunitsDelete($partner_id,  $partner_businessunit_id )
    {
        list($response) = $this->partnersBusinessunitsDeleteWithHttpInfo($partner_id, $partner_businessunit_id);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_businessunit_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsDeleteWithHttpInfo($partner_id,  $partner_businessunit_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_businessunit_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_businessunit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_businessunit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_businessunit_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/businessunits/{partner_businessunit_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitResource
     */
    public function partnersBusinessunitsGet($partner_id,  $partner_business_unit_id )
    {
        list($response) = $this->partnersBusinessunitsGetWithHttpInfo($partner_id, $partner_business_unit_id);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsGetWithHttpInfo($partner_id,  $partner_business_unit_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'id' => string,
     *    'partner_id' => string,
     *    'geo_code' => string,
     *    'segmentation_criteria' => string,
     *    'segmented_for_lead_id' => int,
     *    'is_active' => bool,
     *    'sort' => string,
     *    'geo_point' => string,
     *    'geo_distance' => int,
     *    'assigned_employee_id' => string,
     *    'sector_id' => string,
     *    'industry_id' => string,
     *    'client_type_id' => string,
     *    'revenue_amount' => string,
     *    'has_marketing_package' => bool,
     *    'has_business_model' => bool,
     *    'sub_geo_region_id' => string,
     *    'is_eligible_for_allocation' => bool,
     *    'primary_industry_id' => string,
     *    'minimum_partner_rating' => int,
     *    'collapse' => string,
     *    'segmented_for_certification_id' => string,
     *    'segmented_for_industry_id' => string,
     *    'segmented_for_client_type_id' => string,
     *    'is_lead_budget' => bool,
     *    'has_unused_allocations' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitResult
     */
    public function partnersBusinessunitsIndex($criteria = [])
    {
        list($response) = $this->partnersBusinessunitsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'id' => string,
     *    'partner_id' => string,
     *    'geo_code' => string,
     *    'segmentation_criteria' => string,
     *    'segmented_for_lead_id' => int,
     *    'is_active' => bool,
     *    'sort' => string,
     *    'geo_point' => string,
     *    'geo_distance' => int,
     *    'assigned_employee_id' => string,
     *    'sector_id' => string,
     *    'industry_id' => string,
     *    'client_type_id' => string,
     *    'revenue_amount' => string,
     *    'has_marketing_package' => bool,
     *    'has_business_model' => bool,
     *    'sub_geo_region_id' => string,
     *    'is_eligible_for_allocation' => bool,
     *    'primary_industry_id' => string,
     *    'minimum_partner_rating' => int,
     *    'collapse' => string,
     *    'segmented_for_certification_id' => string,
     *    'segmented_for_industry_id' => string,
     *    'segmented_for_client_type_id' => string,
     *    'is_lead_budget' => bool,
     *    'has_unused_allocations' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/businessunits";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['id'])) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['segmentation_criteria'])) {
            $queryParams['segmentation_criteria'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmentation_criteria']);
        }
        // query params
        if (isset($criteria['segmented_for_lead_id'])) {
            $queryParams['segmented_for_lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_lead_id']);
        }
        // query params
        if (isset($criteria['is_active'])) {
            $queryParams['is_active'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_active']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['geo_point'])) {
            $queryParams['geo_point'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_point']);
        }
        // query params
        if (isset($criteria['geo_distance'])) {
            $queryParams['geo_distance'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_distance']);
        }
        // query params
        if (isset($criteria['assigned_employee_id'])) {
            $queryParams['assigned_employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['assigned_employee_id']);
        }
        // query params
        if (isset($criteria['sector_id'])) {
            $queryParams['sector_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sector_id']);
        }
        // query params
        if (isset($criteria['industry_id'])) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry_id']);
        }
        // query params
        if (isset($criteria['client_type_id'])) {
            $queryParams['client_type_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_type_id']);
        }
        // query params
        if (isset($criteria['revenue_amount'])) {
            $queryParams['revenue_amount'] = $this->apiClient->getSerializer()->toQueryValue($criteria['revenue_amount']);
        }
        // query params
        if (isset($criteria['has_marketing_package'])) {
            $queryParams['has_marketing_package'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_marketing_package']);
        }
        // query params
        if (isset($criteria['has_business_model'])) {
            $queryParams['has_business_model'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_business_model']);
        }
        // query params
        if (isset($criteria['sub_geo_region_id'])) {
            $queryParams['sub_geo_region_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sub_geo_region_id']);
        }
        // query params
        if (isset($criteria['is_eligible_for_allocation'])) {
            $queryParams['is_eligible_for_allocation'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_eligible_for_allocation']);
        }
        // query params
        if (isset($criteria['primary_industry_id'])) {
            $queryParams['primary_industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['primary_industry_id']);
        }
        // query params
        if (isset($criteria['minimum_partner_rating'])) {
            $queryParams['minimum_partner_rating'] = $this->apiClient->getSerializer()->toQueryValue($criteria['minimum_partner_rating']);
        }
        // query params
        if (isset($criteria['collapse'])) {
            $queryParams['collapse'] = $this->apiClient->getSerializer()->toQueryValue($criteria['collapse']);
        }
        // query params
        if (isset($criteria['segmented_for_certification_id'])) {
            $queryParams['segmented_for_certification_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_certification_id']);
        }
        // query params
        if (isset($criteria['segmented_for_industry_id'])) {
            $queryParams['segmented_for_industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_industry_id']);
        }
        // query params
        if (isset($criteria['segmented_for_client_type_id'])) {
            $queryParams['segmented_for_client_type_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['segmented_for_client_type_id']);
        }
        // query params
        if (isset($criteria['is_lead_budget'])) {
            $queryParams['is_lead_budget'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_lead_budget']);
        }
        // query params
        if (isset($criteria['has_unused_allocations'])) {
            $queryParams['has_unused_allocations'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_unused_allocations']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitResult',
                '/partners/businessunits'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsIndustriesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'is_active' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitIndustryResult
     */
    public function partnersBusinessunitsIndustriesIndex($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        list($response) = $this->partnersBusinessunitsIndustriesIndexWithHttpInfo($partner_id, $partner_business_unit_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsIndustriesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'is_active' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitIndustryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsIndustriesIndexWithHttpInfo($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/industries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['is_active'])) {
            $queryParams['is_active'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_active']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitIndustryResult',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/industries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitIndustryResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitIndustryResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsIndustriesUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitIndustriesResource $partner_business_unit_industries_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitIndustriesResource
     */
    public function partnersBusinessunitsIndustriesUpdate($partner_id,  $partner_business_unit_id , $partner_business_unit_industries_resource)
    {
        list($response) = $this->partnersBusinessunitsIndustriesUpdateWithHttpInfo($partner_id, $partner_business_unit_id, $partner_business_unit_industries_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsIndustriesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitIndustriesResource $partner_business_unit_industries_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitIndustriesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsIndustriesUpdateWithHttpInfo($partner_id,  $partner_business_unit_id , $partner_business_unit_industries_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/industries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_business_unit_industries_resource)) {
            $_tempBody = $partner_business_unit_industries_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitIndustriesResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/industries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitIndustriesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitIndustriesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsRevenuerangesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitRevenueRangeResource $partner_business_unit_revenue_range_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitRevenueRangeResource
     */
    public function partnersBusinessunitsRevenuerangesCreate($partner_id,  $partner_business_unit_id , $partner_business_unit_revenue_range_resource)
    {
        list($response) = $this->partnersBusinessunitsRevenuerangesCreateWithHttpInfo($partner_id, $partner_business_unit_id, $partner_business_unit_revenue_range_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsRevenuerangesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitRevenueRangeResource $partner_business_unit_revenue_range_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitRevenueRangeResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsRevenuerangesCreateWithHttpInfo($partner_id,  $partner_business_unit_id , $partner_business_unit_revenue_range_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/revenueranges";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_business_unit_revenue_range_resource)) {
            $_tempBody = $partner_business_unit_revenue_range_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitRevenueRangeResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/revenueranges'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitRevenueRangeResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitRevenueRangeResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsSectorsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\SectorResult
     */
    public function partnersBusinessunitsSectorsIndex($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        list($response) = $this->partnersBusinessunitsSectorsIndexWithHttpInfo($partner_id, $partner_business_unit_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsSectorsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\SectorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsSectorsIndexWithHttpInfo($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/sectors";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SectorResult',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/sectors'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SectorResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SectorResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsSectorsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerSectorsResource $partner_sectors_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSectorsResource
     */
    public function partnersBusinessunitsSectorsUpdate($partner_id,  $partner_business_unit_id , $partner_sectors_resource)
    {
        list($response) = $this->partnersBusinessunitsSectorsUpdateWithHttpInfo($partner_id, $partner_business_unit_id, $partner_sectors_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsSectorsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerSectorsResource $partner_sectors_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSectorsResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsSectorsUpdateWithHttpInfo($partner_id,  $partner_business_unit_id , $partner_sectors_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/sectors";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_sectors_resource)) {
            $_tempBody = $partner_sectors_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSectorsResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/sectors'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSectorsResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSectorsResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsSegmentationgeoregionsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionResult
     */
    public function partnersBusinessunitsSegmentationgeoregionsIndex($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        list($response) = $this->partnersBusinessunitsSegmentationgeoregionsIndexWithHttpInfo($partner_id, $partner_business_unit_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsSegmentationgeoregionsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsSegmentationgeoregionsIndexWithHttpInfo($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/segmentationgeoregions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionResult',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/segmentationgeoregions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsSegmentationgeoregionsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionsResource $partner_business_unit_segmentation_geo_regions_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionsResource
     */
    public function partnersBusinessunitsSegmentationgeoregionsUpdate($partner_id,  $partner_business_unit_id , $partner_business_unit_segmentation_geo_regions_resource)
    {
        list($response) = $this->partnersBusinessunitsSegmentationgeoregionsUpdateWithHttpInfo($partner_id, $partner_business_unit_id, $partner_business_unit_segmentation_geo_regions_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsSegmentationgeoregionsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionsResource $partner_business_unit_segmentation_geo_regions_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionsResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsSegmentationgeoregionsUpdateWithHttpInfo($partner_id,  $partner_business_unit_id , $partner_business_unit_segmentation_geo_regions_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/segmentationgeoregions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_business_unit_segmentation_geo_regions_resource)) {
            $_tempBody = $partner_business_unit_segmentation_geo_regions_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionsResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/segmentationgeoregions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionsResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitSegmentationGeoRegionsResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsTypesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitTypeResult
     */
    public function partnersBusinessunitsTypesIndex($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        list($response) = $this->partnersBusinessunitsTypesIndexWithHttpInfo($partner_id, $partner_business_unit_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsTypesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitTypeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsTypesIndexWithHttpInfo($partner_id,  $partner_business_unit_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitTypeResult',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitTypeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitTypeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsTypesUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitTypesResource $partner_business_unit_types_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitTypesResource
     */
    public function partnersBusinessunitsTypesUpdate($partner_id,  $partner_business_unit_id , $partner_business_unit_types_resource)
    {
        list($response) = $this->partnersBusinessunitsTypesUpdateWithHttpInfo($partner_id, $partner_business_unit_id, $partner_business_unit_types_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsTypesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitTypesResource $partner_business_unit_types_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitTypesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsTypesUpdateWithHttpInfo($partner_id,  $partner_business_unit_id , $partner_business_unit_types_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}/types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_business_unit_types_resource)) {
            $_tempBody = $partner_business_unit_types_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitTypesResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}/types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitTypesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersBusinessunitsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitResource $partner_business_unit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerBusinessUnitResource
     */
    public function partnersBusinessunitsUpdate($partner_id,  $partner_business_unit_id , $partner_business_unit_resource)
    {
        list($response) = $this->partnersBusinessunitsUpdateWithHttpInfo($partner_id, $partner_business_unit_id, $partner_business_unit_resource);
        return $response;
    }

    /**
     * Operation partnersBusinessunitsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_business_unit_id 
     * @param \Ageras\Api\PartnerBusinessUnitResource $partner_business_unit_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerBusinessUnitResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersBusinessunitsUpdateWithHttpInfo($partner_id,  $partner_business_unit_id , $partner_business_unit_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/businessunits/{partner_business_unit_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_business_unit_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_business_unit_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_business_unit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_business_unit_resource)) {
            $_tempBody = $partner_business_unit_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerBusinessUnitResource',
                '/partners/{partner_id}/businessunits/{partner_business_unit_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerBusinessUnitResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerBusinessUnitResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCategoriesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'id' => string,
     *    'identifier' => string,
     *    'title' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerCategoryResult
     */
    public function partnersCategoriesIndex($criteria = [])
    {
        list($response) = $this->partnersCategoriesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersCategoriesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'id' => string,
     *    'identifier' => string,
     *    'title' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerCategoryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCategoriesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['id'])) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['id']);
        }
        // query params
        if (isset($criteria['identifier'])) {
            $queryParams['identifier'] = $this->apiClient->getSerializer()->toQueryValue($criteria['identifier']);
        }
        // query params
        if (isset($criteria['title'])) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($criteria['title']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerCategoryResult',
                '/partners/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerCategoryResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerCategoryResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\CertificationResource $certification_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\CertificationResource
     */
    public function partnersCertificationsCreate($partner_id , $certification_resource)
    {
        list($response) = $this->partnersCertificationsCreateWithHttpInfo($partner_id, $certification_resource);
        return $response;
    }

    /**
     * Operation partnersCertificationsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\CertificationResource $certification_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\CertificationResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCertificationsCreateWithHttpInfo($partner_id , $certification_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($certification_resource)) {
            $_tempBody = $certification_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\CertificationResource',
                '/partners/{partner_id}/certifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\CertificationResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\CertificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $certification_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersCertificationsDelete($partner_id,  $certification_id )
    {
        list($response) = $this->partnersCertificationsDeleteWithHttpInfo($partner_id, $certification_id);
        return $response;
    }

    /**
     * Operation partnersCertificationsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $certification_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCertificationsDeleteWithHttpInfo($partner_id,  $certification_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications/{certification_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($certification_id !== null) {
            $resourcePath = str_replace(
                "{" . "certification_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($certification_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/certifications/{certification_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $certification_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\CertificationResource
     */
    public function partnersCertificationsGet($partner_id,  $certification_id )
    {
        list($response) = $this->partnersCertificationsGetWithHttpInfo($partner_id, $certification_id);
        return $response;
    }

    /**
     * Operation partnersCertificationsGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $certification_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\CertificationResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCertificationsGetWithHttpInfo($partner_id,  $certification_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications/{certification_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($certification_id !== null) {
            $resourcePath = str_replace(
                "{" . "certification_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($certification_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\CertificationResource',
                '/partners/{partner_id}/certifications/{certification_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\CertificationResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\CertificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'types' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\CertificationResult
     */
    public function partnersCertificationsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersCertificationsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersCertificationsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'types' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\CertificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCertificationsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['types'])) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($criteria['types']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\CertificationResult',
                '/partners/{partner_id}/certifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\CertificationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\CertificationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCertificationsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerCertificationsResource $partner_certifications_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerCertificationsResource
     */
    public function partnersCertificationsUpdate($partner_id , $partner_certifications_resource)
    {
        list($response) = $this->partnersCertificationsUpdateWithHttpInfo($partner_id, $partner_certifications_resource);
        return $response;
    }

    /**
     * Operation partnersCertificationsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerCertificationsResource $partner_certifications_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerCertificationsResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCertificationsUpdateWithHttpInfo($partner_id , $partner_certifications_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/certifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_certifications_resource)) {
            $_tempBody = $partner_certifications_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerCertificationsResource',
                '/partners/{partner_id}/certifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerCertificationsResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerCertificationsResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContentsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersContentsDelete($partner_id,  $content_key )
    {
        list($response) = $this->partnersContentsDeleteWithHttpInfo($partner_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersContentsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContentsDeleteWithHttpInfo($partner_id,  $content_key )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/contents/{content_key}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContentsGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContentResource
     */
    public function partnersContentsGet($partner_id,  $content_key )
    {
        list($response) = $this->partnersContentsGetWithHttpInfo($partner_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersContentsGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContentsGetWithHttpInfo($partner_id,  $content_key )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContentResource',
                '/partners/{partner_id}/contents/{content_key}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContentsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $content_key 
     * @param \Ageras\Api\PartnerContentResource $partner_content_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContentResource
     */
    public function partnersContentsUpdate($partner_id,  $content_key , $partner_content_resource)
    {
        list($response) = $this->partnersContentsUpdateWithHttpInfo($partner_id, $content_key, $partner_content_resource);
        return $response;
    }

    /**
     * Operation partnersContentsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $content_key 
     * @param \Ageras\Api\PartnerContentResource $partner_content_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContentsUpdateWithHttpInfo($partner_id,  $content_key , $partner_content_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_content_resource)) {
            $_tempBody = $partner_content_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContentResource',
                '/partners/{partner_id}/contents/{content_key}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractoffergroupsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerContractOfferGroupResource $partner_contract_offer_group_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractOfferGroupResource
     */
    public function partnersContractoffergroupsCreate($partner_id , $partner_contract_offer_group_resource)
    {
        list($response) = $this->partnersContractoffergroupsCreateWithHttpInfo($partner_id, $partner_contract_offer_group_resource);
        return $response;
    }

    /**
     * Operation partnersContractoffergroupsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerContractOfferGroupResource $partner_contract_offer_group_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractOfferGroupResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractoffergroupsCreateWithHttpInfo($partner_id , $partner_contract_offer_group_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contractoffergroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_contract_offer_group_resource)) {
            $_tempBody = $partner_contract_offer_group_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractOfferGroupResource',
                '/partners/{partner_id}/contractoffergroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractOfferGroupResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractOfferGroupResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractoffergroupsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_archived' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractOfferGroupResult
     */
    public function partnersContractoffergroupsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersContractoffergroupsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersContractoffergroupsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_archived' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractOfferGroupResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractoffergroupsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contractoffergroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['is_archived'])) {
            $queryParams['is_archived'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_archived']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractOfferGroupResult',
                '/partners/{partner_id}/contractoffergroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractOfferGroupResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractOfferGroupResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsActionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @param \Ageras\Api\PartnerContractActionResource $partner_contract_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractResource
     */
    public function partnersContractsActionsCreate($partner_id,  $contract_id , $partner_contract_action_resource)
    {
        list($response) = $this->partnersContractsActionsCreateWithHttpInfo($partner_id, $contract_id, $partner_contract_action_resource);
        return $response;
    }

    /**
     * Operation partnersContractsActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @param \Ageras\Api\PartnerContractActionResource $partner_contract_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsActionsCreateWithHttpInfo($partner_id,  $contract_id , $partner_contract_action_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{contract_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contract_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_contract_action_resource)) {
            $_tempBody = $partner_contract_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractResource',
                '/partners/{partner_id}/contracts/{contract_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsAllocationboostsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $boost_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersContractsAllocationboostsDelete($partner_id,  $partner_contract_id,  $boost_id )
    {
        list($response) = $this->partnersContractsAllocationboostsDeleteWithHttpInfo($partner_id, $partner_contract_id, $boost_id);
        return $response;
    }

    /**
     * Operation partnersContractsAllocationboostsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $boost_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsAllocationboostsDeleteWithHttpInfo($partner_id,  $partner_contract_id,  $boost_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{partner_contract_id}/allocationboosts/{boost_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_contract_id),
                $resourcePath
            );
        }
        // path params
        if ($boost_id !== null) {
            $resourcePath = str_replace(
                "{" . "boost_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($boost_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/contracts/{partner_contract_id}/allocationboosts/{boost_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsAllocationboostsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $boost_id 
     * @param \Ageras\Api\DateSpanResource $date_span_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\DateSpanResource
     */
    public function partnersContractsAllocationboostsUpdate($partner_id,  $partner_contract_id,  $boost_id , $date_span_resource)
    {
        list($response) = $this->partnersContractsAllocationboostsUpdateWithHttpInfo($partner_id, $partner_contract_id, $boost_id, $date_span_resource);
        return $response;
    }

    /**
     * Operation partnersContractsAllocationboostsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $boost_id 
     * @param \Ageras\Api\DateSpanResource $date_span_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\DateSpanResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsAllocationboostsUpdateWithHttpInfo($partner_id,  $partner_contract_id,  $boost_id , $date_span_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{partner_contract_id}/allocationboosts/{boost_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_contract_id),
                $resourcePath
            );
        }
        // path params
        if ($boost_id !== null) {
            $resourcePath = str_replace(
                "{" . "boost_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($boost_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($date_span_resource)) {
            $_tempBody = $date_span_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\DateSpanResource',
                '/partners/{partner_id}/contracts/{partner_contract_id}/allocationboosts/{boost_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\DateSpanResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\DateSpanResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsAllocationpausesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $pause_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersContractsAllocationpausesDelete($partner_id,  $partner_contract_id,  $pause_id )
    {
        list($response) = $this->partnersContractsAllocationpausesDeleteWithHttpInfo($partner_id, $partner_contract_id, $pause_id);
        return $response;
    }

    /**
     * Operation partnersContractsAllocationpausesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $pause_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsAllocationpausesDeleteWithHttpInfo($partner_id,  $partner_contract_id,  $pause_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{partner_contract_id}/allocationpauses/{pause_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_contract_id),
                $resourcePath
            );
        }
        // path params
        if ($pause_id !== null) {
            $resourcePath = str_replace(
                "{" . "pause_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($pause_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/contracts/{partner_contract_id}/allocationpauses/{pause_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsAllocationpausesUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $pause_id 
     * @param \Ageras\Api\DateSpanResource $date_span_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\DateSpanResource
     */
    public function partnersContractsAllocationpausesUpdate($partner_id,  $partner_contract_id,  $pause_id , $date_span_resource)
    {
        list($response) = $this->partnersContractsAllocationpausesUpdateWithHttpInfo($partner_id, $partner_contract_id, $pause_id, $date_span_resource);
        return $response;
    }

    /**
     * Operation partnersContractsAllocationpausesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param string $pause_id 
     * @param \Ageras\Api\DateSpanResource $date_span_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\DateSpanResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsAllocationpausesUpdateWithHttpInfo($partner_id,  $partner_contract_id,  $pause_id , $date_span_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{partner_contract_id}/allocationpauses/{pause_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_contract_id),
                $resourcePath
            );
        }
        // path params
        if ($pause_id !== null) {
            $resourcePath = str_replace(
                "{" . "pause_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($pause_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($date_span_resource)) {
            $_tempBody = $date_span_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\DateSpanResource',
                '/partners/{partner_id}/contracts/{partner_contract_id}/allocationpauses/{pause_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\DateSpanResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\DateSpanResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerContractResource $partner_contract_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractResource
     */
    public function partnersContractsCreate($partner_id , $partner_contract_resource)
    {
        list($response) = $this->partnersContractsCreateWithHttpInfo($partner_id, $partner_contract_resource);
        return $response;
    }

    /**
     * Operation partnersContractsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerContractResource $partner_contract_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsCreateWithHttpInfo($partner_id , $partner_contract_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_contract_resource)) {
            $_tempBody = $partner_contract_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractResource',
                '/partners/{partner_id}/contracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersContractsDelete($partner_id,  $partner_contract_id )
    {
        list($response) = $this->partnersContractsDeleteWithHttpInfo($partner_id, $partner_contract_id);
        return $response;
    }

    /**
     * Operation partnersContractsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsDeleteWithHttpInfo($partner_id,  $partner_contract_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{partner_contract_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_contract_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/contracts/{partner_contract_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractResource
     */
    public function partnersContractsGet($partner_id,  $contract_id )
    {
        list($response) = $this->partnersContractsGetWithHttpInfo($partner_id, $contract_id);
        return $response;
    }

    /**
     * Operation partnersContractsGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsGetWithHttpInfo($partner_id,  $contract_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{contract_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contract_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractResource',
                '/partners/{partner_id}/contracts/{contract_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_accepted' => bool,
     *    'is_archived' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractResult
     */
    public function partnersContractsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersContractsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersContractsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_accepted' => bool,
     *    'is_archived' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['is_accepted'])) {
            $queryParams['is_accepted'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_accepted']);
        }
        // query params
        if (isset($criteria['is_archived'])) {
            $queryParams['is_archived'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_archived']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractResult',
                '/partners/{partner_id}/contracts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsPdfGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractPdfResource
     */
    public function partnersContractsPdfGet($partner_id,  $contract_id )
    {
        list($response) = $this->partnersContractsPdfGetWithHttpInfo($partner_id, $contract_id);
        return $response;
    }

    /**
     * Operation partnersContractsPdfGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractPdfResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsPdfGetWithHttpInfo($partner_id,  $contract_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{contract_id}/pdf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contract_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractPdfResource',
                '/partners/{partner_id}/contracts/{contract_id}/pdf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractPdfResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractPdfResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsSignedpdfCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @param \Ageras\Api\PartnerContractSignedPdfFileResource $partner_contract_signed_pdf_file_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractSignedPdfFileResource
     */
    public function partnersContractsSignedpdfCreate($partner_id,  $contract_id , $partner_contract_signed_pdf_file_resource)
    {
        list($response) = $this->partnersContractsSignedpdfCreateWithHttpInfo($partner_id, $contract_id, $partner_contract_signed_pdf_file_resource);
        return $response;
    }

    /**
     * Operation partnersContractsSignedpdfCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @param \Ageras\Api\PartnerContractSignedPdfFileResource $partner_contract_signed_pdf_file_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractSignedPdfFileResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsSignedpdfCreateWithHttpInfo($partner_id,  $contract_id , $partner_contract_signed_pdf_file_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{contract_id}/signedpdf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contract_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_contract_signed_pdf_file_resource)) {
            $_tempBody = $partner_contract_signed_pdf_file_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractSignedPdfFileResource',
                '/partners/{partner_id}/contracts/{contract_id}/signedpdf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractSignedPdfFileResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractSignedPdfFileResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsSignedpdfGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractPdfResource
     */
    public function partnersContractsSignedpdfGet($partner_id,  $contract_id )
    {
        list($response) = $this->partnersContractsSignedpdfGetWithHttpInfo($partner_id, $contract_id);
        return $response;
    }

    /**
     * Operation partnersContractsSignedpdfGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractPdfResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsSignedpdfGetWithHttpInfo($partner_id,  $contract_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{contract_id}/signedpdf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contract_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractPdfResource',
                '/partners/{partner_id}/contracts/{contract_id}/signedpdf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractPdfResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractPdfResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsSigningurlGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractResource
     */
    public function partnersContractsSigningurlGet($partner_id,  $contract_id )
    {
        list($response) = $this->partnersContractsSigningurlGetWithHttpInfo($partner_id, $contract_id);
        return $response;
    }

    /**
     * Operation partnersContractsSigningurlGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $contract_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsSigningurlGetWithHttpInfo($partner_id,  $contract_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{contract_id}/signingurl";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contract_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractResource',
                '/partners/{partner_id}/contracts/{contract_id}/signingurl'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersContractsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param \Ageras\Api\PartnerContractResource $partner_contract_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContractResource
     */
    public function partnersContractsUpdate($partner_id,  $partner_contract_id , $partner_contract_resource)
    {
        list($response) = $this->partnersContractsUpdateWithHttpInfo($partner_id, $partner_contract_id, $partner_contract_resource);
        return $response;
    }

    /**
     * Operation partnersContractsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_contract_id 
     * @param \Ageras\Api\PartnerContractResource $partner_contract_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContractResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersContractsUpdateWithHttpInfo($partner_id,  $partner_contract_id , $partner_contract_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/contracts/{partner_contract_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_contract_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_contract_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_contract_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_contract_resource)) {
            $_tempBody = $partner_contract_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContractResource',
                '/partners/{partner_id}/contracts/{partner_contract_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContractResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContractResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCouponsActionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $coupon_id 
     * @param \Ageras\Api\PartnerCouponActionResource $partner_coupon_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerCouponResource
     */
    public function partnersCouponsActionsCreate($partner_id,  $coupon_id , $partner_coupon_action_resource)
    {
        list($response) = $this->partnersCouponsActionsCreateWithHttpInfo($partner_id, $coupon_id, $partner_coupon_action_resource);
        return $response;
    }

    /**
     * Operation partnersCouponsActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $coupon_id 
     * @param \Ageras\Api\PartnerCouponActionResource $partner_coupon_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerCouponResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCouponsActionsCreateWithHttpInfo($partner_id,  $coupon_id , $partner_coupon_action_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/coupons/{coupon_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($coupon_id !== null) {
            $resourcePath = str_replace(
                "{" . "coupon_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($coupon_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_coupon_action_resource)) {
            $_tempBody = $partner_coupon_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerCouponResource',
                '/partners/{partner_id}/coupons/{coupon_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerCouponResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerCouponResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCouponsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerCouponResource $partner_coupon_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerCouponResource
     */
    public function partnersCouponsCreate($partner_id , $partner_coupon_resource)
    {
        list($response) = $this->partnersCouponsCreateWithHttpInfo($partner_id, $partner_coupon_resource);
        return $response;
    }

    /**
     * Operation partnersCouponsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerCouponResource $partner_coupon_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerCouponResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCouponsCreateWithHttpInfo($partner_id , $partner_coupon_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/coupons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_coupon_resource)) {
            $_tempBody = $partner_coupon_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerCouponResource',
                '/partners/{partner_id}/coupons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerCouponResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerCouponResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCouponsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'show_expired' => bool,
     *    'show_deactivated' => bool,
     *    'show_empty' => bool,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerCouponResult
     */
    public function partnersCouponsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersCouponsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersCouponsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'show_expired' => bool,
     *    'show_deactivated' => bool,
     *    'show_empty' => bool,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerCouponResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCouponsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/coupons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['show_expired'])) {
            $queryParams['show_expired'] = $this->apiClient->getSerializer()->toQueryValue($criteria['show_expired']);
        }
        // query params
        if (isset($criteria['show_deactivated'])) {
            $queryParams['show_deactivated'] = $this->apiClient->getSerializer()->toQueryValue($criteria['show_deactivated']);
        }
        // query params
        if (isset($criteria['show_empty'])) {
            $queryParams['show_empty'] = $this->apiClient->getSerializer()->toQueryValue($criteria['show_empty']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerCouponResult',
                '/partners/{partner_id}/coupons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerCouponResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerCouponResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersCreate
     *
     * Create a Partner
     *
     * @param \Ageras\Api\PartnerResource $partner_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerResource
     */
    public function partnersCreate($partner_resource)
    {
        list($response) = $this->partnersCreateWithHttpInfo($partner_resource);
        return $response;
    }

    /**
     * Operation partnersCreateWithHttpInfo
     *
     * Create a Partner
     *
     * @param \Ageras\Api\PartnerResource $partner_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersCreateWithHttpInfo($partner_resource)
    {
        // parse inputs
        $resourcePath = "/partners";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($partner_resource)) {
            $_tempBody = $partner_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerResource',
                '/partners'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDelete
     *
     * 
     *
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersDelete($partner_id )
    {
        list($response) = $this->partnersDeleteWithHttpInfo($partner_id);
        return $response;
    }

    /**
     * Operation partnersDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeleteWithHttpInfo($partner_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesCreate
     *
     * 
     *
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResource
     */
    public function partnersDeliverablesCreate($partner_deliverable_resource)
    {
        list($response) = $this->partnersDeliverablesCreateWithHttpInfo($partner_deliverable_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesCreateWithHttpInfo($partner_deliverable_resource)
    {
        // parse inputs
        $resourcePath = "/partners/deliverables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_resource)) {
            $_tempBody = $partner_deliverable_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResource',
                '/partners/deliverables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesCreate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResource
     */
    public function partnersDeliverablesCreate_0($partner_id , $partner_deliverable_resource)
    {
        list($response) = $this->partnersDeliverablesCreate_0WithHttpInfo($partner_id, $partner_deliverable_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesCreate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesCreate_0WithHttpInfo($partner_id , $partner_deliverable_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_resource)) {
            $_tempBody = $partner_deliverable_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResource',
                '/partners/{partner_id}/deliverables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesGet
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResource
     */
    public function partnersDeliverablesGet($partner_deliverable_id )
    {
        list($response) = $this->partnersDeliverablesGetWithHttpInfo($partner_deliverable_id);
        return $response;
    }

    /**
     * Operation partnersDeliverablesGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesGetWithHttpInfo($partner_deliverable_id )
    {
        // parse inputs
        $resourcePath = "/partners/deliverables/{partnerDeliverable_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResource',
                '/partners/deliverables/{partnerDeliverable_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesGet_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResource
     */
    public function partnersDeliverablesGet_0($partner_id,  $partner_deliverable_id )
    {
        list($response) = $this->partnersDeliverablesGet_0WithHttpInfo($partner_id, $partner_deliverable_id);
        return $response;
    }

    /**
     * Operation partnersDeliverablesGet_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesGet_0WithHttpInfo($partner_id,  $partner_deliverable_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables/{partnerDeliverable_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResource',
                '/partners/{partner_id}/deliverables/{partnerDeliverable_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'partner_id' => string,
     *    'partner_deliverable_id' => string,
     *    'status' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResult
     */
    public function partnersDeliverablesIndex($criteria = [])
    {
        list($response) = $this->partnersDeliverablesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersDeliverablesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'partner_id' => string,
     *    'partner_deliverable_id' => string,
     *    'status' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/deliverables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['partner_deliverable_id'])) {
            $queryParams['partner_deliverable_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_deliverable_id']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResult',
                '/partners/deliverables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'partner_deliverable_id' => string,
     *    'status' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResult
     */
    public function partnersDeliverablesIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersDeliverablesIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersDeliverablesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'partner_deliverable_id' => string,
     *    'status' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['partner_deliverable_id'])) {
            $queryParams['partner_deliverable_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_deliverable_id']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResult',
                '/partners/{partner_id}/deliverables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesCreate
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResource
     */
    public function partnersDeliverablesLinesCreate($partner_deliverable_id , $partner_deliverable_line_resource)
    {
        list($response) = $this->partnersDeliverablesLinesCreateWithHttpInfo($partner_deliverable_id, $partner_deliverable_line_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesCreateWithHttpInfo($partner_deliverable_id , $partner_deliverable_line_resource)
    {
        // parse inputs
        $resourcePath = "/partners/deliverables/{partnerDeliverable_id}/lines";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_line_resource)) {
            $_tempBody = $partner_deliverable_line_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResource',
                '/partners/deliverables/{partnerDeliverable_id}/lines'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesCreate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResource
     */
    public function partnersDeliverablesLinesCreate_0($partner_id,  $partner_deliverable_id , $partner_deliverable_line_resource)
    {
        list($response) = $this->partnersDeliverablesLinesCreate_0WithHttpInfo($partner_id, $partner_deliverable_id, $partner_deliverable_line_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesCreate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesCreate_0WithHttpInfo($partner_id,  $partner_deliverable_id , $partner_deliverable_line_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_line_resource)) {
            $_tempBody = $partner_deliverable_line_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResource',
                '/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesDelete
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersDeliverablesLinesDelete($partner_deliverable_id,  $partner_deliverable_line_id )
    {
        list($response) = $this->partnersDeliverablesLinesDeleteWithHttpInfo($partner_deliverable_id, $partner_deliverable_line_id);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesDeleteWithHttpInfo($partner_deliverable_id,  $partner_deliverable_line_id )
    {
        // parse inputs
        $resourcePath = "/partners/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverableLine_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_line_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesDelete_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersDeliverablesLinesDelete_0($partner_id,  $partner_deliverable_id,  $partner_deliverable_line_id )
    {
        list($response) = $this->partnersDeliverablesLinesDelete_0WithHttpInfo($partner_id, $partner_deliverable_id, $partner_deliverable_line_id);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesDelete_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesDelete_0WithHttpInfo($partner_id,  $partner_deliverable_id,  $partner_deliverable_line_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverableLine_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_line_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesGet
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResource
     */
    public function partnersDeliverablesLinesGet($partner_deliverable_id,  $partner_deliverable_line_id )
    {
        list($response) = $this->partnersDeliverablesLinesGetWithHttpInfo($partner_deliverable_id, $partner_deliverable_line_id);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesGetWithHttpInfo($partner_deliverable_id,  $partner_deliverable_line_id )
    {
        // parse inputs
        $resourcePath = "/partners/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverableLine_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_line_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResource',
                '/partners/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesGet_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResource
     */
    public function partnersDeliverablesLinesGet_0($partner_id,  $partner_deliverable_id,  $partner_deliverable_line_id )
    {
        list($response) = $this->partnersDeliverablesLinesGet_0WithHttpInfo($partner_id, $partner_deliverable_id, $partner_deliverable_line_id);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesGet_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesGet_0WithHttpInfo($partner_id,  $partner_deliverable_id,  $partner_deliverable_line_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverableLine_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_line_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResource',
                '/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesIndex
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResult
     */
    public function partnersDeliverablesLinesIndex($partner_deliverable_id , $criteria = [])
    {
        list($response) = $this->partnersDeliverablesLinesIndexWithHttpInfo($partner_deliverable_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesIndexWithHttpInfo($partner_deliverable_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/deliverables/{partnerDeliverable_id}/lines";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResult',
                '/partners/deliverables/{partnerDeliverable_id}/lines'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResult
     */
    public function partnersDeliverablesLinesIndex_0($partner_id,  $partner_deliverable_id , $criteria = [])
    {
        list($response) = $this->partnersDeliverablesLinesIndex_0WithHttpInfo($partner_id, $partner_deliverable_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param $criteria = [
     *    'client_id' => string,
     *    'lead_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesIndex_0WithHttpInfo($partner_id,  $partner_deliverable_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['client_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResult',
                '/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesUpdate
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResource
     */
    public function partnersDeliverablesLinesUpdate($partner_deliverable_id,  $partner_deliverable_line_id , $partner_deliverable_line_resource)
    {
        list($response) = $this->partnersDeliverablesLinesUpdateWithHttpInfo($partner_deliverable_id, $partner_deliverable_line_id, $partner_deliverable_line_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesUpdateWithHttpInfo($partner_deliverable_id,  $partner_deliverable_line_id , $partner_deliverable_line_resource)
    {
        // parse inputs
        $resourcePath = "/partners/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverableLine_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_line_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_line_resource)) {
            $_tempBody = $partner_deliverable_line_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResource',
                '/partners/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesLinesUpdate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableLineResource
     */
    public function partnersDeliverablesLinesUpdate_0($partner_id,  $partner_deliverable_id,  $partner_deliverable_line_id , $partner_deliverable_line_resource)
    {
        list($response) = $this->partnersDeliverablesLinesUpdate_0WithHttpInfo($partner_id, $partner_deliverable_id, $partner_deliverable_line_id, $partner_deliverable_line_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesLinesUpdate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param string $partner_deliverable_line_id 
     * @param \Ageras\Api\PartnerDeliverableLineResource $partner_deliverable_line_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableLineResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesLinesUpdate_0WithHttpInfo($partner_id,  $partner_deliverable_id,  $partner_deliverable_line_id , $partner_deliverable_line_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverableLine_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_line_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_line_resource)) {
            $_tempBody = $partner_deliverable_line_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableLineResource',
                '/partners/{partner_id}/deliverables/{partnerDeliverable_id}/lines/{partnerDeliverableLine_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableLineResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableLineResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesUpdate
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResource
     */
    public function partnersDeliverablesUpdate($partner_deliverable_id , $partner_deliverable_resource)
    {
        list($response) = $this->partnersDeliverablesUpdateWithHttpInfo($partner_deliverable_id, $partner_deliverable_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesUpdateWithHttpInfo($partner_deliverable_id , $partner_deliverable_resource)
    {
        // parse inputs
        $resourcePath = "/partners/deliverables/{partnerDeliverable_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_resource)) {
            $_tempBody = $partner_deliverable_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResource',
                '/partners/deliverables/{partnerDeliverable_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDeliverablesUpdate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDeliverableResource
     */
    public function partnersDeliverablesUpdate_0($partner_id,  $partner_deliverable_id , $partner_deliverable_resource)
    {
        list($response) = $this->partnersDeliverablesUpdate_0WithHttpInfo($partner_id, $partner_deliverable_id, $partner_deliverable_resource);
        return $response;
    }

    /**
     * Operation partnersDeliverablesUpdate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_deliverable_id 
     * @param \Ageras\Api\PartnerDeliverableResource $partner_deliverable_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDeliverableResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDeliverablesUpdate_0WithHttpInfo($partner_id,  $partner_deliverable_id , $partner_deliverable_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/deliverables/{partnerDeliverable_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_deliverable_id !== null) {
            $resourcePath = str_replace(
                "{" . "partnerDeliverable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_deliverable_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_deliverable_resource)) {
            $_tempBody = $partner_deliverable_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDeliverableResource',
                '/partners/{partner_id}/deliverables/{partnerDeliverable_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDeliverableResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDeliverableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDiscountsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerDiscountResource $partner_discount_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDiscountResource
     */
    public function partnersDiscountsCreate($partner_id , $partner_discount_resource)
    {
        list($response) = $this->partnersDiscountsCreateWithHttpInfo($partner_id, $partner_discount_resource);
        return $response;
    }

    /**
     * Operation partnersDiscountsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerDiscountResource $partner_discount_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDiscountResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDiscountsCreateWithHttpInfo($partner_id , $partner_discount_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/discounts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_discount_resource)) {
            $_tempBody = $partner_discount_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDiscountResource',
                '/partners/{partner_id}/discounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDiscountResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDiscountResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDiscountsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_package_type_discount_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersDiscountsDelete($partner_id,  $partner_package_type_discount_id )
    {
        list($response) = $this->partnersDiscountsDeleteWithHttpInfo($partner_id, $partner_package_type_discount_id);
        return $response;
    }

    /**
     * Operation partnersDiscountsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_package_type_discount_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDiscountsDeleteWithHttpInfo($partner_id,  $partner_package_type_discount_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/discounts/{partner_package_type_discount_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_package_type_discount_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_package_type_discount_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_package_type_discount_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/discounts/{partner_package_type_discount_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersDiscountsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_active' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerDiscountResult
     */
    public function partnersDiscountsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersDiscountsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersDiscountsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_active' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerDiscountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersDiscountsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/discounts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['is_active'])) {
            $queryParams['is_active'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_active']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerDiscountResult',
                '/partners/{partner_id}/discounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerDiscountResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerDiscountResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersEmployeenotesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerEmployeeNoteResource $partner_employee_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerEmployeeNoteResource
     */
    public function partnersEmployeenotesCreate($partner_id , $partner_employee_note_resource)
    {
        list($response) = $this->partnersEmployeenotesCreateWithHttpInfo($partner_id, $partner_employee_note_resource);
        return $response;
    }

    /**
     * Operation partnersEmployeenotesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerEmployeeNoteResource $partner_employee_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerEmployeeNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersEmployeenotesCreateWithHttpInfo($partner_id , $partner_employee_note_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/employeenotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_employee_note_resource)) {
            $_tempBody = $partner_employee_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerEmployeeNoteResource',
                '/partners/{partner_id}/employeenotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerEmployeeNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerEmployeeNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersEmployeenotesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $employee_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersEmployeenotesDelete($partner_id,  $employee_note_id )
    {
        list($response) = $this->partnersEmployeenotesDeleteWithHttpInfo($partner_id, $employee_note_id);
        return $response;
    }

    /**
     * Operation partnersEmployeenotesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $employee_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersEmployeenotesDeleteWithHttpInfo($partner_id,  $employee_note_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/employeenotes/{employee_note_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_note_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/employeenotes/{employee_note_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersEmployeenotesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'lead_id' => int,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerEmployeeNoteResult
     */
    public function partnersEmployeenotesIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersEmployeenotesIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersEmployeenotesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'lead_id' => int,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerEmployeeNoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersEmployeenotesIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/employeenotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerEmployeeNoteResult',
                '/partners/{partner_id}/employeenotes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerEmployeeNoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerEmployeeNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersFeaturesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerFeatureResource $partner_feature_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerFeatureResource
     */
    public function partnersFeaturesCreate($partner_id , $partner_feature_resource)
    {
        list($response) = $this->partnersFeaturesCreateWithHttpInfo($partner_id, $partner_feature_resource);
        return $response;
    }

    /**
     * Operation partnersFeaturesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerFeatureResource $partner_feature_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerFeatureResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersFeaturesCreateWithHttpInfo($partner_id , $partner_feature_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/features";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_feature_resource)) {
            $_tempBody = $partner_feature_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerFeatureResource',
                '/partners/{partner_id}/features'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerFeatureResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerFeatureResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersFeaturesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $feature_identifier 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersFeaturesDelete($partner_id,  $feature_identifier )
    {
        list($response) = $this->partnersFeaturesDeleteWithHttpInfo($partner_id, $feature_identifier);
        return $response;
    }

    /**
     * Operation partnersFeaturesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $feature_identifier 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersFeaturesDeleteWithHttpInfo($partner_id,  $feature_identifier )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/features/{feature_identifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($feature_identifier !== null) {
            $resourcePath = str_replace(
                "{" . "feature_identifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($feature_identifier),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/features/{feature_identifier}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersFeesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerFeeResource $partner_fee_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerFeeResource
     */
    public function partnersFeesCreate($partner_id , $partner_fee_resource)
    {
        list($response) = $this->partnersFeesCreateWithHttpInfo($partner_id, $partner_fee_resource);
        return $response;
    }

    /**
     * Operation partnersFeesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerFeeResource $partner_fee_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerFeeResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersFeesCreateWithHttpInfo($partner_id , $partner_fee_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/fees";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_fee_resource)) {
            $_tempBody = $partner_fee_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerFeeResource',
                '/partners/{partner_id}/fees'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerFeeResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerFeeResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersFeesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersFeesDelete($partner_id,  $id )
    {
        list($response) = $this->partnersFeesDeleteWithHttpInfo($partner_id, $id);
        return $response;
    }

    /**
     * Operation partnersFeesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersFeesDeleteWithHttpInfo($partner_id,  $id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/fees/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/fees/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersFeesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'id' => int,
     *    'partner_id' => int,
     *    'effective_at' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerFeeResult
     */
    public function partnersFeesIndex($criteria = [])
    {
        list($response) = $this->partnersFeesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersFeesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'id' => int,
     *    'partner_id' => int,
     *    'effective_at' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerFeeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersFeesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/fees";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['id'])) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['effective_at'])) {
            $queryParams['effective_at'] = $this->apiClient->getSerializer()->toQueryValue($criteria['effective_at']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerFeeResult',
                '/partners/fees'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerFeeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerFeeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersGet
     *
     * Get a single partner by ID
     *
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerResource
     */
    public function partnersGet($partner_id )
    {
        list($response) = $this->partnersGetWithHttpInfo($partner_id);
        return $response;
    }

    /**
     * Operation partnersGetWithHttpInfo
     *
     * Get a single partner by ID
     *
     * @param string $partner_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersGetWithHttpInfo($partner_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerResource',
                '/partners/{partner_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersImpressumsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerImpressumResource $partner_impressum_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerImpressumResource
     */
    public function partnersImpressumsCreate($partner_id , $partner_impressum_resource)
    {
        list($response) = $this->partnersImpressumsCreateWithHttpInfo($partner_id, $partner_impressum_resource);
        return $response;
    }

    /**
     * Operation partnersImpressumsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerImpressumResource $partner_impressum_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerImpressumResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersImpressumsCreateWithHttpInfo($partner_id , $partner_impressum_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/impressums";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_impressum_resource)) {
            $_tempBody = $partner_impressum_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerImpressumResource',
                '/partners/{partner_id}/impressums'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerImpressumResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerImpressumResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndex
     *
     * List partners
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'state' => string,
     *    'is_enabled' => bool,
     *    'employee_id' => string,
     *    'geo_code' => string,
     *    'satisfaction' => string,
     *    'punches_use_speed' => string,
     *    'refill_offer_id' => string,
     *    'industry_id' => string,
     *    'industry' => string,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'sort' => string,
     *    'canvas_status' => string,
     *    'is_public' => bool,
     *    'package_type' => string,
     *    'badge_id' => string,
     *    'digital_leads' => bool,
     *    'has_marketing_package' => bool,
     *    'has_active_contract' => bool,
     *    'has_unused_allocations' => bool,
     *    'wants_exclusive_leads' => bool,
     *    'partner_assignee_client_consultant_employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerResult
     */
    public function partnersIndex($criteria = [])
    {
        list($response) = $this->partnersIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersIndexWithHttpInfo
     *
     * List partners
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'state' => string,
     *    'is_enabled' => bool,
     *    'employee_id' => string,
     *    'geo_code' => string,
     *    'satisfaction' => string,
     *    'punches_use_speed' => string,
     *    'refill_offer_id' => string,
     *    'industry_id' => string,
     *    'industry' => string,
     *    'geo_point' => string,
     *    'geo_rect' => string,
     *    'geo_distance' => int,
     *    'sort' => string,
     *    'canvas_status' => string,
     *    'is_public' => bool,
     *    'package_type' => string,
     *    'badge_id' => string,
     *    'digital_leads' => bool,
     *    'has_marketing_package' => bool,
     *    'has_active_contract' => bool,
     *    'has_unused_allocations' => bool,
     *    'wants_exclusive_leads' => bool,
     *    'partner_assignee_client_consultant_employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['state'])) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($criteria['state']);
        }
        // query params
        if (isset($criteria['is_enabled'])) {
            $queryParams['is_enabled'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_enabled']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['satisfaction'])) {
            $queryParams['satisfaction'] = $this->apiClient->getSerializer()->toQueryValue($criteria['satisfaction']);
        }
        // query params
        if (isset($criteria['punches_use_speed'])) {
            $queryParams['punches_use_speed'] = $this->apiClient->getSerializer()->toQueryValue($criteria['punches_use_speed']);
        }
        // query params
        if (isset($criteria['refill_offer_id'])) {
            $queryParams['refill_offer_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['refill_offer_id']);
        }
        // query params
        if (isset($criteria['industry_id'])) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry_id']);
        }
        // query params
        if (isset($criteria['industry'])) {
            $queryParams['industry'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry']);
        }
        // query params
        if (isset($criteria['geo_point'])) {
            $queryParams['geo_point'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_point']);
        }
        // query params
        if (isset($criteria['geo_rect'])) {
            $queryParams['geo_rect'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_rect']);
        }
        // query params
        if (isset($criteria['geo_distance'])) {
            $queryParams['geo_distance'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_distance']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['canvas_status'])) {
            $queryParams['canvas_status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['canvas_status']);
        }
        // query params
        if (isset($criteria['is_public'])) {
            $queryParams['is_public'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_public']);
        }
        // query params
        if (isset($criteria['package_type'])) {
            $queryParams['package_type'] = $this->apiClient->getSerializer()->toQueryValue($criteria['package_type']);
        }
        // query params
        if (isset($criteria['badge_id'])) {
            $queryParams['badge_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['badge_id']);
        }
        // query params
        if (isset($criteria['digital_leads'])) {
            $queryParams['digital_leads'] = $this->apiClient->getSerializer()->toQueryValue($criteria['digital_leads']);
        }
        // query params
        if (isset($criteria['has_marketing_package'])) {
            $queryParams['has_marketing_package'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_marketing_package']);
        }
        // query params
        if (isset($criteria['has_active_contract'])) {
            $queryParams['has_active_contract'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_active_contract']);
        }
        // query params
        if (isset($criteria['has_unused_allocations'])) {
            $queryParams['has_unused_allocations'] = $this->apiClient->getSerializer()->toQueryValue($criteria['has_unused_allocations']);
        }
        // query params
        if (isset($criteria['wants_exclusive_leads'])) {
            $queryParams['wants_exclusive_leads'] = $this->apiClient->getSerializer()->toQueryValue($criteria['wants_exclusive_leads']);
        }
        // query params
        if (isset($criteria['partner_assignee_client_consultant_employee_id'])) {
            $queryParams['partner_assignee_client_consultant_employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_assignee_client_consultant_employee_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerResult',
                '/partners'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerIndustryResource $partner_industry_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerIndustryResource
     */
    public function partnersIndustriesCreate($partner_id , $partner_industry_resource)
    {
        list($response) = $this->partnersIndustriesCreateWithHttpInfo($partner_id, $partner_industry_resource);
        return $response;
    }

    /**
     * Operation partnersIndustriesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerIndustryResource $partner_industry_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerIndustryResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersIndustriesCreateWithHttpInfo($partner_id , $partner_industry_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_industry_resource)) {
            $_tempBody = $partner_industry_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerIndustryResource',
                '/partners/{partner_id}/industries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerIndustryResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerIndustryResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $industry_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersIndustriesDelete($partner_id,  $industry_id )
    {
        list($response) = $this->partnersIndustriesDeleteWithHttpInfo($partner_id, $industry_id);
        return $response;
    }

    /**
     * Operation partnersIndustriesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $industry_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersIndustriesDeleteWithHttpInfo($partner_id,  $industry_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries/{industry_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($industry_id !== null) {
            $resourcePath = str_replace(
                "{" . "industry_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($industry_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/industries/{industry_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $industry_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerIndustryResource
     */
    public function partnersIndustriesGet($partner_id,  $industry_id )
    {
        list($response) = $this->partnersIndustriesGetWithHttpInfo($partner_id, $industry_id);
        return $response;
    }

    /**
     * Operation partnersIndustriesGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $industry_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerIndustryResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersIndustriesGetWithHttpInfo($partner_id,  $industry_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries/{industry_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($industry_id !== null) {
            $resourcePath = str_replace(
                "{" . "industry_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($industry_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerIndustryResource',
                '/partners/{partner_id}/industries/{industry_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerIndustryResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerIndustryResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'geo_code' => string,
     *    'is_active' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerIndustryResult
     */
    public function partnersIndustriesIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersIndustriesIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersIndustriesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'geo_code' => string,
     *    'is_active' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerIndustryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersIndustriesIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['is_active'])) {
            $queryParams['is_active'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_active']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerIndustryResult',
                '/partners/{partner_id}/industries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerIndustryResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerIndustryResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersIndustriesUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerIndustriesResource $partner_industries_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerIndustriesResource
     */
    public function partnersIndustriesUpdate($partner_id , $partner_industries_resource)
    {
        list($response) = $this->partnersIndustriesUpdateWithHttpInfo($partner_id, $partner_industries_resource);
        return $response;
    }

    /**
     * Operation partnersIndustriesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerIndustriesResource $partner_industries_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerIndustriesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersIndustriesUpdateWithHttpInfo($partner_id , $partner_industries_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/industries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_industries_resource)) {
            $_tempBody = $partner_industries_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerIndustriesResource',
                '/partners/{partner_id}/industries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerIndustriesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerIndustriesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersInvoicingsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'partner_id' => string,
     *    'business_model' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\InvoicingResult
     */
    public function partnersInvoicingsIndex($criteria = [])
    {
        list($response) = $this->partnersInvoicingsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersInvoicingsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'partner_id' => string,
     *    'business_model' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\InvoicingResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersInvoicingsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/invoicings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['process_at_gte'])) {
            $queryParams['process_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_gte']);
        }
        // query params
        if (isset($criteria['process_at_lte'])) {
            $queryParams['process_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_lte']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['business_model'])) {
            $queryParams['business_model'] = $this->apiClient->getSerializer()->toQueryValue($criteria['business_model']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\InvoicingResult',
                '/partners/invoicings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\InvoicingResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\InvoicingResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersInvoicingsIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'business_model' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\InvoicingResult
     */
    public function partnersInvoicingsIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersInvoicingsIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersInvoicingsIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'process_at_gte' => string,
     *    'process_at_lte' => string,
     *    'business_model' => string,
     *    'sort' => string,
     *    'geo_code' => string,
     *    'employee_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\InvoicingResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersInvoicingsIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/invoicings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['process_at_gte'])) {
            $queryParams['process_at_gte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_gte']);
        }
        // query params
        if (isset($criteria['process_at_lte'])) {
            $queryParams['process_at_lte'] = $this->apiClient->getSerializer()->toQueryValue($criteria['process_at_lte']);
        }
        // query params
        if (isset($criteria['business_model'])) {
            $queryParams['business_model'] = $this->apiClient->getSerializer()->toQueryValue($criteria['business_model']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['employee_id'])) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['employee_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\InvoicingResult',
                '/partners/{partner_id}/invoicings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\InvoicingResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\InvoicingResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\LeadTypeResource $lead_type_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerTypesResource
     */
    public function partnersLeadtypesCreate($partner_id , $lead_type_resource)
    {
        list($response) = $this->partnersLeadtypesCreateWithHttpInfo($partner_id, $lead_type_resource);
        return $response;
    }

    /**
     * Operation partnersLeadtypesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\LeadTypeResource $lead_type_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerTypesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersLeadtypesCreateWithHttpInfo($partner_id , $lead_type_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($lead_type_resource)) {
            $_tempBody = $lead_type_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerTypesResource',
                '/partners/{partner_id}/lead_types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerTypesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $lead_type_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersLeadtypesDelete($partner_id,  $lead_type_id )
    {
        list($response) = $this->partnersLeadtypesDeleteWithHttpInfo($partner_id, $lead_type_id);
        return $response;
    }

    /**
     * Operation partnersLeadtypesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $lead_type_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersLeadtypesDeleteWithHttpInfo($partner_id,  $lead_type_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types/{lead_type_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_type_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/lead_types/{lead_type_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesGet
     *
     * 
     *
     * @param string $lead_type_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerTypesResource
     */
    public function partnersLeadtypesGet($lead_type_id )
    {
        list($response) = $this->partnersLeadtypesGetWithHttpInfo($lead_type_id);
        return $response;
    }

    /**
     * Operation partnersLeadtypesGetWithHttpInfo
     *
     * 
     *
     * @param string $lead_type_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerTypesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersLeadtypesGetWithHttpInfo($lead_type_id )
    {
        // parse inputs
        $resourcePath = "/partners/lead_types/{lead_type_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($lead_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_type_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerTypesResource',
                '/partners/lead_types/{lead_type_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerTypesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesGet_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $lead_type_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerTypesResource
     */
    public function partnersLeadtypesGet_0($partner_id,  $lead_type_id )
    {
        list($response) = $this->partnersLeadtypesGet_0WithHttpInfo($partner_id, $lead_type_id);
        return $response;
    }

    /**
     * Operation partnersLeadtypesGet_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $lead_type_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerTypesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersLeadtypesGet_0WithHttpInfo($partner_id,  $lead_type_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types/{lead_type_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "lead_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($lead_type_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerTypesResource',
                '/partners/{partner_id}/lead_types/{lead_type_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerTypesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => int,
     *    'types' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerTypesResult
     */
    public function partnersLeadtypesIndex($criteria = [])
    {
        list($response) = $this->partnersLeadtypesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersLeadtypesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => int,
     *    'types' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerTypesResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersLeadtypesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/lead_types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['types'])) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($criteria['types']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerTypesResult',
                '/partners/lead_types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerTypesResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerTypesResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'types' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerTypesResult
     */
    public function partnersLeadtypesIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersLeadtypesIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersLeadtypesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'types' => string,
     *    'geo_code' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerTypesResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersLeadtypesIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['types'])) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($criteria['types']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerTypesResult',
                '/partners/{partner_id}/lead_types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerTypesResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerTypesResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersLeadtypesUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerLeadTypesResource $partner_lead_types_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerLeadTypesResource
     */
    public function partnersLeadtypesUpdate($partner_id , $partner_lead_types_resource)
    {
        list($response) = $this->partnersLeadtypesUpdateWithHttpInfo($partner_id, $partner_lead_types_resource);
        return $response;
    }

    /**
     * Operation partnersLeadtypesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerLeadTypesResource $partner_lead_types_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerLeadTypesResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersLeadtypesUpdateWithHttpInfo($partner_id , $partner_lead_types_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/lead_types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_lead_types_resource)) {
            $_tempBody = $partner_lead_types_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerLeadTypesResource',
                '/partners/{partner_id}/lead_types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerLeadTypesResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerLeadTypesResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesCreate
     *
     * 
     *
     * @param \Ageras\Api\PartnerNoteResource $partner_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerNoteResource
     */
    public function partnersNotesCreate($partner_note_resource)
    {
        list($response) = $this->partnersNotesCreateWithHttpInfo($partner_note_resource);
        return $response;
    }

    /**
     * Operation partnersNotesCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\PartnerNoteResource $partner_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersNotesCreateWithHttpInfo($partner_note_resource)
    {
        // parse inputs
        $resourcePath = "/partners/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($partner_note_resource)) {
            $_tempBody = $partner_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerNoteResource',
                '/partners/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesCreate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerNoteResource $partner_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerNoteResource
     */
    public function partnersNotesCreate_0($partner_id , $partner_note_resource)
    {
        list($response) = $this->partnersNotesCreate_0WithHttpInfo($partner_id, $partner_note_resource);
        return $response;
    }

    /**
     * Operation partnersNotesCreate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerNoteResource $partner_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersNotesCreate_0WithHttpInfo($partner_id , $partner_note_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_note_resource)) {
            $_tempBody = $partner_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerNoteResource',
                '/partners/{partner_id}/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesGet
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerNoteResource
     */
    public function partnersNotesGet($partner_id,  $partner_note_id )
    {
        list($response) = $this->partnersNotesGetWithHttpInfo($partner_id, $partner_note_id);
        return $response;
    }

    /**
     * Operation partnersNotesGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersNotesGetWithHttpInfo($partner_id,  $partner_note_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/notes/{partner_note_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_note_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerNoteResource',
                '/partners/{partner_id}/notes/{partner_note_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => int,
     *    'types' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerNoteResult
     */
    public function partnersNotesIndex($criteria = [])
    {
        list($response) = $this->partnersNotesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersNotesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => int,
     *    'types' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerNoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersNotesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['types'])) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($criteria['types']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerNoteResult',
                '/partners/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerNoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersNotesIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'types' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerNoteResult
     */
    public function partnersNotesIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersNotesIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersNotesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'types' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerNoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersNotesIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['types'])) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($criteria['types']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerNoteResult',
                '/partners/{partner_id}/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerNoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteloanproductpricesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerQuoteLoanProductPriceResource $partner_quote_loan_product_price_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerQuoteLoanProductPriceResource
     */
    public function partnersQuoteloanproductpricesCreate($partner_id , $partner_quote_loan_product_price_resource)
    {
        list($response) = $this->partnersQuoteloanproductpricesCreateWithHttpInfo($partner_id, $partner_quote_loan_product_price_resource);
        return $response;
    }

    /**
     * Operation partnersQuoteloanproductpricesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerQuoteLoanProductPriceResource $partner_quote_loan_product_price_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerQuoteLoanProductPriceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteloanproductpricesCreateWithHttpInfo($partner_id , $partner_quote_loan_product_price_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteloanproductprices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_quote_loan_product_price_resource)) {
            $_tempBody = $partner_quote_loan_product_price_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerQuoteLoanProductPriceResource',
                '/partners/{partner_id}/quoteloanproductprices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerQuoteLoanProductPriceResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerQuoteLoanProductPriceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteloanproductpricesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $quote_loan_product_price_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersQuoteloanproductpricesDelete($partner_id,  $quote_loan_product_price_id )
    {
        list($response) = $this->partnersQuoteloanproductpricesDeleteWithHttpInfo($partner_id, $quote_loan_product_price_id);
        return $response;
    }

    /**
     * Operation partnersQuoteloanproductpricesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $quote_loan_product_price_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteloanproductpricesDeleteWithHttpInfo($partner_id,  $quote_loan_product_price_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteloanproductprices/{quote_loan_product_price_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_loan_product_price_id !== null) {
            $resourcePath = str_replace(
                "{" . "quote_loan_product_price_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($quote_loan_product_price_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/quoteloanproductprices/{quote_loan_product_price_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteloanproductpricesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerQuoteLoanProductPriceResult
     */
    public function partnersQuoteloanproductpricesIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersQuoteloanproductpricesIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersQuoteloanproductpricesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerQuoteLoanProductPriceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteloanproductpricesIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteloanproductprices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerQuoteLoanProductPriceResult',
                '/partners/{partner_id}/quoteloanproductprices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerQuoteLoanProductPriceResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerQuoteLoanProductPriceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteproductcommentsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerQuoteProductCommentResource $partner_quote_product_comment_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerQuoteProductCommentResource
     */
    public function partnersQuoteproductcommentsCreate($partner_id , $partner_quote_product_comment_resource)
    {
        list($response) = $this->partnersQuoteproductcommentsCreateWithHttpInfo($partner_id, $partner_quote_product_comment_resource);
        return $response;
    }

    /**
     * Operation partnersQuoteproductcommentsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerQuoteProductCommentResource $partner_quote_product_comment_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerQuoteProductCommentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteproductcommentsCreateWithHttpInfo($partner_id , $partner_quote_product_comment_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteproductcomments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_quote_product_comment_resource)) {
            $_tempBody = $partner_quote_product_comment_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerQuoteProductCommentResource',
                '/partners/{partner_id}/quoteproductcomments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerQuoteProductCommentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerQuoteProductCommentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteproductcommentsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $quote_product_comment_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersQuoteproductcommentsDelete($partner_id,  $quote_product_comment_id )
    {
        list($response) = $this->partnersQuoteproductcommentsDeleteWithHttpInfo($partner_id, $quote_product_comment_id);
        return $response;
    }

    /**
     * Operation partnersQuoteproductcommentsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $quote_product_comment_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteproductcommentsDeleteWithHttpInfo($partner_id,  $quote_product_comment_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteproductcomments/{quote_product_comment_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_product_comment_id !== null) {
            $resourcePath = str_replace(
                "{" . "quote_product_comment_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($quote_product_comment_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/quoteproductcomments/{quote_product_comment_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteproductcommentsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerQuoteProductCommentResult
     */
    public function partnersQuoteproductcommentsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersQuoteproductcommentsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersQuoteproductcommentsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerQuoteProductCommentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteproductcommentsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteproductcomments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerQuoteProductCommentResult',
                '/partners/{partner_id}/quoteproductcomments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerQuoteProductCommentResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerQuoteProductCommentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteproductpricesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerQuoteProductPriceResource $partner_quote_product_price_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerQuoteProductPriceResource
     */
    public function partnersQuoteproductpricesCreate($partner_id , $partner_quote_product_price_resource)
    {
        list($response) = $this->partnersQuoteproductpricesCreateWithHttpInfo($partner_id, $partner_quote_product_price_resource);
        return $response;
    }

    /**
     * Operation partnersQuoteproductpricesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerQuoteProductPriceResource $partner_quote_product_price_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerQuoteProductPriceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteproductpricesCreateWithHttpInfo($partner_id , $partner_quote_product_price_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteproductprices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_quote_product_price_resource)) {
            $_tempBody = $partner_quote_product_price_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerQuoteProductPriceResource',
                '/partners/{partner_id}/quoteproductprices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerQuoteProductPriceResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerQuoteProductPriceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteproductpricesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $quote_product_price_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersQuoteproductpricesDelete($partner_id,  $quote_product_price_id )
    {
        list($response) = $this->partnersQuoteproductpricesDeleteWithHttpInfo($partner_id, $quote_product_price_id);
        return $response;
    }

    /**
     * Operation partnersQuoteproductpricesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $quote_product_price_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteproductpricesDeleteWithHttpInfo($partner_id,  $quote_product_price_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteproductprices/{quote_product_price_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_product_price_id !== null) {
            $resourcePath = str_replace(
                "{" . "quote_product_price_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($quote_product_price_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/quoteproductprices/{quote_product_price_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuoteproductpricesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerQuoteProductPriceResult
     */
    public function partnersQuoteproductpricesIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersQuoteproductpricesIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersQuoteproductpricesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerQuoteProductPriceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuoteproductpricesIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/quoteproductprices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerQuoteProductPriceResult',
                '/partners/{partner_id}/quoteproductprices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerQuoteProductPriceResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerQuoteProductPriceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersQuotevendorsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerQuoteVendorResult
     */
    public function partnersQuotevendorsIndex($criteria = [])
    {
        list($response) = $this->partnersQuotevendorsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersQuotevendorsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerQuoteVendorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersQuotevendorsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/quotevendors";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerQuoteVendorResult',
                '/partners/quotevendors'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerQuoteVendorResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerQuoteVendorResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersRevenuerangesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerRevenueRangeResource $partner_revenue_range_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerRevenueRangeResource
     */
    public function partnersRevenuerangesCreate($partner_id , $partner_revenue_range_resource)
    {
        list($response) = $this->partnersRevenuerangesCreateWithHttpInfo($partner_id, $partner_revenue_range_resource);
        return $response;
    }

    /**
     * Operation partnersRevenuerangesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerRevenueRangeResource $partner_revenue_range_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerRevenueRangeResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersRevenuerangesCreateWithHttpInfo($partner_id , $partner_revenue_range_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/revenueranges";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_revenue_range_resource)) {
            $_tempBody = $partner_revenue_range_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerRevenueRangeResource',
                '/partners/{partner_id}/revenueranges'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerRevenueRangeResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerRevenueRangeResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersRevenuesegmentsActionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerRevenueSegmentActionResource $partner_revenue_segment_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerRevenueSegmentActionResource
     */
    public function partnersRevenuesegmentsActionsCreate($partner_id , $partner_revenue_segment_action_resource)
    {
        list($response) = $this->partnersRevenuesegmentsActionsCreateWithHttpInfo($partner_id, $partner_revenue_segment_action_resource);
        return $response;
    }

    /**
     * Operation partnersRevenuesegmentsActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerRevenueSegmentActionResource $partner_revenue_segment_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerRevenueSegmentActionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersRevenuesegmentsActionsCreateWithHttpInfo($partner_id , $partner_revenue_segment_action_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/revenuesegments/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_revenue_segment_action_resource)) {
            $_tempBody = $partner_revenue_segment_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerRevenueSegmentActionResource',
                '/partners/{partner_id}/revenuesegments/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerRevenueSegmentActionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerRevenueSegmentActionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersRevenuesegmentsCreate
     *
     * 
     *
     * @param \Ageras\Api\PartnerRevenueSegmentResource $partner_revenue_segment_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerRevenueSegmentResource
     */
    public function partnersRevenuesegmentsCreate($partner_revenue_segment_resource)
    {
        list($response) = $this->partnersRevenuesegmentsCreateWithHttpInfo($partner_revenue_segment_resource);
        return $response;
    }

    /**
     * Operation partnersRevenuesegmentsCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\PartnerRevenueSegmentResource $partner_revenue_segment_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerRevenueSegmentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersRevenuesegmentsCreateWithHttpInfo($partner_revenue_segment_resource)
    {
        // parse inputs
        $resourcePath = "/partners/revenuesegments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($partner_revenue_segment_resource)) {
            $_tempBody = $partner_revenue_segment_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerRevenueSegmentResource',
                '/partners/revenuesegments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerRevenueSegmentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerRevenueSegmentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersRevenuesegmentsCreate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerRevenueSegmentResource $partner_revenue_segment_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerRevenueSegmentResource
     */
    public function partnersRevenuesegmentsCreate_0($partner_id , $partner_revenue_segment_resource)
    {
        list($response) = $this->partnersRevenuesegmentsCreate_0WithHttpInfo($partner_id, $partner_revenue_segment_resource);
        return $response;
    }

    /**
     * Operation partnersRevenuesegmentsCreate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerRevenueSegmentResource $partner_revenue_segment_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerRevenueSegmentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersRevenuesegmentsCreate_0WithHttpInfo($partner_id , $partner_revenue_segment_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/revenuesegments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_revenue_segment_resource)) {
            $_tempBody = $partner_revenue_segment_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerRevenueSegmentResource',
                '/partners/{partner_id}/revenuesegments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerRevenueSegmentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerRevenueSegmentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersRevenuesegmentsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_revenue_segment_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersRevenuesegmentsDelete($partner_id,  $partner_revenue_segment_id )
    {
        list($response) = $this->partnersRevenuesegmentsDeleteWithHttpInfo($partner_id, $partner_revenue_segment_id);
        return $response;
    }

    /**
     * Operation partnersRevenuesegmentsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_revenue_segment_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersRevenuesegmentsDeleteWithHttpInfo($partner_id,  $partner_revenue_segment_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/revenuesegments/{partner_revenue_segment_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_revenue_segment_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_revenue_segment_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_revenue_segment_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/revenuesegments/{partner_revenue_segment_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersRevenuesegmentsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerRevenueSegmentResult
     */
    public function partnersRevenuesegmentsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersRevenuesegmentsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersRevenuesegmentsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerRevenueSegmentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersRevenuesegmentsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/revenuesegments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerRevenueSegmentResult',
                '/partners/{partner_id}/revenuesegments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerRevenueSegmentResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerRevenueSegmentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSectorsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\SectorResult
     */
    public function partnersSectorsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersSectorsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersSectorsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\SectorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSectorsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/sectors";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SectorResult',
                '/partners/{partner_id}/sectors'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SectorResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SectorResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSectorsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerSectorsResource $partner_sectors_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSectorsResource
     */
    public function partnersSectorsUpdate($partner_id , $partner_sectors_resource)
    {
        list($response) = $this->partnersSectorsUpdateWithHttpInfo($partner_id, $partner_sectors_resource);
        return $response;
    }

    /**
     * Operation partnersSectorsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerSectorsResource $partner_sectors_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSectorsResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSectorsUpdateWithHttpInfo($partner_id , $partner_sectors_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/sectors";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_sectors_resource)) {
            $_tempBody = $partner_sectors_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSectorsResource',
                '/partners/{partner_id}/sectors'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSectorsResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSectorsResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSellingpointsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerUniqueSellingPointResource $partner_unique_selling_point_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUniqueSellingPointResource
     */
    public function partnersSellingpointsCreate($partner_id , $partner_unique_selling_point_resource)
    {
        list($response) = $this->partnersSellingpointsCreateWithHttpInfo($partner_id, $partner_unique_selling_point_resource);
        return $response;
    }

    /**
     * Operation partnersSellingpointsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerUniqueSellingPointResource $partner_unique_selling_point_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUniqueSellingPointResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSellingpointsCreateWithHttpInfo($partner_id , $partner_unique_selling_point_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/sellingpoints";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_unique_selling_point_resource)) {
            $_tempBody = $partner_unique_selling_point_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUniqueSellingPointResource',
                '/partners/{partner_id}/sellingpoints'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUniqueSellingPointResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUniqueSellingPointResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSellingpointsDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $selling_point_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersSellingpointsDelete($partner_id,  $selling_point_id )
    {
        list($response) = $this->partnersSellingpointsDeleteWithHttpInfo($partner_id, $selling_point_id);
        return $response;
    }

    /**
     * Operation partnersSellingpointsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $selling_point_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSellingpointsDeleteWithHttpInfo($partner_id,  $selling_point_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/sellingpoints/{selling_point_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($selling_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "selling_point_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($selling_point_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/sellingpoints/{selling_point_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSellingpointsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'id' => int,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUniqueSellingPointResult
     */
    public function partnersSellingpointsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersSellingpointsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersSellingpointsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'id' => int,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUniqueSellingPointResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSellingpointsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/sellingpoints";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['id'])) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUniqueSellingPointResult',
                '/partners/{partner_id}/sellingpoints'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUniqueSellingPointResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUniqueSellingPointResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSellingpointsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $selling_point_id 
     * @param \Ageras\Api\PartnerUniqueSellingPointResource $partner_unique_selling_point_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUniqueSellingPointResource
     */
    public function partnersSellingpointsUpdate($partner_id,  $selling_point_id , $partner_unique_selling_point_resource)
    {
        list($response) = $this->partnersSellingpointsUpdateWithHttpInfo($partner_id, $selling_point_id, $partner_unique_selling_point_resource);
        return $response;
    }

    /**
     * Operation partnersSellingpointsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $selling_point_id 
     * @param \Ageras\Api\PartnerUniqueSellingPointResource $partner_unique_selling_point_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUniqueSellingPointResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSellingpointsUpdateWithHttpInfo($partner_id,  $selling_point_id , $partner_unique_selling_point_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/sellingpoints/{selling_point_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($selling_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "selling_point_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($selling_point_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_unique_selling_point_resource)) {
            $_tempBody = $partner_unique_selling_point_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUniqueSellingPointResource',
                '/partners/{partner_id}/sellingpoints/{selling_point_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUniqueSellingPointResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUniqueSellingPointResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionagreementsActionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $agreement_id 
     * @param \Ageras\Api\PartnerSubscriptionAgreementActionResource $partner_subscription_agreement_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionAgreementResource
     */
    public function partnersSubscriptionagreementsActionsCreate($partner_id,  $agreement_id , $partner_subscription_agreement_action_resource)
    {
        list($response) = $this->partnersSubscriptionagreementsActionsCreateWithHttpInfo($partner_id, $agreement_id, $partner_subscription_agreement_action_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionagreementsActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $agreement_id 
     * @param \Ageras\Api\PartnerSubscriptionAgreementActionResource $partner_subscription_agreement_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionAgreementResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionagreementsActionsCreateWithHttpInfo($partner_id,  $agreement_id , $partner_subscription_agreement_action_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptionagreements/{agreement_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                "{" . "agreement_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($agreement_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_agreement_action_resource)) {
            $_tempBody = $partner_subscription_agreement_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionAgreementResource',
                '/partners/{partner_id}/subscriptionagreements/{agreement_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionAgreementResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionAgreementResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionagreementsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerSubscriptionAgreementResource $partner_subscription_agreement_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionAgreementResource
     */
    public function partnersSubscriptionagreementsCreate($partner_id , $partner_subscription_agreement_resource)
    {
        list($response) = $this->partnersSubscriptionagreementsCreateWithHttpInfo($partner_id, $partner_subscription_agreement_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionagreementsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerSubscriptionAgreementResource $partner_subscription_agreement_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionAgreementResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionagreementsCreateWithHttpInfo($partner_id , $partner_subscription_agreement_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptionagreements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_agreement_resource)) {
            $_tempBody = $partner_subscription_agreement_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionAgreementResource',
                '/partners/{partner_id}/subscriptionagreements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionAgreementResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionAgreementResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionagreementsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_available_for_agreement' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionAgreementResult
     */
    public function partnersSubscriptionagreementsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersSubscriptionagreementsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersSubscriptionagreementsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_available_for_agreement' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionAgreementResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionagreementsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptionagreements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['is_available_for_agreement'])) {
            $queryParams['is_available_for_agreement'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_available_for_agreement']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionAgreementResult',
                '/partners/{partner_id}/subscriptionagreements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionAgreementResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionAgreementResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionagreementsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $agreement_id 
     * @param \Ageras\Api\PartnerSubscriptionAgreementResource $partner_subscription_agreement_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionAgreementResource
     */
    public function partnersSubscriptionagreementsUpdate($partner_id,  $agreement_id , $partner_subscription_agreement_resource)
    {
        list($response) = $this->partnersSubscriptionagreementsUpdateWithHttpInfo($partner_id, $agreement_id, $partner_subscription_agreement_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionagreementsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $agreement_id 
     * @param \Ageras\Api\PartnerSubscriptionAgreementResource $partner_subscription_agreement_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionAgreementResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionagreementsUpdateWithHttpInfo($partner_id,  $agreement_id , $partner_subscription_agreement_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptionagreements/{agreement_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                "{" . "agreement_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($agreement_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_agreement_resource)) {
            $_tempBody = $partner_subscription_agreement_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionAgreementResource',
                '/partners/{partner_id}/subscriptionagreements/{agreement_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionAgreementResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionAgreementResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsActionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionActionResource $partner_subscription_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionActionResource
     */
    public function partnersSubscriptionsActionsCreate($partner_id,  $subscription_id , $partner_subscription_action_resource)
    {
        list($response) = $this->partnersSubscriptionsActionsCreateWithHttpInfo($partner_id, $subscription_id, $partner_subscription_action_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionActionResource $partner_subscription_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionActionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsActionsCreateWithHttpInfo($partner_id,  $subscription_id , $partner_subscription_action_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_action_resource)) {
            $_tempBody = $partner_subscription_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionActionResource',
                '/partners/{partner_id}/subscriptions/{subscription_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionActionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionActionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerSubscriptionResource $partner_subscription_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionResource
     */
    public function partnersSubscriptionsCreate($partner_id , $partner_subscription_resource)
    {
        list($response) = $this->partnersSubscriptionsCreateWithHttpInfo($partner_id, $partner_subscription_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerSubscriptionResource $partner_subscription_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsCreateWithHttpInfo($partner_id , $partner_subscription_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_resource)) {
            $_tempBody = $partner_subscription_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionResource',
                '/partners/{partner_id}/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_active' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionResult
     */
    public function partnersSubscriptionsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersSubscriptionsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'is_active' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['is_active'])) {
            $queryParams['is_active'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_active']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionResult',
                '/partners/{partner_id}/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsPausesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionPauseResource $partner_subscription_pause_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionPauseResource
     */
    public function partnersSubscriptionsPausesCreate($partner_id,  $subscription_id , $partner_subscription_pause_resource)
    {
        list($response) = $this->partnersSubscriptionsPausesCreateWithHttpInfo($partner_id, $subscription_id, $partner_subscription_pause_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsPausesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionPauseResource $partner_subscription_pause_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionPauseResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsPausesCreateWithHttpInfo($partner_id,  $subscription_id , $partner_subscription_pause_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/pauses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_pause_resource)) {
            $_tempBody = $partner_subscription_pause_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionPauseResource',
                '/partners/{partner_id}/subscriptions/{subscription_id}/pauses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionPauseResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionPauseResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsPausesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param string $pause_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersSubscriptionsPausesDelete($partner_id,  $subscription_id,  $pause_id )
    {
        list($response) = $this->partnersSubscriptionsPausesDeleteWithHttpInfo($partner_id, $subscription_id, $pause_id);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsPausesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param string $pause_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsPausesDeleteWithHttpInfo($partner_id,  $subscription_id,  $pause_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/pauses/{pause_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($pause_id !== null) {
            $resourcePath = str_replace(
                "{" . "pause_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($pause_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/subscriptions/{subscription_id}/pauses/{pause_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsPausesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionPauseResult
     */
    public function partnersSubscriptionsPausesIndex($partner_id,  $subscription_id , $criteria = [])
    {
        list($response) = $this->partnersSubscriptionsPausesIndexWithHttpInfo($partner_id, $subscription_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsPausesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionPauseResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsPausesIndexWithHttpInfo($partner_id,  $subscription_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/pauses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionPauseResult',
                '/partners/{partner_id}/subscriptions/{subscription_id}/pauses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionPauseResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionPauseResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsPricesCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionPriceResource $partner_subscription_price_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionPriceResource
     */
    public function partnersSubscriptionsPricesCreate($partner_id,  $subscription_id , $partner_subscription_price_resource)
    {
        list($response) = $this->partnersSubscriptionsPricesCreateWithHttpInfo($partner_id, $subscription_id, $partner_subscription_price_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsPricesCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionPriceResource $partner_subscription_price_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionPriceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsPricesCreateWithHttpInfo($partner_id,  $subscription_id , $partner_subscription_price_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/prices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_price_resource)) {
            $_tempBody = $partner_subscription_price_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionPriceResource',
                '/partners/{partner_id}/subscriptions/{subscription_id}/prices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionPriceResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionPriceResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsPricesDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param string $subscription_price_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersSubscriptionsPricesDelete($partner_id,  $subscription_id,  $subscription_price_id )
    {
        list($response) = $this->partnersSubscriptionsPricesDeleteWithHttpInfo($partner_id, $subscription_id, $subscription_price_id);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsPricesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param string $subscription_price_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsPricesDeleteWithHttpInfo($partner_id,  $subscription_id,  $subscription_price_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/prices/{subscription_price_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_price_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_price_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_price_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/subscriptions/{subscription_id}/prices/{subscription_price_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsPricesIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionPriceResult
     */
    public function partnersSubscriptionsPricesIndex($partner_id,  $subscription_id , $criteria = [])
    {
        list($response) = $this->partnersSubscriptionsPricesIndexWithHttpInfo($partner_id, $subscription_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsPricesIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionPriceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsPricesIndexWithHttpInfo($partner_id,  $subscription_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}/prices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionPriceResult',
                '/partners/{partner_id}/subscriptions/{subscription_id}/prices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionPriceResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionPriceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptionsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionResource $partner_subscription_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionResource
     */
    public function partnersSubscriptionsUpdate($partner_id,  $subscription_id , $partner_subscription_resource)
    {
        list($response) = $this->partnersSubscriptionsUpdateWithHttpInfo($partner_id, $subscription_id, $partner_subscription_resource);
        return $response;
    }

    /**
     * Operation partnersSubscriptionsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $subscription_id 
     * @param \Ageras\Api\PartnerSubscriptionResource $partner_subscription_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptionsUpdateWithHttpInfo($partner_id,  $subscription_id , $partner_subscription_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptions/{subscription_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_subscription_resource)) {
            $_tempBody = $partner_subscription_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionResource',
                '/partners/{partner_id}/subscriptions/{subscription_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptiontypesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'geo_code' => string,
     *    'is_hidden' => bool,
     *    'identifier' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionTypeResult
     */
    public function partnersSubscriptiontypesIndex($criteria = [])
    {
        list($response) = $this->partnersSubscriptiontypesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersSubscriptiontypesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'geo_code' => string,
     *    'is_hidden' => bool,
     *    'identifier' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionTypeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptiontypesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/subscriptiontypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['is_hidden'])) {
            $queryParams['is_hidden'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_hidden']);
        }
        // query params
        if (isset($criteria['identifier'])) {
            $queryParams['identifier'] = $this->apiClient->getSerializer()->toQueryValue($criteria['identifier']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionTypeResult',
                '/partners/subscriptiontypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionTypeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionTypeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSubscriptiontypesIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'geo_code' => string,
     *    'is_hidden' => bool,
     *    'identifier' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSubscriptionTypeResult
     */
    public function partnersSubscriptiontypesIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersSubscriptiontypesIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersSubscriptiontypesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'geo_code' => string,
     *    'is_hidden' => bool,
     *    'identifier' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSubscriptionTypeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSubscriptiontypesIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/subscriptiontypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['is_hidden'])) {
            $queryParams['is_hidden'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_hidden']);
        }
        // query params
        if (isset($criteria['identifier'])) {
            $queryParams['identifier'] = $this->apiClient->getSerializer()->toQueryValue($criteria['identifier']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSubscriptionTypeResult',
                '/partners/{partner_id}/subscriptiontypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSubscriptionTypeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSubscriptionTypeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersSuggestIndex
     *
     * 
     *
     * @param $criteria = [
     *    'limit' => int,
     *    'geo_code' => string,
     *    'query' => string,
     *    'type' => string,
     *    'partner_state' => string,
     *    'page' => int,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerSuggestResult
     */
    public function partnersSuggestIndex($criteria = [])
    {
        list($response) = $this->partnersSuggestIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersSuggestIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'limit' => int,
     *    'geo_code' => string,
     *    'query' => string,
     *    'type' => string,
     *    'partner_state' => string,
     *    'page' => int,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerSuggestResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersSuggestIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/suggest";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // query params
        if (isset($criteria['type'])) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($criteria['type']);
        }
        // query params
        if (isset($criteria['partner_state'])) {
            $queryParams['partner_state'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_state']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerSuggestResult',
                '/partners/suggest'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerSuggestResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerSuggestResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersTitlesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'id' => int,
     *    'identifier' => string,
     *    'industry_id' => int,
     *    'industry_identifier' => string,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerTitleResult
     */
    public function partnersTitlesIndex($criteria = [])
    {
        list($response) = $this->partnersTitlesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersTitlesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'id' => int,
     *    'identifier' => string,
     *    'industry_id' => int,
     *    'industry_identifier' => string,
     *    'geo_code' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerTitleResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersTitlesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/titles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['id'])) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['id']);
        }
        // query params
        if (isset($criteria['identifier'])) {
            $queryParams['identifier'] = $this->apiClient->getSerializer()->toQueryValue($criteria['identifier']);
        }
        // query params
        if (isset($criteria['industry_id'])) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry_id']);
        }
        // query params
        if (isset($criteria['industry_identifier'])) {
            $queryParams['industry_identifier'] = $this->apiClient->getSerializer()->toQueryValue($criteria['industry_identifier']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerTitleResult',
                '/partners/titles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerTitleResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerTitleResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersTransactionsIndex
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerCouponTransactionResult
     */
    public function partnersTransactionsIndex($partner_id , $criteria = [])
    {
        list($response) = $this->partnersTransactionsIndexWithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersTransactionsIndexWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerCouponTransactionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersTransactionsIndexWithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/transactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerCouponTransactionResult',
                '/partners/{partner_id}/transactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerCouponTransactionResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerCouponTransactionResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerResource $partner_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerResource
     */
    public function partnersUpdate($partner_id , $partner_resource)
    {
        list($response) = $this->partnersUpdateWithHttpInfo($partner_id, $partner_resource);
        return $response;
    }

    /**
     * Operation partnersUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerResource $partner_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUpdateWithHttpInfo($partner_id , $partner_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_resource)) {
            $_tempBody = $partner_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerResource',
                '/partners/{partner_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersActionsCreate
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param \Ageras\Api\PartnerUserActionResource $partner_user_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResource
     */
    public function partnersUsersActionsCreate($partner_id,  $partner_user_id , $partner_user_action_resource)
    {
        list($response) = $this->partnersUsersActionsCreateWithHttpInfo($partner_id, $partner_user_id, $partner_user_action_resource);
        return $response;
    }

    /**
     * Operation partnersUsersActionsCreateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param \Ageras\Api\PartnerUserActionResource $partner_user_action_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersActionsCreateWithHttpInfo($partner_id,  $partner_user_id , $partner_user_action_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}/actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_user_action_resource)) {
            $_tempBody = $partner_user_action_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResource',
                '/partners/{partner_id}/users/{partner_user_id}/actions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsDelete
     *
     * 
     *
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersUsersContentsDelete($partner_user_id,  $content_key )
    {
        list($response) = $this->partnersUsersContentsDeleteWithHttpInfo($partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersContentsDeleteWithHttpInfo($partner_user_id,  $content_key )
    {
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/users/{partner_user_id}/contents/{content_key}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsDelete_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersUsersContentsDelete_0($partner_id,  $partner_user_id,  $content_key )
    {
        list($response) = $this->partnersUsersContentsDelete_0WithHttpInfo($partner_id, $partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsDelete_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersContentsDelete_0WithHttpInfo($partner_id,  $partner_user_id,  $content_key )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsGet
     *
     * 
     *
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContentResource
     */
    public function partnersUsersContentsGet($partner_user_id,  $content_key )
    {
        list($response) = $this->partnersUsersContentsGetWithHttpInfo($partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersContentsGetWithHttpInfo($partner_user_id,  $content_key )
    {
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContentResource',
                '/partners/users/{partner_user_id}/contents/{content_key}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsGet_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContentResource
     */
    public function partnersUsersContentsGet_0($partner_id,  $partner_user_id,  $content_key )
    {
        list($response) = $this->partnersUsersContentsGet_0WithHttpInfo($partner_id, $partner_user_id, $content_key);
        return $response;
    }

    /**
     * Operation partnersUsersContentsGet_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param string $content_key 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersContentsGet_0WithHttpInfo($partner_id,  $partner_user_id,  $content_key )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContentResource',
                '/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsUpdate
     *
     * 
     *
     * @param string $partner_user_id 
     * @param string $content_key 
     * @param \Ageras\Api\PartnerContentResource $partner_content_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContentResource
     */
    public function partnersUsersContentsUpdate($partner_user_id,  $content_key , $partner_content_resource)
    {
        list($response) = $this->partnersUsersContentsUpdateWithHttpInfo($partner_user_id, $content_key, $partner_content_resource);
        return $response;
    }

    /**
     * Operation partnersUsersContentsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_user_id 
     * @param string $content_key 
     * @param \Ageras\Api\PartnerContentResource $partner_content_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersContentsUpdateWithHttpInfo($partner_user_id,  $content_key , $partner_content_resource)
    {
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_content_resource)) {
            $_tempBody = $partner_content_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContentResource',
                '/partners/users/{partner_user_id}/contents/{content_key}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersContentsUpdate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param string $content_key 
     * @param \Ageras\Api\PartnerContentResource $partner_content_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerContentResource
     */
    public function partnersUsersContentsUpdate_0($partner_id,  $partner_user_id,  $content_key , $partner_content_resource)
    {
        list($response) = $this->partnersUsersContentsUpdate_0WithHttpInfo($partner_id, $partner_user_id, $content_key, $partner_content_resource);
        return $response;
    }

    /**
     * Operation partnersUsersContentsUpdate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param string $content_key 
     * @param \Ageras\Api\PartnerContentResource $partner_content_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerContentResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersContentsUpdate_0WithHttpInfo($partner_id,  $partner_user_id,  $content_key , $partner_content_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // path params
        if ($content_key !== null) {
            $resourcePath = str_replace(
                "{" . "content_key" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_key),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_content_resource)) {
            $_tempBody = $partner_content_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerContentResource',
                '/partners/{partner_id}/users/{partner_user_id}/contents/{content_key}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerContentResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerContentResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersCreate
     *
     * 
     *
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResource
     */
    public function partnersUsersCreate($partner_user_resource)
    {
        list($response) = $this->partnersUsersCreateWithHttpInfo($partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersCreateWithHttpInfo($partner_user_resource)
    {
        // parse inputs
        $resourcePath = "/partners/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResource',
                '/partners/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersCreate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResource
     */
    public function partnersUsersCreate_0($partner_id , $partner_user_resource)
    {
        list($response) = $this->partnersUsersCreate_0WithHttpInfo($partner_id, $partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersCreate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersCreate_0WithHttpInfo($partner_id , $partner_user_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResource',
                '/partners/{partner_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersDelete
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function partnersUsersDelete($partner_id,  $partner_user_id )
    {
        list($response) = $this->partnersUsersDeleteWithHttpInfo($partner_id, $partner_user_id);
        return $response;
    }

    /**
     * Operation partnersUsersDeleteWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersDeleteWithHttpInfo($partner_id,  $partner_user_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/partners/{partner_id}/users/{partner_user_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersGet
     *
     * 
     *
     * @param string $partner_user_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResource
     */
    public function partnersUsersGet($partner_user_id )
    {
        list($response) = $this->partnersUsersGetWithHttpInfo($partner_user_id);
        return $response;
    }

    /**
     * Operation partnersUsersGetWithHttpInfo
     *
     * 
     *
     * @param string $partner_user_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersGetWithHttpInfo($partner_user_id )
    {
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResource',
                '/partners/users/{partner_user_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersGet_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResource
     */
    public function partnersUsersGet_0($partner_id,  $partner_user_id )
    {
        list($response) = $this->partnersUsersGet_0WithHttpInfo($partner_id, $partner_user_id);
        return $response;
    }

    /**
     * Operation partnersUsersGet_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersGet_0WithHttpInfo($partner_id,  $partner_user_id )
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResource',
                '/partners/{partner_id}/users/{partner_user_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersIndex
     *
     * 
     *
     * @param $criteria = [
     *    'partner_user_id' => string,
     *    'partner_id' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResult
     */
    public function partnersUsersIndex($criteria = [])
    {
        list($response) = $this->partnersUsersIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersUsersIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'partner_user_id' => string,
     *    'partner_id' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_user_id'])) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_user_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResult',
                '/partners/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'partner_user_id' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResult
     */
    public function partnersUsersIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersUsersIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersUsersIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'partner_user_id' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_user_id'])) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_user_id']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResult',
                '/partners/{partner_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersUpdate
     *
     * 
     *
     * @param string $partner_user_id 
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResource
     */
    public function partnersUsersUpdate($partner_user_id , $partner_user_resource)
    {
        list($response) = $this->partnersUsersUpdateWithHttpInfo($partner_user_id, $partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_user_id 
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersUpdateWithHttpInfo($partner_user_id , $partner_user_resource)
    {
        // parse inputs
        $resourcePath = "/partners/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResource',
                '/partners/users/{partner_user_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersUsersUpdate_0
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerUserResource
     */
    public function partnersUsersUpdate_0($partner_id,  $partner_user_id , $partner_user_resource)
    {
        list($response) = $this->partnersUsersUpdate_0WithHttpInfo($partner_id, $partner_user_id, $partner_user_resource);
        return $response;
    }

    /**
     * Operation partnersUsersUpdate_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param string $partner_user_id 
     * @param \Ageras\Api\PartnerUserResource $partner_user_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerUserResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersUsersUpdate_0WithHttpInfo($partner_id,  $partner_user_id , $partner_user_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/users/{partner_user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // path params
        if ($partner_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_user_resource)) {
            $_tempBody = $partner_user_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerUserResource',
                '/partners/{partner_id}/users/{partner_user_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerUserResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerUserResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersVerificationsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerVerificationResult
     */
    public function partnersVerificationsIndex($criteria = [])
    {
        list($response) = $this->partnersVerificationsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation partnersVerificationsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'partner_id' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerVerificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersVerificationsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/verifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerVerificationResult',
                '/partners/verifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerVerificationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerVerificationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersVerificationsIndex_0
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerVerificationResult
     */
    public function partnersVerificationsIndex_0($partner_id , $criteria = [])
    {
        list($response) = $this->partnersVerificationsIndex_0WithHttpInfo($partner_id, $criteria);
        return $response;
    }

    /**
     * Operation partnersVerificationsIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param $criteria = [
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerVerificationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersVerificationsIndex_0WithHttpInfo($partner_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/verifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerVerificationResult',
                '/partners/{partner_id}/verifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerVerificationResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerVerificationResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation partnersVerificationsUpdate
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerVerificationResource $partner_verification_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\PartnerVerificationResource
     */
    public function partnersVerificationsUpdate($partner_id , $partner_verification_resource)
    {
        list($response) = $this->partnersVerificationsUpdateWithHttpInfo($partner_id, $partner_verification_resource);
        return $response;
    }

    /**
     * Operation partnersVerificationsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $partner_id 
     * @param \Ageras\Api\PartnerVerificationResource $partner_verification_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\PartnerVerificationResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnersVerificationsUpdateWithHttpInfo($partner_id , $partner_verification_resource)
    {
        // parse inputs
        $resourcePath = "/partners/{partner_id}/verifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($partner_id !== null) {
            $resourcePath = str_replace(
                "{" . "partner_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($partner_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($partner_verification_resource)) {
            $_tempBody = $partner_verification_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\PartnerVerificationResource',
                '/partners/{partner_id}/verifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\PartnerVerificationResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\PartnerVerificationResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
