<?php
/**
 * ProjectsApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\Configuration;
use \Ageras\Api\ObjectSerializer;

/**
 * ProjectsApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectsApi
{
    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return ProjectsApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation projectsCreate
     *
     * 
     *
     * @param \Ageras\Api\ProjectResource $project_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectResource
     */
    public function projectsCreate($project_resource)
    {
        list($response) = $this->projectsCreateWithHttpInfo($project_resource);
        return $response;
    }

    /**
     * Operation projectsCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\ProjectResource $project_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsCreateWithHttpInfo($project_resource)
    {
        // parse inputs
        $resourcePath = "/projects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($project_resource)) {
            $_tempBody = $project_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResource',
                '/projects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsDelete
     *
     * 
     *
     * @param string $project_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function projectsDelete($project_id )
    {
        list($response) = $this->projectsDeleteWithHttpInfo($project_id);
        return $response;
    }

    /**
     * Operation projectsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsDeleteWithHttpInfo($project_id )
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsCreate
     *
     * 
     *
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsEventsCreate($project_event_resource)
    {
        list($response) = $this->projectsEventsCreateWithHttpInfo($project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsCreateWithHttpInfo($project_event_resource)
    {
        // parse inputs
        $resourcePath = "/projects/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsCreate_0
     *
     * 
     *
     * @param string $project_id 
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsEventsCreate_0($project_id , $project_event_resource)
    {
        list($response) = $this->projectsEventsCreate_0WithHttpInfo($project_id, $project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsCreate_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsCreate_0WithHttpInfo($project_id , $project_event_resource)
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsDelete
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_event_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function projectsEventsDelete($project_id,  $project_event_id )
    {
        list($response) = $this->projectsEventsDeleteWithHttpInfo($project_id, $project_event_id);
        return $response;
    }

    /**
     * Operation projectsEventsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_event_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsDeleteWithHttpInfo($project_id,  $project_event_id )
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/events/{project_event_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project_id}/events/{project_event_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsGet
     *
     * 
     *
     * @param string $project_event_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsEventsGet($project_event_id )
    {
        list($response) = $this->projectsEventsGetWithHttpInfo($project_event_id);
        return $response;
    }

    /**
     * Operation projectsEventsGetWithHttpInfo
     *
     * 
     *
     * @param string $project_event_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsGetWithHttpInfo($project_event_id )
    {
        // parse inputs
        $resourcePath = "/projects/events/{project_event_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/events/{project_event_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsGet_0
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_event_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsEventsGet_0($project_id,  $project_event_id )
    {
        list($response) = $this->projectsEventsGet_0WithHttpInfo($project_id, $project_event_id);
        return $response;
    }

    /**
     * Operation projectsEventsGet_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_event_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsGet_0WithHttpInfo($project_id,  $project_event_id )
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/events/{project_event_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/events/{project_event_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'project_event_id' => string,
     *    'project_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'scheduled_from' => string,
     *    'scheduled_to' => string,
     *    'type' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResult
     */
    public function projectsEventsIndex($criteria = [])
    {
        list($response) = $this->projectsEventsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation projectsEventsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'project_event_id' => string,
     *    'project_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'scheduled_from' => string,
     *    'scheduled_to' => string,
     *    'type' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/projects/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['project_event_id'])) {
            $queryParams['project_event_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['project_event_id']);
        }
        // query params
        if (isset($criteria['project_id'])) {
            $queryParams['project_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['project_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['partner_user_id'])) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_user_id']);
        }
        // query params
        if (isset($criteria['scheduled_from'])) {
            $queryParams['scheduled_from'] = $this->apiClient->getSerializer()->toQueryValue($criteria['scheduled_from']);
        }
        // query params
        if (isset($criteria['scheduled_to'])) {
            $queryParams['scheduled_to'] = $this->apiClient->getSerializer()->toQueryValue($criteria['scheduled_to']);
        }
        // query params
        if (isset($criteria['type'])) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($criteria['type']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsIndex_0
     *
     * 
     *
     * @param string $project_id 
     * @param $criteria = [
     *    'project_event_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'scheduled_from' => string,
     *    'scheduled_to' => string,
     *    'type' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResult
     */
    public function projectsEventsIndex_0($project_id , $criteria = [])
    {
        list($response) = $this->projectsEventsIndex_0WithHttpInfo($project_id, $criteria);
        return $response;
    }

    /**
     * Operation projectsEventsIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param $criteria = [
     *    'project_event_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'scheduled_from' => string,
     *    'scheduled_to' => string,
     *    'type' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsIndex_0WithHttpInfo($project_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['project_event_id'])) {
            $queryParams['project_event_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['project_event_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['partner_user_id'])) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_user_id']);
        }
        // query params
        if (isset($criteria['scheduled_from'])) {
            $queryParams['scheduled_from'] = $this->apiClient->getSerializer()->toQueryValue($criteria['scheduled_from']);
        }
        // query params
        if (isset($criteria['scheduled_to'])) {
            $queryParams['scheduled_to'] = $this->apiClient->getSerializer()->toQueryValue($criteria['scheduled_to']);
        }
        // query params
        if (isset($criteria['type'])) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($criteria['type']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/{project_id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsUpdate
     *
     * 
     *
     * @param string $project_event_id 
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsEventsUpdate($project_event_id , $project_event_resource)
    {
        list($response) = $this->projectsEventsUpdateWithHttpInfo($project_event_id, $project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $project_event_id 
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsUpdateWithHttpInfo($project_event_id , $project_event_resource)
    {
        // parse inputs
        $resourcePath = "/projects/events/{project_event_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/events/{project_event_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsUpdate_0
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_event_id 
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsEventsUpdate_0($project_id,  $project_event_id , $project_event_resource)
    {
        list($response) = $this->projectsEventsUpdate_0WithHttpInfo($project_id, $project_event_id, $project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsUpdate_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_event_id 
     * @param \Ageras\Api\ProjectEventResource $project_event_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsEventsUpdate_0WithHttpInfo($project_id,  $project_event_id , $project_event_resource)
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/events/{project_event_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/events/{project_event_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsGet
     *
     * 
     *
     * @param string $project_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectResource
     */
    public function projectsGet($project_id )
    {
        list($response) = $this->projectsGetWithHttpInfo($project_id);
        return $response;
    }

    /**
     * Operation projectsGetWithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsGetWithHttpInfo($project_id )
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResource',
                '/projects/{project_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsIndex
     *
     * 
     *
     * @param $criteria = [
     *    'project_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'lead_id' => string,
     *    'name' => string,
     *    'geo_code' => string,
     *    'status' => string,
     *    'progress' => string,
     *    'sort' => string,
     *    'is_archived' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectResult
     */
    public function projectsIndex($criteria = [])
    {
        list($response) = $this->projectsIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation projectsIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'project_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'lead_id' => string,
     *    'name' => string,
     *    'geo_code' => string,
     *    'status' => string,
     *    'progress' => string,
     *    'sort' => string,
     *    'is_archived' => bool,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/projects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['project_id'])) {
            $queryParams['project_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['project_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['partner_user_id'])) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_user_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['name'])) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($criteria['name']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['progress'])) {
            $queryParams['progress'] = $this->apiClient->getSerializer()->toQueryValue($criteria['progress']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['is_archived'])) {
            $queryParams['is_archived'] = $this->apiClient->getSerializer()->toQueryValue($criteria['is_archived']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResult',
                '/projects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesCreate
     *
     * 
     *
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsNotesCreate($project_note_resource)
    {
        list($response) = $this->projectsNotesCreateWithHttpInfo($project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesCreateWithHttpInfo
     *
     * 
     *
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesCreateWithHttpInfo($project_note_resource)
    {
        // parse inputs
        $resourcePath = "/projects/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesCreate_0
     *
     * 
     *
     * @param string $project_id 
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsNotesCreate_0($project_id , $project_note_resource)
    {
        list($response) = $this->projectsNotesCreate_0WithHttpInfo($project_id, $project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesCreate_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesCreate_0WithHttpInfo($project_id , $project_note_resource)
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesDelete
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return void
     */
    public function projectsNotesDelete($project_id,  $project_note_id )
    {
        list($response) = $this->projectsNotesDeleteWithHttpInfo($project_id, $project_note_id);
        return $response;
    }

    /**
     * Operation projectsNotesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesDeleteWithHttpInfo($project_id,  $project_note_id )
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project_id}/notes/{project_note_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesGet
     *
     * 
     *
     * @param string $project_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsNotesGet($project_note_id )
    {
        list($response) = $this->projectsNotesGetWithHttpInfo($project_note_id);
        return $response;
    }

    /**
     * Operation projectsNotesGetWithHttpInfo
     *
     * 
     *
     * @param string $project_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesGetWithHttpInfo($project_note_id )
    {
        // parse inputs
        $resourcePath = "/projects/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/notes/{project_note_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesGet_0
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsNotesGet_0($project_id,  $project_note_id )
    {
        list($response) = $this->projectsNotesGet_0WithHttpInfo($project_id, $project_note_id);
        return $response;
    }

    /**
     * Operation projectsNotesGet_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_note_id 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesGet_0WithHttpInfo($project_id,  $project_note_id )
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/notes/{project_note_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'project_note_id' => string,
     *    'project_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'lead_id' => string,
     *    'name' => string,
     *    'geo_code' => string,
     *    'status' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResult
     */
    public function projectsNotesIndex($criteria = [])
    {
        list($response) = $this->projectsNotesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation projectsNotesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'project_note_id' => string,
     *    'project_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'lead_id' => string,
     *    'name' => string,
     *    'geo_code' => string,
     *    'status' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/projects/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['project_note_id'])) {
            $queryParams['project_note_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['project_note_id']);
        }
        // query params
        if (isset($criteria['project_id'])) {
            $queryParams['project_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['project_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['partner_user_id'])) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_user_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['name'])) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($criteria['name']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesIndex_0
     *
     * 
     *
     * @param string $project_id 
     * @param $criteria = [
     *    'project_note_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'lead_id' => string,
     *    'name' => string,
     *    'geo_code' => string,
     *    'status' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResult
     */
    public function projectsNotesIndex_0($project_id , $criteria = [])
    {
        list($response) = $this->projectsNotesIndex_0WithHttpInfo($project_id, $criteria);
        return $response;
    }

    /**
     * Operation projectsNotesIndex_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param $criteria = [
     *    'project_note_id' => string,
     *    'partner_id' => string,
     *    'partner_user_id' => string,
     *    'lead_id' => string,
     *    'name' => string,
     *    'geo_code' => string,
     *    'status' => string,
     *    'sort' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesIndex_0WithHttpInfo($project_id , $criteria = [])
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['project_note_id'])) {
            $queryParams['project_note_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['project_note_id']);
        }
        // query params
        if (isset($criteria['partner_id'])) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_id']);
        }
        // query params
        if (isset($criteria['partner_user_id'])) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['partner_user_id']);
        }
        // query params
        if (isset($criteria['lead_id'])) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($criteria['lead_id']);
        }
        // query params
        if (isset($criteria['name'])) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($criteria['name']);
        }
        // query params
        if (isset($criteria['geo_code'])) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($criteria['geo_code']);
        }
        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['sort'])) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($criteria['sort']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/{project_id}/notes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesUpdate
     *
     * 
     *
     * @param string $project_note_id 
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsNotesUpdate($project_note_id , $project_note_resource)
    {
        list($response) = $this->projectsNotesUpdateWithHttpInfo($project_note_id, $project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesUpdateWithHttpInfo
     *
     * 
     *
     * @param string $project_note_id 
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesUpdateWithHttpInfo($project_note_id , $project_note_resource)
    {
        // parse inputs
        $resourcePath = "/projects/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/notes/{project_note_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesUpdate_0
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_note_id 
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectNoteResource
     */
    public function projectsNotesUpdate_0($project_id,  $project_note_id , $project_note_resource)
    {
        list($response) = $this->projectsNotesUpdate_0WithHttpInfo($project_id, $project_note_id, $project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesUpdate_0WithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param string $project_note_id 
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsNotesUpdate_0WithHttpInfo($project_id,  $project_note_id , $project_note_resource)
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/notes/{project_note_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsStatusesGet
     *
     * 
     *
     * @param string $status 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectStatusResource
     */
    public function projectsStatusesGet($status )
    {
        list($response) = $this->projectsStatusesGetWithHttpInfo($status);
        return $response;
    }

    /**
     * Operation projectsStatusesGetWithHttpInfo
     *
     * 
     *
     * @param string $status 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectStatusResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsStatusesGetWithHttpInfo($status )
    {
        // parse inputs
        $resourcePath = "/projects/{status}/statuses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status !== null) {
            $resourcePath = str_replace(
                "{" . "status" . "}",
                $this->apiClient->getSerializer()->toPathValue($status),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectStatusResource',
                '/projects/{status}/statuses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectStatusResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectStatusResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsStatusesIndex
     *
     * 
     *
     * @param $criteria = [
     *    'status' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectStatusResult
     */
    public function projectsStatusesIndex($criteria = [])
    {
        list($response) = $this->projectsStatusesIndexWithHttpInfo($criteria);
        return $response;
    }

    /**
     * Operation projectsStatusesIndexWithHttpInfo
     *
     * 
     *
     * @param $criteria = [
     *    'status' => string,
     *    'limit' => int,
     *    'page' => int,
     *    'query' => string,
     * ]
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectStatusResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsStatusesIndexWithHttpInfo($criteria = [])
    {
        // parse inputs
        $resourcePath = "/projects/statuses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (isset($criteria['status'])) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($criteria['status']);
        }
        // query params
        if (isset($criteria['limit'])) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($criteria['limit']);
        }
        // query params
        if (isset($criteria['page'])) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($criteria['page']);
        }
        // query params
        if (isset($criteria['query'])) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($criteria['query']);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectStatusResult',
                '/projects/statuses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectStatusResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectStatusResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsUpdate
     *
     * 
     *
     * @param string $project_id 
     * @param \Ageras\Api\ProjectResource $project_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return \Ageras\Api\ProjectResource
     */
    public function projectsUpdate($project_id , $project_resource)
    {
        list($response) = $this->projectsUpdateWithHttpInfo($project_id, $project_resource);
        return $response;
    }

    /**
     * Operation projectsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $project_id 
     * @param \Ageras\Api\ProjectResource $project_resource 
     * @throws \Ageras\Api\ApiException on non-2xx response
     * @return array of \Ageras\Api\ProjectResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsUpdateWithHttpInfo($project_id , $project_resource)
    {
        // parse inputs
        $resourcePath = "/projects/{project_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($project_resource)) {
            $_tempBody = $project_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResource',
                '/projects/{project_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
