<?php
/**
 * ProjectsApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\Configuration;
use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\ObjectSerializer;

/**
 * ProjectsApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectsApi
{

    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ageras.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return ProjectsApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation projectsCreate
     *
     * Create Project.
     *
     * @param \Ageras\Api\ProjectResource $project_resource  (required)
     * @return \Ageras\Api\ProjectResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsCreate($project_resource)
    {
        list($response) = $this->projectsCreateWithHttpInfo($project_resource);
        return $response;
    }

    /**
     * Operation projectsCreateWithHttpInfo
     *
     * Create Project.
     *
     * @param \Ageras\Api\ProjectResource $project_resource  (required)
     * @return Array of \Ageras\Api\ProjectResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsCreateWithHttpInfo($project_resource)
    {
        // verify the required parameter 'project_resource' is set
        if ($project_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_resource when calling projectsCreate');
        }
        // parse inputs
        $resourcePath = "/projects";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_resource)) {
            $_tempBody = $project_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResource',
                '/projects'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsDelete
     *
     * Delete a project for a given project id.
     *
     * @param string $project_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsDelete($project_id)
    {
        list($response) = $this->projectsDeleteWithHttpInfo($project_id);
        return $response;
    }

    /**
     * Operation projectsDeleteWithHttpInfo
     *
     * Delete a project for a given project id.
     *
     * @param string $project_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsDeleteWithHttpInfo($project_id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsDelete');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsCreate
     *
     * Create events for a given project.
     *
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsCreate($project_event_resource)
    {
        list($response) = $this->projectsEventsCreateWithHttpInfo($project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsCreateWithHttpInfo
     *
     * Create events for a given project.
     *
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsCreateWithHttpInfo($project_event_resource)
    {
        // verify the required parameter 'project_event_resource' is set
        if ($project_event_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_resource when calling projectsEventsCreate');
        }
        // parse inputs
        $resourcePath = "/projects/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/events'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsCreate2
     *
     * Create events for a given project.
     *
     * @param string $project_id  (required)
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsCreate2($project_id, $project_event_resource)
    {
        list($response) = $this->projectsEventsCreate2WithHttpInfo($project_id, $project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsCreate2WithHttpInfo
     *
     * Create events for a given project.
     *
     * @param string $project_id  (required)
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsCreate2WithHttpInfo($project_id, $project_event_resource)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsEventsCreate2');
        }
        // verify the required parameter 'project_event_resource' is set
        if ($project_event_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_resource when calling projectsEventsCreate2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/events'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsDelete
     *
     * Delete a given project event.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsDelete($project_id, $project_event_id)
    {
        list($response) = $this->projectsEventsDeleteWithHttpInfo($project_id, $project_event_id);
        return $response;
    }

    /**
     * Operation projectsEventsDeleteWithHttpInfo
     *
     * Delete a given project event.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsDeleteWithHttpInfo($project_id, $project_event_id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsEventsDelete');
        }
        // verify the required parameter 'project_event_id' is set
        if ($project_event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_id when calling projectsEventsDelete');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/events/{project_event_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project_id}/events/{project_event_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsGet
     *
     * Get event for a given project.
     *
     * @param string $project_event_id  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsGet($project_event_id)
    {
        list($response) = $this->projectsEventsGetWithHttpInfo($project_event_id);
        return $response;
    }

    /**
     * Operation projectsEventsGetWithHttpInfo
     *
     * Get event for a given project.
     *
     * @param string $project_event_id  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsGetWithHttpInfo($project_event_id)
    {
        // verify the required parameter 'project_event_id' is set
        if ($project_event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_id when calling projectsEventsGet');
        }
        // parse inputs
        $resourcePath = "/projects/events/{project_event_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/events/{project_event_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsGet2
     *
     * Get event for a given project.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsGet2($project_id, $project_event_id)
    {
        list($response) = $this->projectsEventsGet2WithHttpInfo($project_id, $project_event_id);
        return $response;
    }

    /**
     * Operation projectsEventsGet2WithHttpInfo
     *
     * Get event for a given project.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsGet2WithHttpInfo($project_id, $project_event_id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsEventsGet2');
        }
        // verify the required parameter 'project_event_id' is set
        if ($project_event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_id when calling projectsEventsGet2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/events/{project_event_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/events/{project_event_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsIndex
     *
     * List events for a given project.
     *
     * @param string $project_event_id Id for the Projects&#39;s events. (optional)
     * @param string $project_id Project ID. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $scheduled_from Events scheduled from. (optional)
     * @param string $scheduled_to Events scheduled to. (optional)
     * @param string $type Project Event Types. (optional, default to unknown)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\ProjectNoteResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsIndex($project_event_id = null, $project_id = null, $partner_id = null, $partner_user_id = null, $scheduled_from = null, $scheduled_to = null, $type = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->projectsEventsIndexWithHttpInfo($project_event_id, $project_id, $partner_id, $partner_user_id, $scheduled_from, $scheduled_to, $type, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation projectsEventsIndexWithHttpInfo
     *
     * List events for a given project.
     *
     * @param string $project_event_id Id for the Projects&#39;s events. (optional)
     * @param string $project_id Project ID. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $scheduled_from Events scheduled from. (optional)
     * @param string $scheduled_to Events scheduled to. (optional)
     * @param string $type Project Event Types. (optional, default to unknown)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsIndexWithHttpInfo($project_event_id = null, $project_id = null, $partner_id = null, $partner_user_id = null, $scheduled_from = null, $scheduled_to = null, $type = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/projects/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($project_event_id !== null) {
            $queryParams['project_event_id'] = $this->apiClient->getSerializer()->toQueryValue($project_event_id);
        }
        // query params
        if ($project_id !== null) {
            $queryParams['project_id'] = $this->apiClient->getSerializer()->toQueryValue($project_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($scheduled_from !== null) {
            $queryParams['scheduled_from'] = $this->apiClient->getSerializer()->toQueryValue($scheduled_from);
        }
        // query params
        if ($scheduled_to !== null) {
            $queryParams['scheduled_to'] = $this->apiClient->getSerializer()->toQueryValue($scheduled_to);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/events'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsIndex2
     *
     * List events for a given project.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id Id for the Projects&#39;s events. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $scheduled_from Events scheduled from. (optional)
     * @param string $scheduled_to Events scheduled to. (optional)
     * @param string $type Project Event Types. (optional, default to unknown)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\ProjectNoteResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsIndex2($project_id, $project_event_id = null, $partner_id = null, $partner_user_id = null, $scheduled_from = null, $scheduled_to = null, $type = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->projectsEventsIndex2WithHttpInfo($project_id, $project_event_id, $partner_id, $partner_user_id, $scheduled_from, $scheduled_to, $type, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation projectsEventsIndex2WithHttpInfo
     *
     * List events for a given project.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id Id for the Projects&#39;s events. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $scheduled_from Events scheduled from. (optional)
     * @param string $scheduled_to Events scheduled to. (optional)
     * @param string $type Project Event Types. (optional, default to unknown)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsIndex2WithHttpInfo($project_id, $project_event_id = null, $partner_id = null, $partner_user_id = null, $scheduled_from = null, $scheduled_to = null, $type = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsEventsIndex2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($project_event_id !== null) {
            $queryParams['project_event_id'] = $this->apiClient->getSerializer()->toQueryValue($project_event_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($scheduled_from !== null) {
            $queryParams['scheduled_from'] = $this->apiClient->getSerializer()->toQueryValue($scheduled_from);
        }
        // query params
        if ($scheduled_to !== null) {
            $queryParams['scheduled_to'] = $this->apiClient->getSerializer()->toQueryValue($scheduled_to);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/{project_id}/events'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsUpdate
     *
     * Update e events for project events.
     *
     * @param string $project_event_id  (required)
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsUpdate($project_event_id, $project_event_resource)
    {
        list($response) = $this->projectsEventsUpdateWithHttpInfo($project_event_id, $project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsUpdateWithHttpInfo
     *
     * Update e events for project events.
     *
     * @param string $project_event_id  (required)
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsUpdateWithHttpInfo($project_event_id, $project_event_resource)
    {
        // verify the required parameter 'project_event_id' is set
        if ($project_event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_id when calling projectsEventsUpdate');
        }
        // verify the required parameter 'project_event_resource' is set
        if ($project_event_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_resource when calling projectsEventsUpdate');
        }
        // parse inputs
        $resourcePath = "/projects/events/{project_event_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/events/{project_event_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsEventsUpdate2
     *
     * Update e events for project events.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id  (required)
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsUpdate2($project_id, $project_event_id, $project_event_resource)
    {
        list($response) = $this->projectsEventsUpdate2WithHttpInfo($project_id, $project_event_id, $project_event_resource);
        return $response;
    }

    /**
     * Operation projectsEventsUpdate2WithHttpInfo
     *
     * Update e events for project events.
     *
     * @param string $project_id  (required)
     * @param string $project_event_id  (required)
     * @param \Ageras\Api\ProjectEventResource $project_event_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsEventsUpdate2WithHttpInfo($project_id, $project_event_id, $project_event_resource)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsEventsUpdate2');
        }
        // verify the required parameter 'project_event_id' is set
        if ($project_event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_id when calling projectsEventsUpdate2');
        }
        // verify the required parameter 'project_event_resource' is set
        if ($project_event_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_event_resource when calling projectsEventsUpdate2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/events/{project_event_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_event_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_event_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_event_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_event_resource)) {
            $_tempBody = $project_event_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/events/{project_event_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsGet
     *
     * Get a Project from a project id.
     *
     * @param string $project_id  (required)
     * @return \Ageras\Api\ProjectResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsGet($project_id)
    {
        list($response) = $this->projectsGetWithHttpInfo($project_id);
        return $response;
    }

    /**
     * Operation projectsGetWithHttpInfo
     *
     * Get a Project from a project id.
     *
     * @param string $project_id  (required)
     * @return Array of \Ageras\Api\ProjectResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsGetWithHttpInfo($project_id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsGet');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResource',
                '/projects/{project_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsIndex
     *
     * List Projects.
     *
     * @param string $project_id Project ID. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $lead_id Lead Id. (optional)
     * @param string $name Project name in its native language. (optional)
     * @param string $geo_code Project geo code origin. (optional)
     * @param string $status Project Status. (optional)
     * @param string $sort Sort projects (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\ProjectResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsIndex($project_id = null, $partner_id = null, $partner_user_id = null, $lead_id = null, $name = null, $geo_code = null, $status = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->projectsIndexWithHttpInfo($project_id, $partner_id, $partner_user_id, $lead_id, $name, $geo_code, $status, $sort, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation projectsIndexWithHttpInfo
     *
     * List Projects.
     *
     * @param string $project_id Project ID. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $lead_id Lead Id. (optional)
     * @param string $name Project name in its native language. (optional)
     * @param string $geo_code Project geo code origin. (optional)
     * @param string $status Project Status. (optional)
     * @param string $sort Sort projects (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\ProjectResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsIndexWithHttpInfo($project_id = null, $partner_id = null, $partner_user_id = null, $lead_id = null, $name = null, $geo_code = null, $status = null, $sort = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/projects";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($project_id !== null) {
            $queryParams['project_id'] = $this->apiClient->getSerializer()->toQueryValue($project_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResult',
                '/projects'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesCreate
     *
     * Create a note for a given project.
     *
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesCreate($project_note_resource)
    {
        list($response) = $this->projectsNotesCreateWithHttpInfo($project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesCreateWithHttpInfo
     *
     * Create a note for a given project.
     *
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesCreateWithHttpInfo($project_note_resource)
    {
        // verify the required parameter 'project_note_resource' is set
        if ($project_note_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_resource when calling projectsNotesCreate');
        }
        // parse inputs
        $resourcePath = "/projects/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesCreate2
     *
     * Create a note for a given project.
     *
     * @param string $project_id  (required)
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesCreate2($project_id, $project_note_resource)
    {
        list($response) = $this->projectsNotesCreate2WithHttpInfo($project_id, $project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesCreate2WithHttpInfo
     *
     * Create a note for a given project.
     *
     * @param string $project_id  (required)
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesCreate2WithHttpInfo($project_id, $project_note_resource)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsNotesCreate2');
        }
        // verify the required parameter 'project_note_resource' is set
        if ($project_note_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_resource when calling projectsNotesCreate2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesDelete
     *
     * Delete a project note.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesDelete($project_id, $project_note_id)
    {
        list($response) = $this->projectsNotesDeleteWithHttpInfo($project_id, $project_note_id);
        return $response;
    }

    /**
     * Operation projectsNotesDeleteWithHttpInfo
     *
     * Delete a project note.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesDeleteWithHttpInfo($project_id, $project_note_id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsNotesDelete');
        }
        // verify the required parameter 'project_note_id' is set
        if ($project_note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_id when calling projectsNotesDelete');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/projects/{project_id}/notes/{project_note_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesGet
     *
     * Get a note from Project and note id.
     *
     * @param string $project_note_id  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesGet($project_note_id)
    {
        list($response) = $this->projectsNotesGetWithHttpInfo($project_note_id);
        return $response;
    }

    /**
     * Operation projectsNotesGetWithHttpInfo
     *
     * Get a note from Project and note id.
     *
     * @param string $project_note_id  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesGetWithHttpInfo($project_note_id)
    {
        // verify the required parameter 'project_note_id' is set
        if ($project_note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_id when calling projectsNotesGet');
        }
        // parse inputs
        $resourcePath = "/projects/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/notes/{project_note_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesGet2
     *
     * Get a note from Project and note id.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesGet2($project_id, $project_note_id)
    {
        list($response) = $this->projectsNotesGet2WithHttpInfo($project_id, $project_note_id);
        return $response;
    }

    /**
     * Operation projectsNotesGet2WithHttpInfo
     *
     * Get a note from Project and note id.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesGet2WithHttpInfo($project_id, $project_note_id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsNotesGet2');
        }
        // verify the required parameter 'project_note_id' is set
        if ($project_note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_id when calling projectsNotesGet2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/notes/{project_note_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesIndex
     *
     * List notes from a given project.
     *
     * @param string $project_note_id Id for the Project&#39;s notes. (optional)
     * @param string $project_id Project ID. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $lead_id Lead Id. (optional)
     * @param string $name Project name in its native language. (optional)
     * @param string $geo_code Project geo code origin. (optional)
     * @param string $status Project Status. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\ProjectNoteResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesIndex($project_note_id = null, $project_id = null, $partner_id = null, $partner_user_id = null, $lead_id = null, $name = null, $geo_code = null, $status = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->projectsNotesIndexWithHttpInfo($project_note_id, $project_id, $partner_id, $partner_user_id, $lead_id, $name, $geo_code, $status, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation projectsNotesIndexWithHttpInfo
     *
     * List notes from a given project.
     *
     * @param string $project_note_id Id for the Project&#39;s notes. (optional)
     * @param string $project_id Project ID. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $lead_id Lead Id. (optional)
     * @param string $name Project name in its native language. (optional)
     * @param string $geo_code Project geo code origin. (optional)
     * @param string $status Project Status. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesIndexWithHttpInfo($project_note_id = null, $project_id = null, $partner_id = null, $partner_user_id = null, $lead_id = null, $name = null, $geo_code = null, $status = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/projects/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($project_note_id !== null) {
            $queryParams['project_note_id'] = $this->apiClient->getSerializer()->toQueryValue($project_note_id);
        }
        // query params
        if ($project_id !== null) {
            $queryParams['project_id'] = $this->apiClient->getSerializer()->toQueryValue($project_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesIndex2
     *
     * List notes from a given project.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id Id for the Project&#39;s notes. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $lead_id Lead Id. (optional)
     * @param string $name Project name in its native language. (optional)
     * @param string $geo_code Project geo code origin. (optional)
     * @param string $status Project Status. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\ProjectNoteResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesIndex2($project_id, $project_note_id = null, $partner_id = null, $partner_user_id = null, $lead_id = null, $name = null, $geo_code = null, $status = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->projectsNotesIndex2WithHttpInfo($project_id, $project_note_id, $partner_id, $partner_user_id, $lead_id, $name, $geo_code, $status, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation projectsNotesIndex2WithHttpInfo
     *
     * List notes from a given project.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id Id for the Project&#39;s notes. (optional)
     * @param string $partner_id Partner Id. (optional)
     * @param string $partner_user_id Partner User Id. (optional)
     * @param string $lead_id Lead Id. (optional)
     * @param string $name Project name in its native language. (optional)
     * @param string $geo_code Project geo code origin. (optional)
     * @param string $status Project Status. (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\ProjectNoteResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesIndex2WithHttpInfo($project_id, $project_note_id = null, $partner_id = null, $partner_user_id = null, $lead_id = null, $name = null, $geo_code = null, $status = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsNotesIndex2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($project_note_id !== null) {
            $queryParams['project_note_id'] = $this->apiClient->getSerializer()->toQueryValue($project_note_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($partner_user_id !== null) {
            $queryParams['partner_user_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_user_id);
        }
        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResult',
                '/projects/{project_id}/notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesUpdate
     *
     * Update a given project note.
     *
     * @param string $project_note_id  (required)
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesUpdate($project_note_id, $project_note_resource)
    {
        list($response) = $this->projectsNotesUpdateWithHttpInfo($project_note_id, $project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesUpdateWithHttpInfo
     *
     * Update a given project note.
     *
     * @param string $project_note_id  (required)
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesUpdateWithHttpInfo($project_note_id, $project_note_resource)
    {
        // verify the required parameter 'project_note_id' is set
        if ($project_note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_id when calling projectsNotesUpdate');
        }
        // verify the required parameter 'project_note_resource' is set
        if ($project_note_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_resource when calling projectsNotesUpdate');
        }
        // parse inputs
        $resourcePath = "/projects/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/notes/{project_note_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsNotesUpdate2
     *
     * Update a given project note.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id  (required)
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return \Ageras\Api\ProjectNoteResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesUpdate2($project_id, $project_note_id, $project_note_resource)
    {
        list($response) = $this->projectsNotesUpdate2WithHttpInfo($project_id, $project_note_id, $project_note_resource);
        return $response;
    }

    /**
     * Operation projectsNotesUpdate2WithHttpInfo
     *
     * Update a given project note.
     *
     * @param string $project_id  (required)
     * @param string $project_note_id  (required)
     * @param \Ageras\Api\ProjectNoteResource $project_note_resource  (required)
     * @return Array of \Ageras\Api\ProjectNoteResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsNotesUpdate2WithHttpInfo($project_id, $project_note_id, $project_note_resource)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsNotesUpdate2');
        }
        // verify the required parameter 'project_note_id' is set
        if ($project_note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_id when calling projectsNotesUpdate2');
        }
        // verify the required parameter 'project_note_resource' is set
        if ($project_note_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_note_resource when calling projectsNotesUpdate2');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}/notes/{project_note_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($project_note_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_note_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_note_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_note_resource)) {
            $_tempBody = $project_note_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectNoteResource',
                '/projects/{project_id}/notes/{project_note_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectNoteResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectNoteResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsStatusesGet
     *
     * Get a Project Status from Id.
     *
     * @param string $status  (required)
     * @return \Ageras\Api\ProjectStatusResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsStatusesGet($status)
    {
        list($response) = $this->projectsStatusesGetWithHttpInfo($status);
        return $response;
    }

    /**
     * Operation projectsStatusesGetWithHttpInfo
     *
     * Get a Project Status from Id.
     *
     * @param string $status  (required)
     * @return Array of \Ageras\Api\ProjectStatusResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsStatusesGetWithHttpInfo($status)
    {
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling projectsStatusesGet');
        }
        // parse inputs
        $resourcePath = "/projects/{status}/statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($status !== null) {
            $resourcePath = str_replace(
                "{" . "status" . "}",
                $this->apiClient->getSerializer()->toPathValue($status),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectStatusResource',
                '/projects/{status}/statuses'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectStatusResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectStatusResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsStatusesIndex
     *
     * List Available Project Statuses.
     *
     * @param string $status  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\ProjectStatusResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsStatusesIndex($status = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->projectsStatusesIndexWithHttpInfo($status, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation projectsStatusesIndexWithHttpInfo
     *
     * List Available Project Statuses.
     *
     * @param string $status  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\ProjectStatusResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsStatusesIndexWithHttpInfo($status = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/projects/statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectStatusResult',
                '/projects/statuses'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectStatusResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectStatusResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectsUpdate
     *
     * Update a project.
     *
     * @param string $project_id  (required)
     * @param \Ageras\Api\ProjectResource $project_resource  (required)
     * @return \Ageras\Api\ProjectResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsUpdate($project_id, $project_resource)
    {
        list($response) = $this->projectsUpdateWithHttpInfo($project_id, $project_resource);
        return $response;
    }

    /**
     * Operation projectsUpdateWithHttpInfo
     *
     * Update a project.
     *
     * @param string $project_id  (required)
     * @param \Ageras\Api\ProjectResource $project_resource  (required)
     * @return Array of \Ageras\Api\ProjectResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function projectsUpdateWithHttpInfo($project_id, $project_resource)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsUpdate');
        }
        // verify the required parameter 'project_resource' is set
        if ($project_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_resource when calling projectsUpdate');
        }
        // parse inputs
        $resourcePath = "/projects/{project_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                "{" . "project_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($project_resource)) {
            $_tempBody = $project_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\ProjectResource',
                '/projects/{project_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\ProjectResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\ProjectResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
