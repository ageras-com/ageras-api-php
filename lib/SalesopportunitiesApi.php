<?php
/**
 * SalesopportunitiesApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\Configuration;
use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\ObjectSerializer;

/**
 * SalesopportunitiesApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesopportunitiesApi
{

    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ageras.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return SalesopportunitiesApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation salesOpportunitiesAggregationsIndex
     *
     * Index aggregations.
     *
     * @param int $employee_id Employee ID. (optional)
     * @param string $month Filter by month. (optional)
     * @param int $limit Limit. (optional)
     * @param string $geo_code Opportunities by geo code. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\SalesOpportunityResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesAggregationsIndex($employee_id = null, $month = null, $limit = null, $geo_code = null, $page = null, $query = null)
    {
        list($response) = $this->salesOpportunitiesAggregationsIndexWithHttpInfo($employee_id, $month, $limit, $geo_code, $page, $query);
        return $response;
    }

    /**
     * Operation salesOpportunitiesAggregationsIndexWithHttpInfo
     *
     * Index aggregations.
     *
     * @param int $employee_id Employee ID. (optional)
     * @param string $month Filter by month. (optional)
     * @param int $limit Limit. (optional)
     * @param string $geo_code Opportunities by geo code. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\SalesOpportunityResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesAggregationsIndexWithHttpInfo($employee_id = null, $month = null, $limit = null, $geo_code = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/sales-opportunities/aggregations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($employee_id !== null) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($employee_id);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = $this->apiClient->getSerializer()->toQueryValue($month);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SalesOpportunityResult',
                '/sales-opportunities/aggregations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SalesOpportunityResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SalesOpportunityResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation salesOpportunitiesCreate
     *
     * Create sale opportunity.
     *
     * @param \Ageras\Api\SalesOpportunityResource $sales_opportunity_resource  (required)
     * @return \Ageras\Api\SalesOpportunityResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesCreate($sales_opportunity_resource)
    {
        list($response) = $this->salesOpportunitiesCreateWithHttpInfo($sales_opportunity_resource);
        return $response;
    }

    /**
     * Operation salesOpportunitiesCreateWithHttpInfo
     *
     * Create sale opportunity.
     *
     * @param \Ageras\Api\SalesOpportunityResource $sales_opportunity_resource  (required)
     * @return Array of \Ageras\Api\SalesOpportunityResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesCreateWithHttpInfo($sales_opportunity_resource)
    {
        // verify the required parameter 'sales_opportunity_resource' is set
        if ($sales_opportunity_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sales_opportunity_resource when calling salesOpportunitiesCreate');
        }
        // parse inputs
        $resourcePath = "/sales-opportunities";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sales_opportunity_resource)) {
            $_tempBody = $sales_opportunity_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SalesOpportunityResource',
                '/sales-opportunities'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SalesOpportunityResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SalesOpportunityResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation salesOpportunitiesDelete
     *
     * Delete Sales opportunity.
     *
     * @param string $sales_opportunity_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesDelete($sales_opportunity_id)
    {
        list($response) = $this->salesOpportunitiesDeleteWithHttpInfo($sales_opportunity_id);
        return $response;
    }

    /**
     * Operation salesOpportunitiesDeleteWithHttpInfo
     *
     * Delete Sales opportunity.
     *
     * @param string $sales_opportunity_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesDeleteWithHttpInfo($sales_opportunity_id)
    {
        // verify the required parameter 'sales_opportunity_id' is set
        if ($sales_opportunity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sales_opportunity_id when calling salesOpportunitiesDelete');
        }
        // parse inputs
        $resourcePath = "/sales-opportunities/{sales_opportunity_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($sales_opportunity_id !== null) {
            $resourcePath = str_replace(
                "{" . "sales_opportunity_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($sales_opportunity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sales-opportunities/{sales_opportunity_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation salesOpportunitiesIndex
     *
     * Get list sales pipelines opportunities.
     *
     * @param int $employee_id Employee ID. (optional)
     * @param string $month Filter by month. (optional)
     * @param int $limit Limit. (optional)
     * @param string $geo_code Opportunities by geo code. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\SalesOpportunityResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesIndex($employee_id = null, $month = null, $limit = null, $geo_code = null, $page = null, $query = null)
    {
        list($response) = $this->salesOpportunitiesIndexWithHttpInfo($employee_id, $month, $limit, $geo_code, $page, $query);
        return $response;
    }

    /**
     * Operation salesOpportunitiesIndexWithHttpInfo
     *
     * Get list sales pipelines opportunities.
     *
     * @param int $employee_id Employee ID. (optional)
     * @param string $month Filter by month. (optional)
     * @param int $limit Limit. (optional)
     * @param string $geo_code Opportunities by geo code. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\SalesOpportunityResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesIndexWithHttpInfo($employee_id = null, $month = null, $limit = null, $geo_code = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/sales-opportunities";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($employee_id !== null) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($employee_id);
        }
        // query params
        if ($month !== null) {
            $queryParams['month'] = $this->apiClient->getSerializer()->toQueryValue($month);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SalesOpportunityResult',
                '/sales-opportunities'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SalesOpportunityResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SalesOpportunityResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation salesOpportunitiesUpdate
     *
     * Create Sales opportunity resource.
     *
     * @param string $sales_opportunity_id  (required)
     * @param \Ageras\Api\SalesOpportunityResource $sales_opportunity_resource  (required)
     * @return \Ageras\Api\SalesOpportunityResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesUpdate($sales_opportunity_id, $sales_opportunity_resource)
    {
        list($response) = $this->salesOpportunitiesUpdateWithHttpInfo($sales_opportunity_id, $sales_opportunity_resource);
        return $response;
    }

    /**
     * Operation salesOpportunitiesUpdateWithHttpInfo
     *
     * Create Sales opportunity resource.
     *
     * @param string $sales_opportunity_id  (required)
     * @param \Ageras\Api\SalesOpportunityResource $sales_opportunity_resource  (required)
     * @return Array of \Ageras\Api\SalesOpportunityResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function salesOpportunitiesUpdateWithHttpInfo($sales_opportunity_id, $sales_opportunity_resource)
    {
        // verify the required parameter 'sales_opportunity_id' is set
        if ($sales_opportunity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sales_opportunity_id when calling salesOpportunitiesUpdate');
        }
        // verify the required parameter 'sales_opportunity_resource' is set
        if ($sales_opportunity_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sales_opportunity_resource when calling salesOpportunitiesUpdate');
        }
        // parse inputs
        $resourcePath = "/sales-opportunities/{sales_opportunity_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($sales_opportunity_id !== null) {
            $resourcePath = str_replace(
                "{" . "sales_opportunity_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($sales_opportunity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sales_opportunity_resource)) {
            $_tempBody = $sales_opportunity_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\SalesOpportunityResource',
                '/sales-opportunities/{sales_opportunity_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\SalesOpportunityResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\SalesOpportunityResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
