<?php
/**
 * TaskResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * TaskResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TaskResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'deadline_at' => 'string',
        'completed_at' => 'string',
        'title' => 'string',
        'description' => 'string',
        'employee' => '\Ageras\Api\EmployeeResource',
        'assigned_employee' => '\Ageras\Api\EmployeeResource',
        'completed_by_employee' => '\Ageras\Api\EmployeeResource',
        'status' => '\Ageras\Api\TaskStatusResource',
        'priority' => '\Ageras\Api\TaskPriorityResource',
        'taskables' => '\Ageras\Api\TaskableResource[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deadline_at' => 'deadline_at',
        'completed_at' => 'completed_at',
        'title' => 'title',
        'description' => 'description',
        'employee' => 'employee',
        'assigned_employee' => 'assigned_employee',
        'completed_by_employee' => 'completed_by_employee',
        'status' => 'status',
        'priority' => 'priority',
        'taskables' => 'taskables'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deadline_at' => 'setDeadlineAt',
        'completed_at' => 'setCompletedAt',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'employee' => 'setEmployee',
        'assigned_employee' => 'setAssignedEmployee',
        'completed_by_employee' => 'setCompletedByEmployee',
        'status' => 'setStatus',
        'priority' => 'setPriority',
        'taskables' => 'setTaskables'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deadline_at' => 'getDeadlineAt',
        'completed_at' => 'getCompletedAt',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'employee' => 'getEmployee',
        'assigned_employee' => 'getAssignedEmployee',
        'completed_by_employee' => 'getCompletedByEmployee',
        'status' => 'getStatus',
        'priority' => 'getPriority',
        'taskables' => 'getTaskables'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['deadline_at'] = isset($data['deadline_at']) ? $data['deadline_at'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['assigned_employee'] = isset($data['assigned_employee']) ? $data['assigned_employee'] : null;
        $this->container['completed_by_employee'] = isset($data['completed_by_employee']) ? $data['completed_by_employee'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['taskables'] = isset($data['taskables']) ? $data['taskables'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deadline_at
     * @return string
     */
    public function getDeadlineAt()
    {
        return $this->container['deadline_at'];
    }

    /**
     * Sets deadline_at
     * @param string $deadline_at
     * @return $this
     */
    public function setDeadlineAt($deadline_at)
    {
        $this->container['deadline_at'] = $deadline_at;

        return $this;
    }

    /**
     * Gets completed_at
     * @return string
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     * @param string $completed_at
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets employee
     * @return \Ageras\Api\EmployeeResource
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     * @param \Ageras\Api\EmployeeResource $employee
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets assigned_employee
     * @return \Ageras\Api\EmployeeResource
     */
    public function getAssignedEmployee()
    {
        return $this->container['assigned_employee'];
    }

    /**
     * Sets assigned_employee
     * @param \Ageras\Api\EmployeeResource $assigned_employee
     * @return $this
     */
    public function setAssignedEmployee($assigned_employee)
    {
        $this->container['assigned_employee'] = $assigned_employee;

        return $this;
    }

    /**
     * Gets completed_by_employee
     * @return \Ageras\Api\EmployeeResource
     */
    public function getCompletedByEmployee()
    {
        return $this->container['completed_by_employee'];
    }

    /**
     * Sets completed_by_employee
     * @param \Ageras\Api\EmployeeResource $completed_by_employee
     * @return $this
     */
    public function setCompletedByEmployee($completed_by_employee)
    {
        $this->container['completed_by_employee'] = $completed_by_employee;

        return $this;
    }

    /**
     * Gets status
     * @return \Ageras\Api\TaskStatusResource
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Ageras\Api\TaskStatusResource $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets priority
     * @return \Ageras\Api\TaskPriorityResource
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param \Ageras\Api\TaskPriorityResource $priority
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets taskables
     * @return \Ageras\Api\TaskableResource[]
     */
    public function getTaskables()
    {
        return $this->container['taskables'];
    }

    /**
     * Sets taskables
     * @param \Ageras\Api\TaskableResource[] $taskables
     * @return $this
     */
    public function setTaskables($taskables)
    {
        $this->container['taskables'] = $taskables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


