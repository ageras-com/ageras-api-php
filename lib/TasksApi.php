<?php
/**
 * TasksApi
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \Ageras\Api\Configuration;
use \Ageras\Api\ApiClient;
use \Ageras\Api\ApiException;
use \Ageras\Api\ObjectSerializer;

/**
 * TasksApi Class Doc Comment
 *
 * @category Class
 * @package  Ageras\Api
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TasksApi
{

    /**
     * API Client
     *
     * @var \Ageras\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Ageras\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Ageras\Api\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ageras.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Ageras\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Ageras\Api\ApiClient $apiClient set the API client
     *
     * @return TasksApi
     */
    public function setApiClient(\Ageras\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation tasksCreate
     *
     * Create a new task.
     *
     * @param \Ageras\Api\TaskResource $task_resource  (required)
     * @return \Ageras\Api\TaskResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksCreate($task_resource)
    {
        list($response) = $this->tasksCreateWithHttpInfo($task_resource);
        return $response;
    }

    /**
     * Operation tasksCreateWithHttpInfo
     *
     * Create a new task.
     *
     * @param \Ageras\Api\TaskResource $task_resource  (required)
     * @return Array of \Ageras\Api\TaskResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksCreateWithHttpInfo($task_resource)
    {
        // verify the required parameter 'task_resource' is set
        if ($task_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_resource when calling tasksCreate');
        }
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($task_resource)) {
            $_tempBody = $task_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResource',
                '/tasks'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksDelete
     *
     * Delete a given task by its task_id.
     *
     * @param string $task_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksDelete($task_id)
    {
        list($response) = $this->tasksDeleteWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation tasksDeleteWithHttpInfo
     *
     * Delete a given task by its task_id.
     *
     * @param string $task_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksDeleteWithHttpInfo($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksDelete');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tasks/{task_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation tasksGet
     *
     * Get a given task by its given task_id.
     *
     * @param string $task_id  (required)
     * @return \Ageras\Api\TaskResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksGet($task_id)
    {
        list($response) = $this->tasksGetWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation tasksGetWithHttpInfo
     *
     * Get a given task by its given task_id.
     *
     * @param string $task_id  (required)
     * @return Array of \Ageras\Api\TaskResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksGetWithHttpInfo($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksGet');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResource',
                '/tasks/{task_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksIndex
     *
     * List tasks by employee, asseigned_employee, etc.
     *
     * @param string $task_id Task id&#39;s to filter by. (optional)
     * @param string $geo_code  (optional)
     * @param string $employee_id  (optional)
     * @param string $completed_by_employee_id Filter by tasks that are completed by a given employee_id. (optional)
     * @param string $assigned_employee_id Filter by tasks that are assigned to a given employee_id. (optional)
     * @param string $partner_id Query tasks associated to a given partner. (optional)
     * @param string $lead_id Query tasks associated to a given lead. (optional)
     * @param string $status Status for the tasks to be filtered by. (optional)
     * @param int $limit Number of resources to return. (optional)
     * @param bool $include_done  (optional, default to false)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\TaskResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksIndex($task_id = null, $geo_code = null, $employee_id = null, $completed_by_employee_id = null, $assigned_employee_id = null, $partner_id = null, $lead_id = null, $status = null, $limit = null, $include_done = null, $page = null, $query = null)
    {
        list($response) = $this->tasksIndexWithHttpInfo($task_id, $geo_code, $employee_id, $completed_by_employee_id, $assigned_employee_id, $partner_id, $lead_id, $status, $limit, $include_done, $page, $query);
        return $response;
    }

    /**
     * Operation tasksIndexWithHttpInfo
     *
     * List tasks by employee, asseigned_employee, etc.
     *
     * @param string $task_id Task id&#39;s to filter by. (optional)
     * @param string $geo_code  (optional)
     * @param string $employee_id  (optional)
     * @param string $completed_by_employee_id Filter by tasks that are completed by a given employee_id. (optional)
     * @param string $assigned_employee_id Filter by tasks that are assigned to a given employee_id. (optional)
     * @param string $partner_id Query tasks associated to a given partner. (optional)
     * @param string $lead_id Query tasks associated to a given lead. (optional)
     * @param string $status Status for the tasks to be filtered by. (optional)
     * @param int $limit Number of resources to return. (optional)
     * @param bool $include_done  (optional, default to false)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\TaskResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksIndexWithHttpInfo($task_id = null, $geo_code = null, $employee_id = null, $completed_by_employee_id = null, $assigned_employee_id = null, $partner_id = null, $lead_id = null, $status = null, $limit = null, $include_done = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($task_id !== null) {
            $queryParams['task_id'] = $this->apiClient->getSerializer()->toQueryValue($task_id);
        }
        // query params
        if ($geo_code !== null) {
            $queryParams['geo_code'] = $this->apiClient->getSerializer()->toQueryValue($geo_code);
        }
        // query params
        if ($employee_id !== null) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($employee_id);
        }
        // query params
        if ($completed_by_employee_id !== null) {
            $queryParams['completed_by_employee_id'] = $this->apiClient->getSerializer()->toQueryValue($completed_by_employee_id);
        }
        // query params
        if ($assigned_employee_id !== null) {
            $queryParams['assigned_employee_id'] = $this->apiClient->getSerializer()->toQueryValue($assigned_employee_id);
        }
        // query params
        if ($partner_id !== null) {
            $queryParams['partner_id'] = $this->apiClient->getSerializer()->toQueryValue($partner_id);
        }
        // query params
        if ($lead_id !== null) {
            $queryParams['lead_id'] = $this->apiClient->getSerializer()->toQueryValue($lead_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($include_done !== null) {
            $queryParams['include_done'] = $this->apiClient->getSerializer()->toQueryValue($include_done);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResult',
                '/tasks'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksPrioritiesGet
     *
     * Get a priority from a given id.
     *
     * @param string $priority_id  (required)
     * @return \Ageras\Api\TaskPriorityResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksPrioritiesGet($priority_id)
    {
        list($response) = $this->tasksPrioritiesGetWithHttpInfo($priority_id);
        return $response;
    }

    /**
     * Operation tasksPrioritiesGetWithHttpInfo
     *
     * Get a priority from a given id.
     *
     * @param string $priority_id  (required)
     * @return Array of \Ageras\Api\TaskPriorityResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksPrioritiesGetWithHttpInfo($priority_id)
    {
        // verify the required parameter 'priority_id' is set
        if ($priority_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $priority_id when calling tasksPrioritiesGet');
        }
        // parse inputs
        $resourcePath = "/tasks/priorities/{priority_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($priority_id !== null) {
            $resourcePath = str_replace(
                "{" . "priority_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($priority_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskPriorityResource',
                '/tasks/priorities/{priority_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskPriorityResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskPriorityResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksPrioritiesGet2
     *
     * Get a priority from a given id.
     *
     * @param string $task_id  (required)
     * @param string $priority_id  (required)
     * @return \Ageras\Api\TaskPriorityResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksPrioritiesGet2($task_id, $priority_id)
    {
        list($response) = $this->tasksPrioritiesGet2WithHttpInfo($task_id, $priority_id);
        return $response;
    }

    /**
     * Operation tasksPrioritiesGet2WithHttpInfo
     *
     * Get a priority from a given id.
     *
     * @param string $task_id  (required)
     * @param string $priority_id  (required)
     * @return Array of \Ageras\Api\TaskPriorityResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksPrioritiesGet2WithHttpInfo($task_id, $priority_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksPrioritiesGet2');
        }
        // verify the required parameter 'priority_id' is set
        if ($priority_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $priority_id when calling tasksPrioritiesGet2');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}/priorities/{priority_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($priority_id !== null) {
            $resourcePath = str_replace(
                "{" . "priority_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($priority_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskPriorityResource',
                '/tasks/{task_id}/priorities/{priority_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskPriorityResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskPriorityResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksPrioritiesIndex
     *
     * List priorities.
     *
     * @param string $priority_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\TaskPriorityResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksPrioritiesIndex($priority_id = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->tasksPrioritiesIndexWithHttpInfo($priority_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation tasksPrioritiesIndexWithHttpInfo
     *
     * List priorities.
     *
     * @param string $priority_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\TaskPriorityResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksPrioritiesIndexWithHttpInfo($priority_id = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/tasks/priorities";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($priority_id !== null) {
            $queryParams['priority_id'] = $this->apiClient->getSerializer()->toQueryValue($priority_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskPriorityResult',
                '/tasks/priorities'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskPriorityResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskPriorityResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksStatusesGet
     *
     * Get a status from a status_id.
     *
     * @param string $status_id  (required)
     * @return \Ageras\Api\TaskStatusResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksStatusesGet($status_id)
    {
        list($response) = $this->tasksStatusesGetWithHttpInfo($status_id);
        return $response;
    }

    /**
     * Operation tasksStatusesGetWithHttpInfo
     *
     * Get a status from a status_id.
     *
     * @param string $status_id  (required)
     * @return Array of \Ageras\Api\TaskStatusResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksStatusesGetWithHttpInfo($status_id)
    {
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling tasksStatusesGet');
        }
        // parse inputs
        $resourcePath = "/tasks/statuses/{status_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "status_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskStatusResource',
                '/tasks/statuses/{status_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskStatusResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskStatusResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksStatusesGet2
     *
     * Get a status from a status_id.
     *
     * @param string $task_id  (required)
     * @param string $status_id  (required)
     * @return \Ageras\Api\TaskStatusResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksStatusesGet2($task_id, $status_id)
    {
        list($response) = $this->tasksStatusesGet2WithHttpInfo($task_id, $status_id);
        return $response;
    }

    /**
     * Operation tasksStatusesGet2WithHttpInfo
     *
     * Get a status from a status_id.
     *
     * @param string $task_id  (required)
     * @param string $status_id  (required)
     * @return Array of \Ageras\Api\TaskStatusResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksStatusesGet2WithHttpInfo($task_id, $status_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksStatusesGet2');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling tasksStatusesGet2');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}/statuses/{status_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "status_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskStatusResource',
                '/tasks/{task_id}/statuses/{status_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskStatusResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskStatusResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksStatusesIndex
     *
     * List statuses.
     *
     * @param string $status_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\TaskStatusResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksStatusesIndex($status_id = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->tasksStatusesIndexWithHttpInfo($status_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation tasksStatusesIndexWithHttpInfo
     *
     * List statuses.
     *
     * @param string $status_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\TaskStatusResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksStatusesIndexWithHttpInfo($status_id = null, $limit = null, $page = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/tasks/statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($status_id !== null) {
            $queryParams['status_id'] = $this->apiClient->getSerializer()->toQueryValue($status_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskStatusResult',
                '/tasks/statuses'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskStatusResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskStatusResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesCreate
     *
     * create a new taskable for a given task.
     *
     * @param string $task_id  (required)
     * @param \Ageras\Api\TaskableResource $taskable_resource  (required)
     * @return \Ageras\Api\TaskableResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesCreate($task_id, $taskable_resource)
    {
        list($response) = $this->tasksTaskablesCreateWithHttpInfo($task_id, $taskable_resource);
        return $response;
    }

    /**
     * Operation tasksTaskablesCreateWithHttpInfo
     *
     * create a new taskable for a given task.
     *
     * @param string $task_id  (required)
     * @param \Ageras\Api\TaskableResource $taskable_resource  (required)
     * @return Array of \Ageras\Api\TaskableResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesCreateWithHttpInfo($task_id, $taskable_resource)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksTaskablesCreate');
        }
        // verify the required parameter 'taskable_resource' is set
        if ($taskable_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskable_resource when calling tasksTaskablesCreate');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($taskable_resource)) {
            $_tempBody = $taskable_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskableResource',
                '/tasks/{task_id}/taskables'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskableResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesDelete
     *
     * delete a taskable and remove it from the given task.
     *
     * @param string $task_id  (required)
     * @param string $taskable_id  (required)
     * @return void
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesDelete($task_id, $taskable_id)
    {
        list($response) = $this->tasksTaskablesDeleteWithHttpInfo($task_id, $taskable_id);
        return $response;
    }

    /**
     * Operation tasksTaskablesDeleteWithHttpInfo
     *
     * delete a taskable and remove it from the given task.
     *
     * @param string $task_id  (required)
     * @param string $taskable_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesDeleteWithHttpInfo($task_id, $taskable_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksTaskablesDelete');
        }
        // verify the required parameter 'taskable_id' is set
        if ($taskable_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskable_id when calling tasksTaskablesDelete');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables/{taskable_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($taskable_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskable_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tasks/{task_id}/taskables/{taskable_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesGet
     *
     * Get a taskable item from a given taskable id.
     *
     * @param string $task_id  (required)
     * @param string $taskable_id  (required)
     * @return \Ageras\Api\TaskableResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesGet($task_id, $taskable_id)
    {
        list($response) = $this->tasksTaskablesGetWithHttpInfo($task_id, $taskable_id);
        return $response;
    }

    /**
     * Operation tasksTaskablesGetWithHttpInfo
     *
     * Get a taskable item from a given taskable id.
     *
     * @param string $task_id  (required)
     * @param string $taskable_id  (required)
     * @return Array of \Ageras\Api\TaskableResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesGetWithHttpInfo($task_id, $taskable_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksTaskablesGet');
        }
        // verify the required parameter 'taskable_id' is set
        if ($taskable_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskable_id when calling tasksTaskablesGet');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables/{taskable_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($taskable_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskable_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskable_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskableResource',
                '/tasks/{task_id}/taskables/{taskable_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskableResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskableResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksTaskablesIndex
     *
     * List the taskables for a given task.
     *
     * @param string $task_id  (required)
     * @param string $taskable_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return \Ageras\Api\TaskableResult
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesIndex($task_id, $taskable_id = null, $limit = null, $page = null, $query = null)
    {
        list($response) = $this->tasksTaskablesIndexWithHttpInfo($task_id, $taskable_id, $limit, $page, $query);
        return $response;
    }

    /**
     * Operation tasksTaskablesIndexWithHttpInfo
     *
     * List the taskables for a given task.
     *
     * @param string $task_id  (required)
     * @param string $taskable_id  (optional)
     * @param int $limit The number of resources to be returned. (optional)
     * @param int $page The page position in the result. (optional)
     * @param string $query The search wildcard. (optional)
     * @return Array of \Ageras\Api\TaskableResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksTaskablesIndexWithHttpInfo($task_id, $taskable_id = null, $limit = null, $page = null, $query = null)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksTaskablesIndex');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}/taskables";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($taskable_id !== null) {
            $queryParams['taskable_id'] = $this->apiClient->getSerializer()->toQueryValue($taskable_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskableResult',
                '/tasks/{task_id}/taskables'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskableResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskableResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksUpdate
     *
     * Update a given task by its task_id.
     *
     * @param string $task_id  (required)
     * @param \Ageras\Api\TaskResource $task_resource  (required)
     * @return \Ageras\Api\TaskResource
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksUpdate($task_id, $task_resource)
    {
        list($response) = $this->tasksUpdateWithHttpInfo($task_id, $task_resource);
        return $response;
    }

    /**
     * Operation tasksUpdateWithHttpInfo
     *
     * Update a given task by its task_id.
     *
     * @param string $task_id  (required)
     * @param \Ageras\Api\TaskResource $task_resource  (required)
     * @return Array of \Ageras\Api\TaskResource, HTTP status code, HTTP response headers (array of strings)
     * @throws \Ageras\Api\ApiException on non-2xx response
     */
    public function tasksUpdateWithHttpInfo($task_id, $task_resource)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling tasksUpdate');
        }
        // verify the required parameter 'task_resource' is set
        if ($task_resource === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_resource when calling tasksUpdate');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($task_resource)) {
            $_tempBody = $task_resource;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Ageras\Api\TaskResource',
                '/tasks/{task_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Ageras\Api\TaskResource', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Ageras\Api\TaskResource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
