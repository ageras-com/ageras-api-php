<?php
/**
 * VoucherRefundRequestResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ageras\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ageras.com API
 *
 * this is the Ageras API
 *
 * OpenAPI spec version: 2.0
 * Contact: cto@ageras.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ageras\Api;

use \ArrayAccess;

/**
 * VoucherRefundRequestResource Class Doc Comment
 *
 * @category    Class
 * @package     Ageras\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VoucherRefundRequestResource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VoucherRefundRequestResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'invoice' => '\Ageras\Api\VoucherRefundRequestVoucherResource',
        'partner' => '\Ageras\Api\InvoicePartnerResource',
        'partner_user' => '\Ageras\Api\InvoicePartnerUserResource',
        'status' => 'string',
        'request_reason' => 'string',
        'partner_request_description' => 'string',
        'employee_decision_reason' => 'string',
        'requested_amount_excl_vat' => '\Ageras\Api\AmountResource',
        'accepted_amount_excl_vat' => '\Ageras\Api\AmountResource',
        'created_at' => 'string',
        'updated_at' => 'string',
        'documentation' => 'string',
        'documentation_url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice' => 'invoice',
        'partner' => 'partner',
        'partner_user' => 'partner_user',
        'status' => 'status',
        'request_reason' => 'request_reason',
        'partner_request_description' => 'partner_request_description',
        'employee_decision_reason' => 'employee_decision_reason',
        'requested_amount_excl_vat' => 'requested_amount_excl_vat',
        'accepted_amount_excl_vat' => 'accepted_amount_excl_vat',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'documentation' => 'documentation',
        'documentation_url' => 'documentation_url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice' => 'setInvoice',
        'partner' => 'setPartner',
        'partner_user' => 'setPartnerUser',
        'status' => 'setStatus',
        'request_reason' => 'setRequestReason',
        'partner_request_description' => 'setPartnerRequestDescription',
        'employee_decision_reason' => 'setEmployeeDecisionReason',
        'requested_amount_excl_vat' => 'setRequestedAmountExclVat',
        'accepted_amount_excl_vat' => 'setAcceptedAmountExclVat',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'documentation' => 'setDocumentation',
        'documentation_url' => 'setDocumentationUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice' => 'getInvoice',
        'partner' => 'getPartner',
        'partner_user' => 'getPartnerUser',
        'status' => 'getStatus',
        'request_reason' => 'getRequestReason',
        'partner_request_description' => 'getPartnerRequestDescription',
        'employee_decision_reason' => 'getEmployeeDecisionReason',
        'requested_amount_excl_vat' => 'getRequestedAmountExclVat',
        'accepted_amount_excl_vat' => 'getAcceptedAmountExclVat',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'documentation' => 'getDocumentation',
        'documentation_url' => 'getDocumentationUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_PENDING = 'pending';
    const STATUS_ACCEPTED = 'accepted';
    const STATUS_REJECTED = 'rejected';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_ACCEPTED,
            self::STATUS_REJECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['partner_user'] = isset($data['partner_user']) ? $data['partner_user'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'pending';
        $this->container['request_reason'] = isset($data['request_reason']) ? $data['request_reason'] : null;
        $this->container['partner_request_description'] = isset($data['partner_request_description']) ? $data['partner_request_description'] : null;
        $this->container['employee_decision_reason'] = isset($data['employee_decision_reason']) ? $data['employee_decision_reason'] : null;
        $this->container['requested_amount_excl_vat'] = isset($data['requested_amount_excl_vat']) ? $data['requested_amount_excl_vat'] : null;
        $this->container['accepted_amount_excl_vat'] = isset($data['accepted_amount_excl_vat']) ? $data['accepted_amount_excl_vat'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['documentation'] = isset($data['documentation']) ? $data['documentation'] : null;
        $this->container['documentation_url'] = isset($data['documentation_url']) ? $data['documentation_url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["pending", "accepted", "rejected"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'pending', 'accepted', 'rejected'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["pending", "accepted", "rejected"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Voucher refund request ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice
     * @return \Ageras\Api\VoucherRefundRequestVoucherResource
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     * @param \Ageras\Api\VoucherRefundRequestVoucherResource $invoice
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets partner
     * @return \Ageras\Api\InvoicePartnerResource
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     * @param \Ageras\Api\InvoicePartnerResource $partner
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets partner_user
     * @return \Ageras\Api\InvoicePartnerUserResource
     */
    public function getPartnerUser()
    {
        return $this->container['partner_user'];
    }

    /**
     * Sets partner_user
     * @param \Ageras\Api\InvoicePartnerUserResource $partner_user
     * @return $this
     */
    public function setPartnerUser($partner_user)
    {
        $this->container['partner_user'] = $partner_user;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status.
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('pending', 'accepted', 'rejected');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'pending', 'accepted', 'rejected'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets request_reason
     * @return string
     */
    public function getRequestReason()
    {
        return $this->container['request_reason'];
    }

    /**
     * Sets request_reason
     * @param string $request_reason Request reason.
     * @return $this
     */
    public function setRequestReason($request_reason)
    {
        $this->container['request_reason'] = $request_reason;

        return $this;
    }

    /**
     * Gets partner_request_description
     * @return string
     */
    public function getPartnerRequestDescription()
    {
        return $this->container['partner_request_description'];
    }

    /**
     * Sets partner_request_description
     * @param string $partner_request_description Request details.
     * @return $this
     */
    public function setPartnerRequestDescription($partner_request_description)
    {
        $this->container['partner_request_description'] = $partner_request_description;

        return $this;
    }

    /**
     * Gets employee_decision_reason
     * @return string
     */
    public function getEmployeeDecisionReason()
    {
        return $this->container['employee_decision_reason'];
    }

    /**
     * Sets employee_decision_reason
     * @param string $employee_decision_reason Employee's reason for their decision.
     * @return $this
     */
    public function setEmployeeDecisionReason($employee_decision_reason)
    {
        $this->container['employee_decision_reason'] = $employee_decision_reason;

        return $this;
    }

    /**
     * Gets requested_amount_excl_vat
     * @return \Ageras\Api\AmountResource
     */
    public function getRequestedAmountExclVat()
    {
        return $this->container['requested_amount_excl_vat'];
    }

    /**
     * Sets requested_amount_excl_vat
     * @param \Ageras\Api\AmountResource $requested_amount_excl_vat
     * @return $this
     */
    public function setRequestedAmountExclVat($requested_amount_excl_vat)
    {
        $this->container['requested_amount_excl_vat'] = $requested_amount_excl_vat;

        return $this;
    }

    /**
     * Gets accepted_amount_excl_vat
     * @return \Ageras\Api\AmountResource
     */
    public function getAcceptedAmountExclVat()
    {
        return $this->container['accepted_amount_excl_vat'];
    }

    /**
     * Sets accepted_amount_excl_vat
     * @param \Ageras\Api\AmountResource $accepted_amount_excl_vat
     * @return $this
     */
    public function setAcceptedAmountExclVat($accepted_amount_excl_vat)
    {
        $this->container['accepted_amount_excl_vat'] = $accepted_amount_excl_vat;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Created at date.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at Last update.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets documentation
     * @return string
     */
    public function getDocumentation()
    {
        return $this->container['documentation'];
    }

    /**
     * Sets documentation
     * @param string $documentation Base64-encoded supporting documentation.
     * @return $this
     */
    public function setDocumentation($documentation)
    {
        $this->container['documentation'] = $documentation;

        return $this;
    }

    /**
     * Gets documentation_url
     * @return string
     */
    public function getDocumentationUrl()
    {
        return $this->container['documentation_url'];
    }

    /**
     * Sets documentation_url
     * @param string $documentation_url URL to stored documentation file.
     * @return $this
     */
    public function setDocumentationUrl($documentation_url)
    {
        $this->container['documentation_url'] = $documentation_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ageras\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


